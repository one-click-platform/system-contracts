// Code generated - DO NOT EDIT.
// This file is a generated binding and any manual changes will be lost.

package generated

import (
	"math/big"
	"strings"

	ethereum "github.com/ethereum/go-ethereum"
	"github.com/ethereum/go-ethereum/accounts/abi"
	"github.com/ethereum/go-ethereum/accounts/abi/bind"
	"github.com/ethereum/go-ethereum/common"
	"github.com/ethereum/go-ethereum/core/types"
	"github.com/ethereum/go-ethereum/event"
)

// Reference imports to suppress errors if they are not otherwise used.
var (
	_ = big.NewInt
	_ = strings.NewReader
	_ = ethereum.NotFound
	_ = bind.Bind
	_ = common.Big1
	_ = types.BloomLookup
	_ = event.NewSubscription
)

// AuctionAuctionInfo is an auto generated low-level Go binding around an user-defined struct.
type AuctionAuctionInfo struct {
	Creator              common.Address
	StartPrice           *big.Int
	BuyNowPrice          *big.Int
	StartTime            *big.Int
	Duration             *big.Int
	DurationIncrement    *big.Int
	BidIncrement         *big.Int
	Description          string
	TokenAddress         common.Address
	TokenId              *big.Int
	CurrencyAddress      common.Address
	CurrentBidder        common.Address
	HighestBid           *big.Int
	LotBought            bool
	RepaymentTransferred bool
	LotTransferred       bool
}

// AuctionABI is the input ABI used to generate the binding from.
const AuctionABI = "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_auctionId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_bidder\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"AuctionBid\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_auctionId\",\"type\":\"uint256\"}],\"name\":\"AuctionClosed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_creator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_tokenAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_currencyAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_auctionId\",\"type\":\"uint256\"}],\"name\":\"AuctionCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_auctionId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_winner\",\"type\":\"address\"}],\"name\":\"LotTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_auctionId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_creator\",\"type\":\"address\"}],\"name\":\"RepaymentTransferred\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_auctionId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"bid\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_auctionId\",\"type\":\"uint256\"}],\"name\":\"buyNow\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_auctionId\",\"type\":\"uint256\"}],\"name\":\"claimLot\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_auctionId\",\"type\":\"uint256\"}],\"name\":\"claimRepayment\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_auctionId\",\"type\":\"uint256\"}],\"name\":\"closeAuction\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"countOfAuctions\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_tokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_currencyAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_startPrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_buyNowPrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_startTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_duration\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_durationIncrement\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_bidIncrement\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"_description\",\"type\":\"string\"}],\"name\":\"createAuction\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_auctionId\",\"type\":\"uint256\"}],\"name\":\"getAuctionInfo\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"creator\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"startPrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"buyNowPrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"startTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"duration\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"durationIncrement\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"bidIncrement\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"description\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"currencyAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"currentBidder\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"highestBid\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"lotBought\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"repaymentTransferred\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"lotTransferred\",\"type\":\"bool\"}],\"internalType\":\"structAuction.AuctionInfo\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_auctionId\",\"type\":\"uint256\"}],\"name\":\"getRaisingBid\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_auctionId\",\"type\":\"uint256\"}],\"name\":\"getStatus\",\"outputs\":[{\"internalType\":\"enumAuction.AuctionStatus\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]"

// AuctionBin is the compiled bytecode used for deploying new contracts.
var AuctionBin = "0x60806040523480156200001157600080fd5b50600062000024620000c860201b60201c565b9050806000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508073ffffffffffffffffffffffffffffffffffffffff16600073ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a350620000d0565b600033905090565b61502680620000e06000396000f3fe608060405234801561001057600080fd5b50600436106100ce5760003560e01c80635c622a0e1161008c578063a216592011610066578063a2165920146101e9578063f2da066414610219578063f2fde38b14610235578063fc3fc4ed14610251576100ce565b80635c622a0e14610191578063715018a6146101c15780638da5cb5b146101cb576100ce565b8062d878e8146100d357806308a0f32f146100ef57806322a0119b1461010b578063236ed8f3146101295780634bc28ede14610145578063598647f814610175575b600080fd5b6100ed60048036038101906100e89190613da6565b610281565b005b61010960048036038101906101049190613da6565b6107f4565b005b610113610f1e565b60405161012091906146c3565b60405180910390f35b610143600480360381019061013e9190613da6565b610f24565b005b61015f600480360381019061015a9190613c8a565b6116d4565b60405161016c91906146c3565b60405180910390f35b61018f600480360381019061018a9190613dcf565b611f22565b005b6101ab60048036038101906101a69190613da6565b612691565b6040516101b891906143c6565b60405180910390f35b6101c9612a08565b005b6101d3612b42565b6040516101e091906142f8565b60405180910390f35b61020360048036038101906101fe9190613da6565b612b6b565b60405161021091906146c3565b60405180910390f35b610233600480360381019061022e9190613da6565b612f49565b005b61024f600480360381019061024a9190613c38565b613457565b005b61026b60048036038101906102669190613da6565b613600565b60405161027891906146a1565b60405180910390f35b80600360048111156102bc577f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b6102c582612691565b60048111156102fd577f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b1461033d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161033490614441565b60405180910390fd5b600060026000848152602001908152602001600020604051806102000160405290816000820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200160018201548152602001600282015481526020016003820154815260200160048201548152602001600582015481526020016006820154815260200160078201805461040090614985565b80601f016020809104026020016040519081016040528092919081815260200182805461042c90614985565b80156104795780601f1061044e57610100808354040283529160200191610479565b820191906000526020600020905b81548152906001019060200180831161045c57829003601f168201915b505050505081526020016008820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200160098201548152602001600a820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001600b820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001600c8201548152602001600d820160009054906101000a900460ff16151515158152602001600d820160019054906101000a900460ff16151515158152602001600d820160029054906101000a900460ff16151515158152505090503373ffffffffffffffffffffffffffffffffffffffff16816000015173ffffffffffffffffffffffffffffffffffffffff161461065d576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610654906143e1565b60405180910390fd5b806101c00151156106a3576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161069a90614601565b60405180910390fd5b600081610140015173ffffffffffffffffffffffffffffffffffffffff1663a9059cbb83600001518461018001516040518363ffffffff1660e01b81526004016106ee92919061439d565b602060405180830381600087803b15801561070857600080fd5b505af115801561071c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107409190613d7d565b905080610782576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161077990614681565b60405180910390fd5b600160026000868152602001908152602001600020600d0160016101000a81548160ff0219169083151502179055507fcede1e8bc44e44a1be509c46755459a8fef702efbee4649158b5376942bc14b98483600001516040516107e69291906146de565b60405180910390a150505050565b806002600481111561082f577f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b61083882612691565b6004811115610870577f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b146108b0576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016108a7906144a1565b60405180910390fd5b600060026000848152602001908152602001600020604051806102000160405290816000820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200160018201548152602001600282015481526020016003820154815260200160048201548152602001600582015481526020016006820154815260200160078201805461097390614985565b80601f016020809104026020016040519081016040528092919081815260200182805461099f90614985565b80156109ec5780601f106109c1576101008083540402835291602001916109ec565b820191906000526020600020905b8154815290600101906020018083116109cf57829003601f168201915b505050505081526020016008820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200160098201548152602001600a820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001600b820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001600c8201548152602001600d820160009054906101000a900460ff16151515158152602001600d820160019054906101000a900460ff16151515158152602001600d820160029054906101000a900460ff1615151515815250509050600081610140015173ffffffffffffffffffffffffffffffffffffffff166323b872dd333085604001516040518463ffffffff1660e01b8152600401610ba693929190614313565b602060405180830381600087803b158015610bc057600080fd5b505af1158015610bd4573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610bf89190613d7d565b905080610c3a576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610c3190614681565b60405180910390fd5b81610100015173ffffffffffffffffffffffffffffffffffffffff166323b872dd30338561012001516040518463ffffffff1660e01b8152600401610c8193929190614313565b600060405180830381600087803b158015610c9b57600080fd5b505af1158015610caf573d6000803e3d6000fd5b505050506001826101a00190151590811515815250506001826101e0019015159081151581525050816002600086815260200190815260200160002060008201518160000160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506020820151816001015560408201518160020155606082015181600301556080820151816004015560a0820151816005015560c0820151816006015560e0820151816007019080519060200190610d8a9291906139fe565b506101008201518160080160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550610120820151816009015561014082015181600a0160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555061016082015181600b0160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555061018082015181600c01556101a082015181600d0160006101000a81548160ff0219169083151502179055506101c082015181600d0160016101000a81548160ff0219169083151502179055506101e082015181600d0160026101000a81548160ff0219169083151502179055509050507f0e60401031695311e5192456b98ba458c20ba883eb86b101645de6252c6e9dd38433604051610f109291906146de565b60405180910390a150505050565b60015481565b610f2c613977565b73ffffffffffffffffffffffffffffffffffffffff16610f4a612b42565b73ffffffffffffffffffffffffffffffffffffffff1614610fa0576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610f9790614541565b60405180910390fd5b8060036004811115610fdb577f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b610fe482612691565b600481111561101c577f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b1461105c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161105390614441565b60405180910390fd5b600060026000848152602001908152602001600020604051806102000160405290816000820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200160018201548152602001600282015481526020016003820154815260200160048201548152602001600582015481526020016006820154815260200160078201805461111f90614985565b80601f016020809104026020016040519081016040528092919081815260200182805461114b90614985565b80156111985780601f1061116d57610100808354040283529160200191611198565b820191906000526020600020905b81548152906001019060200180831161117b57829003601f168201915b505050505081526020016008820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200160098201548152602001600a820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001600b820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001600c8201548152602001600d820160009054906101000a900460ff16151515158152602001600d820160019054906101000a900460ff16151515158152602001600d820160029054906101000a900460ff1615151515815250509050806101c001516113f557600081610140015173ffffffffffffffffffffffffffffffffffffffff1663a9059cbb83600001518461018001516040518363ffffffff1660e01b815260040161135f92919061439d565b602060405180830381600087803b15801561137957600080fd5b505af115801561138d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906113b19190613d7d565b9050806113f3576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016113ea90614681565b60405180910390fd5b505b806101e001516114905780610100015173ffffffffffffffffffffffffffffffffffffffff166323b872dd308361016001518461012001516040518463ffffffff1660e01b815260040161144b93929190614313565b600060405180830381600087803b15801561146557600080fd5b505af1158015611479573d6000803e3d6000fd5b505050506001816101e00190151590811515815250505b806002600085815260200190815260200160002060008201518160000160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506020820151816001015560408201518160020155606082015181600301556080820151816004015560a0820151816005015560c0820151816006015560e08201518160070190805190602001906115439291906139fe565b506101008201518160080160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550610120820151816009015561014082015181600a0160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555061016082015181600b0160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555061018082015181600c01556101a082015181600d0160006101000a81548160ff0219169083151502179055506101c082015181600d0160016101000a81548160ff0219169083151502179055506101e082015181600d0160026101000a81548160ff0219169083151502179055509050507fac4a907ec29adcc56774b757ecb1e1b4d597374fc9386107d05e2670259df7d3836040516116c791906146c3565b60405180910390a1505050565b60006116f58b73ffffffffffffffffffffffffffffffffffffffff1661397f565b611734576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161172b90614641565b60405180910390fd5b60008b90503373ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16636352211e8d6040518263ffffffff1660e01b815260040161178991906146c3565b60206040518083038186803b1580156117a157600080fd5b505afa1580156117b5573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906117d99190613c61565b73ffffffffffffffffffffffffffffffffffffffff161461182f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161182690614481565b60405180910390fd5b3073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1663081812fc8d6040518263ffffffff1660e01b815260040161187f91906146c3565b60206040518083038186803b15801561189757600080fd5b505afa1580156118ab573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906118cf9190613c61565b73ffffffffffffffffffffffffffffffffffffffff1614611925576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161191c906145e1565b60405180910390fd5b6119448a73ffffffffffffffffffffffffffffffffffffffff1661397f565b611983576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161197a90614421565b60405180910390fd5b60008914156119c7576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016119be90614561565b60405180910390fd5b88881015611a0a576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611a01906145a1565b60405180910390fd5b6000861415611a4e576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611a4590614581565b60405180910390fd5b6000851415611a92576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611a8990614501565b60405180910390fd5b836000108015611aa95750611aa5613992565b8411155b611ae8576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611adf90614461565b60405180910390fd5b8073ffffffffffffffffffffffffffffffffffffffff166323b872dd33308e6040518463ffffffff1660e01b8152600401611b2593929190614313565b600060405180830381600087803b158015611b3f57600080fd5b505af1158015611b53573d6000803e3d6000fd5b50505050611b5f613a84565b42881015611ba45742816060018181525050611b96611b8789426139a690919063ffffffff16565b886139a690919063ffffffff16565b816080018181525050611bb9565b87816060018181525050868160800181815250505b33816000019073ffffffffffffffffffffffffffffffffffffffff16908173ffffffffffffffffffffffffffffffffffffffff16815250508c81610100019073ffffffffffffffffffffffffffffffffffffffff16908173ffffffffffffffffffffffffffffffffffffffff16815250508b816101200181815250508a81610140019073ffffffffffffffffffffffffffffffffffffffff16908173ffffffffffffffffffffffffffffffffffffffff16815250508981602001818152505088816040018181525050848160c0018181525050838160e0018190525060006001549050816002600083815260200190815260200160002060008201518160000160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506020820151816001015560408201518160020155606082015181600301556080820151816004015560a0820151816005015560c0820151816006015560e0820151816007019080519060200190611d4f9291906139fe565b506101008201518160080160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550610120820151816009015561014082015181600a0160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555061016082015181600b0160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555061018082015181600c01556101a082015181600d0160006101000a81548160ff0219169083151502179055506101c082015181600d0160016101000a81548160ff0219169083151502179055506101e082015181600d0160026101000a81548160ff02191690831515021790555090505060016000815480929190611eb7906149e8565b91905055507f03bb6e669c5d9d2143afb3599bda2cc92f483158549e37b474a6dc117f848b68826000015183610100015184610120015185610140015185604051611f0695949392919061434a565b60405180910390a18093505050509a9950505050505050505050565b611f2b82612b6b565b811015611f6d576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611f64906144c1565b60405180910390fd5b600060026000848152602001908152602001600020604051806102000160405290816000820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200160018201548152602001600282015481526020016003820154815260200160048201548152602001600582015481526020016006820154815260200160078201805461203090614985565b80601f016020809104026020016040519081016040528092919081815260200182805461205c90614985565b80156120a95780601f1061207e576101008083540402835291602001916120a9565b820191906000526020600020905b81548152906001019060200180831161208c57829003601f168201915b505050505081526020016008820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200160098201548152602001600a820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001600b820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001600c8201548152602001600d820160009054906101000a900460ff16151515158152602001600d820160019054906101000a900460ff16151515158152602001600d820160029054906101000a900460ff16151515158152505090506000816101400151905060008173ffffffffffffffffffffffffffffffffffffffff166323b872dd3330876040518463ffffffff1660e01b815260040161226493929190614313565b602060405180830381600087803b15801561227e57600080fd5b505af1158015612292573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906122b69190613d7d565b9050806122f8576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016122ef90614621565b60405180910390fd5b6000836101800151146123df578173ffffffffffffffffffffffffffffffffffffffff1663a9059cbb8461016001518561018001516040518363ffffffff1660e01b815260040161234a92919061439d565b602060405180830381600087803b15801561236457600080fd5b505af1158015612378573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061239c9190613d7d565b9050806123de576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016123d5906144e1565b60405180910390fd5b5b83836101800181815250503383610160019073ffffffffffffffffffffffffffffffffffffffff16908173ffffffffffffffffffffffffffffffffffffffff168152505061243e8360a0015184608001516139bc90919063ffffffff16565b836080018181525050826002600087815260200190815260200160002060008201518160000160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506020820151816001015560408201518160020155606082015181600301556080820151816004015560a0820151816005015560c0820151816006015560e08201518160070190805190602001906124fa9291906139fe565b506101008201518160080160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550610120820151816009015561014082015181600a0160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555061016082015181600b0160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555061018082015181600c01556101a082015181600d0160006101000a81548160ff0219169083151502179055506101c082015181600d0160016101000a81548160ff0219169083151502179055506101e082015181600d0160026101000a81548160ff0219169083151502179055509050507fb8d756f2d1da4663767eb4d559780ace84f2f65a421a60ddcb47e8b2e5d2fd2685338660405161268293929190614707565b60405180910390a15050505050565b60008060026000848152602001908152602001600020604051806102000160405290816000820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200160018201548152602001600282015481526020016003820154815260200160048201548152602001600582015481526020016006820154815260200160078201805461275590614985565b80601f016020809104026020016040519081016040528092919081815260200182805461278190614985565b80156127ce5780601f106127a3576101008083540402835291602001916127ce565b820191906000526020600020905b8154815290600101906020018083116127b157829003601f168201915b505050505081526020016008820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200160098201548152602001600a820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001600b820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001600c8201548152602001600d820160009054906101000a900460ff16151515158152602001600d820160019054906101000a900460ff16151515158152602001600d820160029054906101000a900460ff1615151515815250509050600073ffffffffffffffffffffffffffffffffffffffff16816000015173ffffffffffffffffffffffffffffffffffffffff161415612983576000915050612a03565b806101c0015180156129975750806101e001515b156129a6576004915050612a03565b806101a00151156129bb576003915050612a03565b80606001514210156129d1576001915050612a03565b6129ec816080015182606001516139bc90919063ffffffff16565b4210156129fd576002915050612a03565b60039150505b919050565b612a10613977565b73ffffffffffffffffffffffffffffffffffffffff16612a2e612b42565b73ffffffffffffffffffffffffffffffffffffffff1614612a84576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612a7b90614541565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff1660008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a360008060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b60008160026004811115612ba8577f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b612bb182612691565b6004811115612be9577f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b14612c29576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612c20906144a1565b60405180910390fd5b600060026000858152602001908152602001600020604051806102000160405290816000820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001600182015481526020016002820154815260200160038201548152602001600482015481526020016005820154815260200160068201548152602001600782018054612cec90614985565b80601f0160208091040260200160405190810160405280929190818152602001828054612d1890614985565b8015612d655780601f10612d3a57610100808354040283529160200191612d65565b820191906000526020600020905b815481529060010190602001808311612d4857829003601f168201915b505050505081526020016008820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200160098201548152602001600a820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001600b820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001600c8201548152602001600d820160009054906101000a900460ff16151515158152602001600d820160019054906101000a900460ff16151515158152602001600d820160029054906101000a900460ff161515151581525050905060008161018001511415612ef2578060200151925050612f43565b60008161018001519050612f3e81612f30612f0b613992565b612f228660c00151866139d290919063ffffffff16565b6139e890919063ffffffff16565b6139bc90919063ffffffff16565b935050505b50919050565b8060036004811115612f84577f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b612f8d82612691565b6004811115612fc5577f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b14613005576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612ffc90614441565b60405180910390fd5b600060026000848152602001908152602001600020604051806102000160405290816000820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020016001820154815260200160028201548152602001600382015481526020016004820154815260200160058201548152602001600682015481526020016007820180546130c890614985565b80601f01602080910402602001604051908101604052809291908181526020018280546130f490614985565b80156131415780601f1061311657610100808354040283529160200191613141565b820191906000526020600020905b81548152906001019060200180831161312457829003601f168201915b505050505081526020016008820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200160098201548152602001600a820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001600b820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001600c8201548152602001600d820160009054906101000a900460ff16151515158152602001600d820160019054906101000a900460ff16151515158152602001600d820160029054906101000a900460ff16151515158152505090503373ffffffffffffffffffffffffffffffffffffffff1681610160015173ffffffffffffffffffffffffffffffffffffffff1614613326576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161331d906145c1565b60405180910390fd5b806101e001511561336c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161336390614661565b60405180910390fd5b80610100015173ffffffffffffffffffffffffffffffffffffffff166323b872dd308361016001518461012001516040518463ffffffff1660e01b81526004016133b893929190614313565b600060405180830381600087803b1580156133d257600080fd5b505af11580156133e6573d6000803e3d6000fd5b50505050600160026000858152602001908152602001600020600d0160026101000a81548160ff0219169083151502179055507f0e60401031695311e5192456b98ba458c20ba883eb86b101645de6252c6e9dd3833360405161344a9291906146de565b60405180910390a1505050565b61345f613977565b73ffffffffffffffffffffffffffffffffffffffff1661347d612b42565b73ffffffffffffffffffffffffffffffffffffffff16146134d3576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016134ca90614541565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161415613543576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161353a90614401565b60405180910390fd5b8073ffffffffffffffffffffffffffffffffffffffff1660008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a3806000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b613608613a84565b8160006004811115613643577f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b61364c82612691565b6004811115613684577f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b14156136c5576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016136bc90614521565b60405180910390fd5b60026000848152602001908152602001600020604051806102000160405290816000820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200160018201548152602001600282015481526020016003820154815260200160048201548152602001600582015481526020016006820154815260200160078201805461378690614985565b80601f01602080910402602001604051908101604052809291908181526020018280546137b290614985565b80156137ff5780601f106137d4576101008083540402835291602001916137ff565b820191906000526020600020905b8154815290600101906020018083116137e257829003601f168201915b505050505081526020016008820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200160098201548152602001600a820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001600b820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001600c8201548152602001600d820160009054906101000a900460ff16151515158152602001600d820160019054906101000a900460ff16151515158152602001600d820160029054906101000a900460ff161515151581525050915050919050565b600033905090565b600080823b905060008111915050919050565b60006b033b2e3c9fd0803ce8000000905090565b600081836139b491906148a2565b905092915050565b600081836139ca91906147c1565b905092915050565b600081836139e09190614848565b905092915050565b600081836139f69190614817565b905092915050565b828054613a0a90614985565b90600052602060002090601f016020900481019282613a2c5760008555613a73565b82601f10613a4557805160ff1916838001178555613a73565b82800160010185558215613a73579182015b82811115613a72578251825591602001919060010190613a57565b5b509050613a809190613b5f565b5090565b604051806102000160405280600073ffffffffffffffffffffffffffffffffffffffff16815260200160008152602001600081526020016000815260200160008152602001600081526020016000815260200160608152602001600073ffffffffffffffffffffffffffffffffffffffff16815260200160008152602001600073ffffffffffffffffffffffffffffffffffffffff168152602001600073ffffffffffffffffffffffffffffffffffffffff168152602001600081526020016000151581526020016000151581526020016000151581525090565b5b80821115613b78576000816000905550600101613b60565b5090565b6000613b8f613b8a84614763565b61473e565b905082815260208101848484011115613ba757600080fd5b613bb2848285614943565b509392505050565b600081359050613bc981614fab565b92915050565b600081519050613bde81614fab565b92915050565b600081519050613bf381614fc2565b92915050565b600082601f830112613c0a57600080fd5b8135613c1a848260208601613b7c565b91505092915050565b600081359050613c3281614fd9565b92915050565b600060208284031215613c4a57600080fd5b6000613c5884828501613bba565b91505092915050565b600060208284031215613c7357600080fd5b6000613c8184828501613bcf565b91505092915050565b6000806000806000806000806000806101408b8d031215613caa57600080fd5b6000613cb88d828e01613bba565b9a50506020613cc98d828e01613c23565b9950506040613cda8d828e01613bba565b9850506060613ceb8d828e01613c23565b9750506080613cfc8d828e01613c23565b96505060a0613d0d8d828e01613c23565b95505060c0613d1e8d828e01613c23565b94505060e0613d2f8d828e01613c23565b935050610100613d418d828e01613c23565b9250506101208b013567ffffffffffffffff811115613d5f57600080fd5b613d6b8d828e01613bf9565b9150509295989b9194979a5092959850565b600060208284031215613d8f57600080fd5b6000613d9d84828501613be4565b91505092915050565b600060208284031215613db857600080fd5b6000613dc684828501613c23565b91505092915050565b60008060408385031215613de257600080fd5b6000613df085828601613c23565b9250506020613e0185828601613c23565b9150509250929050565b613e14816148d6565b82525050565b613e23816148d6565b82525050565b613e32816148e8565b82525050565b613e4181614931565b82525050565b6000613e5282614794565b613e5c818561479f565b9350613e6c818560208601614952565b613e7581614b1c565b840191505092915050565b6000613e8d601b836147b0565b9150613e9882614b2d565b602082019050919050565b6000613eb06026836147b0565b9150613ebb82614b56565b604082019050919050565b6000613ed36020836147b0565b9150613ede82614ba5565b602082019050919050565b6000613ef66017836147b0565b9150613f0182614bce565b602082019050919050565b6000613f196015836147b0565b9150613f2482614bf7565b602082019050919050565b6000613f3c6015836147b0565b9150613f4782614c20565b602082019050919050565b6000613f5f6015836147b0565b9150613f6a82614c49565b602082019050919050565b6000613f826053836147b0565b9150613f8d82614c72565b606082019050919050565b6000613fa56012836147b0565b9150613fb082614ce7565b602082019050919050565b6000613fc86019836147b0565b9150613fd382614d10565b602082019050919050565b6000613feb6016836147b0565b9150613ff682614d39565b602082019050919050565b600061400e6020836147b0565b915061401982614d62565b602082019050919050565b60006140316013836147b0565b915061403c82614d8b565b602082019050919050565b60006140546018836147b0565b915061405f82614db4565b602082019050919050565b60006140776033836147b0565b915061408282614ddd565b604082019050919050565b600061409a6014836147b0565b91506140a582614e2c565b602082019050919050565b60006140bd6013836147b0565b91506140c882614e55565b602082019050919050565b60006140e0602a836147b0565b91506140eb82614e7e565b604082019050919050565b60006141036020836147b0565b915061410e82614ecd565b602082019050919050565b6000614126601d836147b0565b915061413182614ef6565b602082019050919050565b60006141496024836147b0565b915061415482614f1f565b604082019050919050565b600061416c6020836147b0565b915061417782614f6e565b602082019050919050565b60006102008301600083015161419b6000860182613e0b565b5060208301516141ae60208601826142da565b5060408301516141c160408601826142da565b5060608301516141d460608601826142da565b5060808301516141e760808601826142da565b5060a08301516141fa60a08601826142da565b5060c083015161420d60c08601826142da565b5060e083015184820360e08601526142258282613e47565b91505061010083015161423c610100860182613e0b565b506101208301516142516101208601826142da565b50610140830151614266610140860182613e0b565b5061016083015161427b610160860182613e0b565b506101808301516142906101808601826142da565b506101a08301516142a56101a0860182613e29565b506101c08301516142ba6101c0860182613e29565b506101e08301516142cf6101e0860182613e29565b508091505092915050565b6142e381614927565b82525050565b6142f281614927565b82525050565b600060208201905061430d6000830184613e1a565b92915050565b60006060820190506143286000830186613e1a565b6143356020830185613e1a565b61434260408301846142e9565b949350505050565b600060a08201905061435f6000830188613e1a565b61436c6020830187613e1a565b61437960408301866142e9565b6143866060830185613e1a565b61439360808301846142e9565b9695505050505050565b60006040820190506143b26000830185613e1a565b6143bf60208301846142e9565b9392505050565b60006020820190506143db6000830184613e38565b92915050565b600060208201905081810360008301526143fa81613e80565b9050919050565b6000602082019050818103600083015261441a81613ea3565b9050919050565b6000602082019050818103600083015261443a81613ec6565b9050919050565b6000602082019050818103600083015261445a81613ee9565b9050919050565b6000602082019050818103600083015261447a81613f0c565b9050919050565b6000602082019050818103600083015261449a81613f2f565b9050919050565b600060208201905081810360008301526144ba81613f52565b9050919050565b600060208201905081810360008301526144da81613f75565b9050919050565b600060208201905081810360008301526144fa81613f98565b9050919050565b6000602082019050818103600083015261451a81613fbb565b9050919050565b6000602082019050818103600083015261453a81613fde565b9050919050565b6000602082019050818103600083015261455a81614001565b9050919050565b6000602082019050818103600083015261457a81614024565b9050919050565b6000602082019050818103600083015261459a81614047565b9050919050565b600060208201905081810360008301526145ba8161406a565b9050919050565b600060208201905081810360008301526145da8161408d565b9050919050565b600060208201905081810360008301526145fa816140b0565b9050919050565b6000602082019050818103600083015261461a816140d3565b9050919050565b6000602082019050818103600083015261463a816140f6565b9050919050565b6000602082019050818103600083015261465a81614119565b9050919050565b6000602082019050818103600083015261467a8161413c565b9050919050565b6000602082019050818103600083015261469a8161415f565b9050919050565b600060208201905081810360008301526146bb8184614182565b905092915050565b60006020820190506146d860008301846142e9565b92915050565b60006040820190506146f360008301856142e9565b6147006020830184613e1a565b9392505050565b600060608201905061471c60008301866142e9565b6147296020830185613e1a565b61473660408301846142e9565b949350505050565b6000614748614759565b905061475482826149b7565b919050565b6000604051905090565b600067ffffffffffffffff82111561477e5761477d614aed565b5b61478782614b1c565b9050602081019050919050565b600081519050919050565b600082825260208201905092915050565b600082825260208201905092915050565b60006147cc82614927565b91506147d783614927565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0382111561480c5761480b614a31565b5b828201905092915050565b600061482282614927565b915061482d83614927565b92508261483d5761483c614a60565b5b828204905092915050565b600061485382614927565b915061485e83614927565b9250817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff048311821515161561489757614896614a31565b5b828202905092915050565b60006148ad82614927565b91506148b883614927565b9250828210156148cb576148ca614a31565b5b828203905092915050565b60006148e182614907565b9050919050565b60008115159050919050565b600081905061490282614f97565b919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b600061493c826148f4565b9050919050565b82818337600083830152505050565b60005b83811015614970578082015181840152602081019050614955565b8381111561497f576000848401525b50505050565b6000600282049050600182168061499d57607f821691505b602082108114156149b1576149b0614abe565b5b50919050565b6149c082614b1c565b810181811067ffffffffffffffff821117156149df576149de614aed565b5b80604052505050565b60006149f382614927565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff821415614a2657614a25614a31565b5b600182019050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6000601f19601f8301169050919050565b7f53656e646572206973206e6f742061756374696f6e206f776e65720000000000600082015250565b7f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160008201527f6464726573730000000000000000000000000000000000000000000000000000602082015250565b7f476976656e2063757272656e6379206973206e6f74206120636f6e7472616374600082015250565b7f41756374696f6e206973206e6f742066696e6973686564000000000000000000600082015250565b7f496e76616c69642062696420696e6372656d656e740000000000000000000000600082015250565b7f4973206e6f74206f776e6572206f662061737365740000000000000000000000600082015250565b7f41756374696f6e206973206e6f74206163746976650000000000000000000000600082015250565b7f42696420616d6f756e74206d757374206578636565642074686520686967686560008201527f73742062696420627920746865206d696e696d756d20696e6372656d656e742060208201527f70657263656e74616765206f72206d6f72652e00000000000000000000000000604082015250565b7f4661696c656420746f20706179206261636b0000000000000000000000000000600082015250565b7f496e76616c69642061756374696f6e20696e6372656d656e7400000000000000600082015250565b7f41756374696f6e20646f6573206e6f7420657869737400000000000000000000600082015250565b7f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572600082015250565b7f496e76616c696420737461727420707269636500000000000000000000000000600082015250565b7f496e76616c69642061756374696f6e206475726174696f6e0000000000000000600082015250565b7f427579206e6f772070726963652073686f756c6420686967686572206f72206560008201527f7175616c20746f20737461727420707269636500000000000000000000000000602082015250565b7f53656e646572206973206e6f742077696e6e6572000000000000000000000000600082015250565b7f4c6f74206973206e6f7420617070726f76656400000000000000000000000000600082015250565b7f5468652072657061796d656e742068617320616c7265616479206265656e207460008201527f72616e7366657272656400000000000000000000000000000000000000000000602082015250565b7f4661696c656420746f207472616e7366657220746f6b656e7320746f20626964600082015250565b7f476976656e20746f6b656e206973206e6f74206120636f6e7472616374000000600082015250565b7f546865206c6f742068617320616c7265616479206265656e207472616e73666560008201527f7272656400000000000000000000000000000000000000000000000000000000602082015250565b7f4661696c656420746f207472616e73666572207468652072657061796d656e74600082015250565b60058110614fa857614fa7614a8f565b5b50565b614fb4816148d6565b8114614fbf57600080fd5b50565b614fcb816148e8565b8114614fd657600080fd5b50565b614fe281614927565b8114614fed57600080fd5b5056fea2646970667358221220ab4d20d2e77466b2dc8b05b165934558ac54cdb7373271d417821d1ceebf33eb64736f6c63430008030033"

// DeployAuction deploys a new Ethereum contract, binding an instance of Auction to it.
func DeployAuction(auth *bind.TransactOpts, backend bind.ContractBackend) (common.Address, *types.Transaction, *Auction, error) {
	parsed, err := abi.JSON(strings.NewReader(AuctionABI))
	if err != nil {
		return common.Address{}, nil, nil, err
	}

	address, tx, contract, err := bind.DeployContract(auth, parsed, common.FromHex(AuctionBin), backend)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &Auction{AuctionCaller: AuctionCaller{contract: contract}, AuctionTransactor: AuctionTransactor{contract: contract}, AuctionFilterer: AuctionFilterer{contract: contract}}, nil
}

// Auction is an auto generated Go binding around an Ethereum contract.
type Auction struct {
	AuctionCaller     // Read-only binding to the contract
	AuctionTransactor // Write-only binding to the contract
	AuctionFilterer   // Log filterer for contract events
}

// AuctionCaller is an auto generated read-only Go binding around an Ethereum contract.
type AuctionCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// AuctionTransactor is an auto generated write-only Go binding around an Ethereum contract.
type AuctionTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// AuctionFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type AuctionFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// AuctionSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type AuctionSession struct {
	Contract     *Auction          // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// AuctionCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type AuctionCallerSession struct {
	Contract *AuctionCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts  // Call options to use throughout this session
}

// AuctionTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type AuctionTransactorSession struct {
	Contract     *AuctionTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts  // Transaction auth options to use throughout this session
}

// AuctionRaw is an auto generated low-level Go binding around an Ethereum contract.
type AuctionRaw struct {
	Contract *Auction // Generic contract binding to access the raw methods on
}

// AuctionCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type AuctionCallerRaw struct {
	Contract *AuctionCaller // Generic read-only contract binding to access the raw methods on
}

// AuctionTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type AuctionTransactorRaw struct {
	Contract *AuctionTransactor // Generic write-only contract binding to access the raw methods on
}

// NewAuction creates a new instance of Auction, bound to a specific deployed contract.
func NewAuction(address common.Address, backend bind.ContractBackend) (*Auction, error) {
	contract, err := bindAuction(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &Auction{AuctionCaller: AuctionCaller{contract: contract}, AuctionTransactor: AuctionTransactor{contract: contract}, AuctionFilterer: AuctionFilterer{contract: contract}}, nil
}

// NewAuctionCaller creates a new read-only instance of Auction, bound to a specific deployed contract.
func NewAuctionCaller(address common.Address, caller bind.ContractCaller) (*AuctionCaller, error) {
	contract, err := bindAuction(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &AuctionCaller{contract: contract}, nil
}

// NewAuctionTransactor creates a new write-only instance of Auction, bound to a specific deployed contract.
func NewAuctionTransactor(address common.Address, transactor bind.ContractTransactor) (*AuctionTransactor, error) {
	contract, err := bindAuction(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &AuctionTransactor{contract: contract}, nil
}

// NewAuctionFilterer creates a new log filterer instance of Auction, bound to a specific deployed contract.
func NewAuctionFilterer(address common.Address, filterer bind.ContractFilterer) (*AuctionFilterer, error) {
	contract, err := bindAuction(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &AuctionFilterer{contract: contract}, nil
}

// bindAuction binds a generic wrapper to an already deployed contract.
func bindAuction(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := abi.JSON(strings.NewReader(AuctionABI))
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_Auction *AuctionRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _Auction.Contract.AuctionCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_Auction *AuctionRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Auction.Contract.AuctionTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_Auction *AuctionRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _Auction.Contract.AuctionTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_Auction *AuctionCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _Auction.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_Auction *AuctionTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Auction.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_Auction *AuctionTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _Auction.Contract.contract.Transact(opts, method, params...)
}

// CountOfAuctions is a free data retrieval call binding the contract method 0x22a0119b.
//
// Solidity: function countOfAuctions() view returns(uint256)
func (_Auction *AuctionCaller) CountOfAuctions(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _Auction.contract.Call(opts, &out, "countOfAuctions")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// CountOfAuctions is a free data retrieval call binding the contract method 0x22a0119b.
//
// Solidity: function countOfAuctions() view returns(uint256)
func (_Auction *AuctionSession) CountOfAuctions() (*big.Int, error) {
	return _Auction.Contract.CountOfAuctions(&_Auction.CallOpts)
}

// CountOfAuctions is a free data retrieval call binding the contract method 0x22a0119b.
//
// Solidity: function countOfAuctions() view returns(uint256)
func (_Auction *AuctionCallerSession) CountOfAuctions() (*big.Int, error) {
	return _Auction.Contract.CountOfAuctions(&_Auction.CallOpts)
}

// GetAuctionInfo is a free data retrieval call binding the contract method 0xfc3fc4ed.
//
// Solidity: function getAuctionInfo(uint256 _auctionId) view returns((address,uint256,uint256,uint256,uint256,uint256,uint256,string,address,uint256,address,address,uint256,bool,bool,bool))
func (_Auction *AuctionCaller) GetAuctionInfo(opts *bind.CallOpts, _auctionId *big.Int) (AuctionAuctionInfo, error) {
	var out []interface{}
	err := _Auction.contract.Call(opts, &out, "getAuctionInfo", _auctionId)

	if err != nil {
		return *new(AuctionAuctionInfo), err
	}

	out0 := *abi.ConvertType(out[0], new(AuctionAuctionInfo)).(*AuctionAuctionInfo)

	return out0, err

}

// GetAuctionInfo is a free data retrieval call binding the contract method 0xfc3fc4ed.
//
// Solidity: function getAuctionInfo(uint256 _auctionId) view returns((address,uint256,uint256,uint256,uint256,uint256,uint256,string,address,uint256,address,address,uint256,bool,bool,bool))
func (_Auction *AuctionSession) GetAuctionInfo(_auctionId *big.Int) (AuctionAuctionInfo, error) {
	return _Auction.Contract.GetAuctionInfo(&_Auction.CallOpts, _auctionId)
}

// GetAuctionInfo is a free data retrieval call binding the contract method 0xfc3fc4ed.
//
// Solidity: function getAuctionInfo(uint256 _auctionId) view returns((address,uint256,uint256,uint256,uint256,uint256,uint256,string,address,uint256,address,address,uint256,bool,bool,bool))
func (_Auction *AuctionCallerSession) GetAuctionInfo(_auctionId *big.Int) (AuctionAuctionInfo, error) {
	return _Auction.Contract.GetAuctionInfo(&_Auction.CallOpts, _auctionId)
}

// GetRaisingBid is a free data retrieval call binding the contract method 0xa2165920.
//
// Solidity: function getRaisingBid(uint256 _auctionId) view returns(uint256)
func (_Auction *AuctionCaller) GetRaisingBid(opts *bind.CallOpts, _auctionId *big.Int) (*big.Int, error) {
	var out []interface{}
	err := _Auction.contract.Call(opts, &out, "getRaisingBid", _auctionId)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// GetRaisingBid is a free data retrieval call binding the contract method 0xa2165920.
//
// Solidity: function getRaisingBid(uint256 _auctionId) view returns(uint256)
func (_Auction *AuctionSession) GetRaisingBid(_auctionId *big.Int) (*big.Int, error) {
	return _Auction.Contract.GetRaisingBid(&_Auction.CallOpts, _auctionId)
}

// GetRaisingBid is a free data retrieval call binding the contract method 0xa2165920.
//
// Solidity: function getRaisingBid(uint256 _auctionId) view returns(uint256)
func (_Auction *AuctionCallerSession) GetRaisingBid(_auctionId *big.Int) (*big.Int, error) {
	return _Auction.Contract.GetRaisingBid(&_Auction.CallOpts, _auctionId)
}

// GetStatus is a free data retrieval call binding the contract method 0x5c622a0e.
//
// Solidity: function getStatus(uint256 _auctionId) view returns(uint8)
func (_Auction *AuctionCaller) GetStatus(opts *bind.CallOpts, _auctionId *big.Int) (uint8, error) {
	var out []interface{}
	err := _Auction.contract.Call(opts, &out, "getStatus", _auctionId)

	if err != nil {
		return *new(uint8), err
	}

	out0 := *abi.ConvertType(out[0], new(uint8)).(*uint8)

	return out0, err

}

// GetStatus is a free data retrieval call binding the contract method 0x5c622a0e.
//
// Solidity: function getStatus(uint256 _auctionId) view returns(uint8)
func (_Auction *AuctionSession) GetStatus(_auctionId *big.Int) (uint8, error) {
	return _Auction.Contract.GetStatus(&_Auction.CallOpts, _auctionId)
}

// GetStatus is a free data retrieval call binding the contract method 0x5c622a0e.
//
// Solidity: function getStatus(uint256 _auctionId) view returns(uint8)
func (_Auction *AuctionCallerSession) GetStatus(_auctionId *big.Int) (uint8, error) {
	return _Auction.Contract.GetStatus(&_Auction.CallOpts, _auctionId)
}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() view returns(address)
func (_Auction *AuctionCaller) Owner(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _Auction.contract.Call(opts, &out, "owner")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() view returns(address)
func (_Auction *AuctionSession) Owner() (common.Address, error) {
	return _Auction.Contract.Owner(&_Auction.CallOpts)
}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() view returns(address)
func (_Auction *AuctionCallerSession) Owner() (common.Address, error) {
	return _Auction.Contract.Owner(&_Auction.CallOpts)
}

// Bid is a paid mutator transaction binding the contract method 0x598647f8.
//
// Solidity: function bid(uint256 _auctionId, uint256 _amount) returns()
func (_Auction *AuctionTransactor) Bid(opts *bind.TransactOpts, _auctionId *big.Int, _amount *big.Int) (*types.Transaction, error) {
	return _Auction.contract.Transact(opts, "bid", _auctionId, _amount)
}

// Bid is a paid mutator transaction binding the contract method 0x598647f8.
//
// Solidity: function bid(uint256 _auctionId, uint256 _amount) returns()
func (_Auction *AuctionSession) Bid(_auctionId *big.Int, _amount *big.Int) (*types.Transaction, error) {
	return _Auction.Contract.Bid(&_Auction.TransactOpts, _auctionId, _amount)
}

// Bid is a paid mutator transaction binding the contract method 0x598647f8.
//
// Solidity: function bid(uint256 _auctionId, uint256 _amount) returns()
func (_Auction *AuctionTransactorSession) Bid(_auctionId *big.Int, _amount *big.Int) (*types.Transaction, error) {
	return _Auction.Contract.Bid(&_Auction.TransactOpts, _auctionId, _amount)
}

// BuyNow is a paid mutator transaction binding the contract method 0x08a0f32f.
//
// Solidity: function buyNow(uint256 _auctionId) returns()
func (_Auction *AuctionTransactor) BuyNow(opts *bind.TransactOpts, _auctionId *big.Int) (*types.Transaction, error) {
	return _Auction.contract.Transact(opts, "buyNow", _auctionId)
}

// BuyNow is a paid mutator transaction binding the contract method 0x08a0f32f.
//
// Solidity: function buyNow(uint256 _auctionId) returns()
func (_Auction *AuctionSession) BuyNow(_auctionId *big.Int) (*types.Transaction, error) {
	return _Auction.Contract.BuyNow(&_Auction.TransactOpts, _auctionId)
}

// BuyNow is a paid mutator transaction binding the contract method 0x08a0f32f.
//
// Solidity: function buyNow(uint256 _auctionId) returns()
func (_Auction *AuctionTransactorSession) BuyNow(_auctionId *big.Int) (*types.Transaction, error) {
	return _Auction.Contract.BuyNow(&_Auction.TransactOpts, _auctionId)
}

// ClaimLot is a paid mutator transaction binding the contract method 0xf2da0664.
//
// Solidity: function claimLot(uint256 _auctionId) returns()
func (_Auction *AuctionTransactor) ClaimLot(opts *bind.TransactOpts, _auctionId *big.Int) (*types.Transaction, error) {
	return _Auction.contract.Transact(opts, "claimLot", _auctionId)
}

// ClaimLot is a paid mutator transaction binding the contract method 0xf2da0664.
//
// Solidity: function claimLot(uint256 _auctionId) returns()
func (_Auction *AuctionSession) ClaimLot(_auctionId *big.Int) (*types.Transaction, error) {
	return _Auction.Contract.ClaimLot(&_Auction.TransactOpts, _auctionId)
}

// ClaimLot is a paid mutator transaction binding the contract method 0xf2da0664.
//
// Solidity: function claimLot(uint256 _auctionId) returns()
func (_Auction *AuctionTransactorSession) ClaimLot(_auctionId *big.Int) (*types.Transaction, error) {
	return _Auction.Contract.ClaimLot(&_Auction.TransactOpts, _auctionId)
}

// ClaimRepayment is a paid mutator transaction binding the contract method 0x00d878e8.
//
// Solidity: function claimRepayment(uint256 _auctionId) returns()
func (_Auction *AuctionTransactor) ClaimRepayment(opts *bind.TransactOpts, _auctionId *big.Int) (*types.Transaction, error) {
	return _Auction.contract.Transact(opts, "claimRepayment", _auctionId)
}

// ClaimRepayment is a paid mutator transaction binding the contract method 0x00d878e8.
//
// Solidity: function claimRepayment(uint256 _auctionId) returns()
func (_Auction *AuctionSession) ClaimRepayment(_auctionId *big.Int) (*types.Transaction, error) {
	return _Auction.Contract.ClaimRepayment(&_Auction.TransactOpts, _auctionId)
}

// ClaimRepayment is a paid mutator transaction binding the contract method 0x00d878e8.
//
// Solidity: function claimRepayment(uint256 _auctionId) returns()
func (_Auction *AuctionTransactorSession) ClaimRepayment(_auctionId *big.Int) (*types.Transaction, error) {
	return _Auction.Contract.ClaimRepayment(&_Auction.TransactOpts, _auctionId)
}

// CloseAuction is a paid mutator transaction binding the contract method 0x236ed8f3.
//
// Solidity: function closeAuction(uint256 _auctionId) returns()
func (_Auction *AuctionTransactor) CloseAuction(opts *bind.TransactOpts, _auctionId *big.Int) (*types.Transaction, error) {
	return _Auction.contract.Transact(opts, "closeAuction", _auctionId)
}

// CloseAuction is a paid mutator transaction binding the contract method 0x236ed8f3.
//
// Solidity: function closeAuction(uint256 _auctionId) returns()
func (_Auction *AuctionSession) CloseAuction(_auctionId *big.Int) (*types.Transaction, error) {
	return _Auction.Contract.CloseAuction(&_Auction.TransactOpts, _auctionId)
}

// CloseAuction is a paid mutator transaction binding the contract method 0x236ed8f3.
//
// Solidity: function closeAuction(uint256 _auctionId) returns()
func (_Auction *AuctionTransactorSession) CloseAuction(_auctionId *big.Int) (*types.Transaction, error) {
	return _Auction.Contract.CloseAuction(&_Auction.TransactOpts, _auctionId)
}

// CreateAuction is a paid mutator transaction binding the contract method 0x4bc28ede.
//
// Solidity: function createAuction(address _tokenAddress, uint256 _tokenId, address _currencyAddress, uint256 _startPrice, uint256 _buyNowPrice, uint256 _startTime, uint256 _duration, uint256 _durationIncrement, uint256 _bidIncrement, string _description) returns(uint256)
func (_Auction *AuctionTransactor) CreateAuction(opts *bind.TransactOpts, _tokenAddress common.Address, _tokenId *big.Int, _currencyAddress common.Address, _startPrice *big.Int, _buyNowPrice *big.Int, _startTime *big.Int, _duration *big.Int, _durationIncrement *big.Int, _bidIncrement *big.Int, _description string) (*types.Transaction, error) {
	return _Auction.contract.Transact(opts, "createAuction", _tokenAddress, _tokenId, _currencyAddress, _startPrice, _buyNowPrice, _startTime, _duration, _durationIncrement, _bidIncrement, _description)
}

// CreateAuction is a paid mutator transaction binding the contract method 0x4bc28ede.
//
// Solidity: function createAuction(address _tokenAddress, uint256 _tokenId, address _currencyAddress, uint256 _startPrice, uint256 _buyNowPrice, uint256 _startTime, uint256 _duration, uint256 _durationIncrement, uint256 _bidIncrement, string _description) returns(uint256)
func (_Auction *AuctionSession) CreateAuction(_tokenAddress common.Address, _tokenId *big.Int, _currencyAddress common.Address, _startPrice *big.Int, _buyNowPrice *big.Int, _startTime *big.Int, _duration *big.Int, _durationIncrement *big.Int, _bidIncrement *big.Int, _description string) (*types.Transaction, error) {
	return _Auction.Contract.CreateAuction(&_Auction.TransactOpts, _tokenAddress, _tokenId, _currencyAddress, _startPrice, _buyNowPrice, _startTime, _duration, _durationIncrement, _bidIncrement, _description)
}

// CreateAuction is a paid mutator transaction binding the contract method 0x4bc28ede.
//
// Solidity: function createAuction(address _tokenAddress, uint256 _tokenId, address _currencyAddress, uint256 _startPrice, uint256 _buyNowPrice, uint256 _startTime, uint256 _duration, uint256 _durationIncrement, uint256 _bidIncrement, string _description) returns(uint256)
func (_Auction *AuctionTransactorSession) CreateAuction(_tokenAddress common.Address, _tokenId *big.Int, _currencyAddress common.Address, _startPrice *big.Int, _buyNowPrice *big.Int, _startTime *big.Int, _duration *big.Int, _durationIncrement *big.Int, _bidIncrement *big.Int, _description string) (*types.Transaction, error) {
	return _Auction.Contract.CreateAuction(&_Auction.TransactOpts, _tokenAddress, _tokenId, _currencyAddress, _startPrice, _buyNowPrice, _startTime, _duration, _durationIncrement, _bidIncrement, _description)
}

// RenounceOwnership is a paid mutator transaction binding the contract method 0x715018a6.
//
// Solidity: function renounceOwnership() returns()
func (_Auction *AuctionTransactor) RenounceOwnership(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Auction.contract.Transact(opts, "renounceOwnership")
}

// RenounceOwnership is a paid mutator transaction binding the contract method 0x715018a6.
//
// Solidity: function renounceOwnership() returns()
func (_Auction *AuctionSession) RenounceOwnership() (*types.Transaction, error) {
	return _Auction.Contract.RenounceOwnership(&_Auction.TransactOpts)
}

// RenounceOwnership is a paid mutator transaction binding the contract method 0x715018a6.
//
// Solidity: function renounceOwnership() returns()
func (_Auction *AuctionTransactorSession) RenounceOwnership() (*types.Transaction, error) {
	return _Auction.Contract.RenounceOwnership(&_Auction.TransactOpts)
}

// TransferOwnership is a paid mutator transaction binding the contract method 0xf2fde38b.
//
// Solidity: function transferOwnership(address newOwner) returns()
func (_Auction *AuctionTransactor) TransferOwnership(opts *bind.TransactOpts, newOwner common.Address) (*types.Transaction, error) {
	return _Auction.contract.Transact(opts, "transferOwnership", newOwner)
}

// TransferOwnership is a paid mutator transaction binding the contract method 0xf2fde38b.
//
// Solidity: function transferOwnership(address newOwner) returns()
func (_Auction *AuctionSession) TransferOwnership(newOwner common.Address) (*types.Transaction, error) {
	return _Auction.Contract.TransferOwnership(&_Auction.TransactOpts, newOwner)
}

// TransferOwnership is a paid mutator transaction binding the contract method 0xf2fde38b.
//
// Solidity: function transferOwnership(address newOwner) returns()
func (_Auction *AuctionTransactorSession) TransferOwnership(newOwner common.Address) (*types.Transaction, error) {
	return _Auction.Contract.TransferOwnership(&_Auction.TransactOpts, newOwner)
}

// AuctionAuctionBidIterator is returned from FilterAuctionBid and is used to iterate over the raw logs and unpacked data for AuctionBid events raised by the Auction contract.
type AuctionAuctionBidIterator struct {
	Event *AuctionAuctionBid // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *AuctionAuctionBidIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(AuctionAuctionBid)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(AuctionAuctionBid)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *AuctionAuctionBidIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *AuctionAuctionBidIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// AuctionAuctionBid represents a AuctionBid event raised by the Auction contract.
type AuctionAuctionBid struct {
	AuctionId *big.Int
	Bidder    common.Address
	Amount    *big.Int
	Raw       types.Log // Blockchain specific contextual infos
}

// FilterAuctionBid is a free log retrieval operation binding the contract event 0xb8d756f2d1da4663767eb4d559780ace84f2f65a421a60ddcb47e8b2e5d2fd26.
//
// Solidity: event AuctionBid(uint256 _auctionId, address _bidder, uint256 _amount)
func (_Auction *AuctionFilterer) FilterAuctionBid(opts *bind.FilterOpts) (*AuctionAuctionBidIterator, error) {

	logs, sub, err := _Auction.contract.FilterLogs(opts, "AuctionBid")
	if err != nil {
		return nil, err
	}
	return &AuctionAuctionBidIterator{contract: _Auction.contract, event: "AuctionBid", logs: logs, sub: sub}, nil
}

// WatchAuctionBid is a free log subscription operation binding the contract event 0xb8d756f2d1da4663767eb4d559780ace84f2f65a421a60ddcb47e8b2e5d2fd26.
//
// Solidity: event AuctionBid(uint256 _auctionId, address _bidder, uint256 _amount)
func (_Auction *AuctionFilterer) WatchAuctionBid(opts *bind.WatchOpts, sink chan<- *AuctionAuctionBid) (event.Subscription, error) {

	logs, sub, err := _Auction.contract.WatchLogs(opts, "AuctionBid")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(AuctionAuctionBid)
				if err := _Auction.contract.UnpackLog(event, "AuctionBid", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseAuctionBid is a log parse operation binding the contract event 0xb8d756f2d1da4663767eb4d559780ace84f2f65a421a60ddcb47e8b2e5d2fd26.
//
// Solidity: event AuctionBid(uint256 _auctionId, address _bidder, uint256 _amount)
func (_Auction *AuctionFilterer) ParseAuctionBid(log types.Log) (*AuctionAuctionBid, error) {
	event := new(AuctionAuctionBid)
	if err := _Auction.contract.UnpackLog(event, "AuctionBid", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// AuctionAuctionClosedIterator is returned from FilterAuctionClosed and is used to iterate over the raw logs and unpacked data for AuctionClosed events raised by the Auction contract.
type AuctionAuctionClosedIterator struct {
	Event *AuctionAuctionClosed // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *AuctionAuctionClosedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(AuctionAuctionClosed)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(AuctionAuctionClosed)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *AuctionAuctionClosedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *AuctionAuctionClosedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// AuctionAuctionClosed represents a AuctionClosed event raised by the Auction contract.
type AuctionAuctionClosed struct {
	AuctionId *big.Int
	Raw       types.Log // Blockchain specific contextual infos
}

// FilterAuctionClosed is a free log retrieval operation binding the contract event 0xac4a907ec29adcc56774b757ecb1e1b4d597374fc9386107d05e2670259df7d3.
//
// Solidity: event AuctionClosed(uint256 _auctionId)
func (_Auction *AuctionFilterer) FilterAuctionClosed(opts *bind.FilterOpts) (*AuctionAuctionClosedIterator, error) {

	logs, sub, err := _Auction.contract.FilterLogs(opts, "AuctionClosed")
	if err != nil {
		return nil, err
	}
	return &AuctionAuctionClosedIterator{contract: _Auction.contract, event: "AuctionClosed", logs: logs, sub: sub}, nil
}

// WatchAuctionClosed is a free log subscription operation binding the contract event 0xac4a907ec29adcc56774b757ecb1e1b4d597374fc9386107d05e2670259df7d3.
//
// Solidity: event AuctionClosed(uint256 _auctionId)
func (_Auction *AuctionFilterer) WatchAuctionClosed(opts *bind.WatchOpts, sink chan<- *AuctionAuctionClosed) (event.Subscription, error) {

	logs, sub, err := _Auction.contract.WatchLogs(opts, "AuctionClosed")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(AuctionAuctionClosed)
				if err := _Auction.contract.UnpackLog(event, "AuctionClosed", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseAuctionClosed is a log parse operation binding the contract event 0xac4a907ec29adcc56774b757ecb1e1b4d597374fc9386107d05e2670259df7d3.
//
// Solidity: event AuctionClosed(uint256 _auctionId)
func (_Auction *AuctionFilterer) ParseAuctionClosed(log types.Log) (*AuctionAuctionClosed, error) {
	event := new(AuctionAuctionClosed)
	if err := _Auction.contract.UnpackLog(event, "AuctionClosed", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// AuctionAuctionCreatedIterator is returned from FilterAuctionCreated and is used to iterate over the raw logs and unpacked data for AuctionCreated events raised by the Auction contract.
type AuctionAuctionCreatedIterator struct {
	Event *AuctionAuctionCreated // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *AuctionAuctionCreatedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(AuctionAuctionCreated)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(AuctionAuctionCreated)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *AuctionAuctionCreatedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *AuctionAuctionCreatedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// AuctionAuctionCreated represents a AuctionCreated event raised by the Auction contract.
type AuctionAuctionCreated struct {
	Creator         common.Address
	TokenAddress    common.Address
	TokenId         *big.Int
	CurrencyAddress common.Address
	AuctionId       *big.Int
	Raw             types.Log // Blockchain specific contextual infos
}

// FilterAuctionCreated is a free log retrieval operation binding the contract event 0x03bb6e669c5d9d2143afb3599bda2cc92f483158549e37b474a6dc117f848b68.
//
// Solidity: event AuctionCreated(address _creator, address _tokenAddress, uint256 _tokenId, address _currencyAddress, uint256 _auctionId)
func (_Auction *AuctionFilterer) FilterAuctionCreated(opts *bind.FilterOpts) (*AuctionAuctionCreatedIterator, error) {

	logs, sub, err := _Auction.contract.FilterLogs(opts, "AuctionCreated")
	if err != nil {
		return nil, err
	}
	return &AuctionAuctionCreatedIterator{contract: _Auction.contract, event: "AuctionCreated", logs: logs, sub: sub}, nil
}

// WatchAuctionCreated is a free log subscription operation binding the contract event 0x03bb6e669c5d9d2143afb3599bda2cc92f483158549e37b474a6dc117f848b68.
//
// Solidity: event AuctionCreated(address _creator, address _tokenAddress, uint256 _tokenId, address _currencyAddress, uint256 _auctionId)
func (_Auction *AuctionFilterer) WatchAuctionCreated(opts *bind.WatchOpts, sink chan<- *AuctionAuctionCreated) (event.Subscription, error) {

	logs, sub, err := _Auction.contract.WatchLogs(opts, "AuctionCreated")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(AuctionAuctionCreated)
				if err := _Auction.contract.UnpackLog(event, "AuctionCreated", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseAuctionCreated is a log parse operation binding the contract event 0x03bb6e669c5d9d2143afb3599bda2cc92f483158549e37b474a6dc117f848b68.
//
// Solidity: event AuctionCreated(address _creator, address _tokenAddress, uint256 _tokenId, address _currencyAddress, uint256 _auctionId)
func (_Auction *AuctionFilterer) ParseAuctionCreated(log types.Log) (*AuctionAuctionCreated, error) {
	event := new(AuctionAuctionCreated)
	if err := _Auction.contract.UnpackLog(event, "AuctionCreated", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// AuctionLotTransferredIterator is returned from FilterLotTransferred and is used to iterate over the raw logs and unpacked data for LotTransferred events raised by the Auction contract.
type AuctionLotTransferredIterator struct {
	Event *AuctionLotTransferred // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *AuctionLotTransferredIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(AuctionLotTransferred)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(AuctionLotTransferred)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *AuctionLotTransferredIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *AuctionLotTransferredIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// AuctionLotTransferred represents a LotTransferred event raised by the Auction contract.
type AuctionLotTransferred struct {
	AuctionId *big.Int
	Winner    common.Address
	Raw       types.Log // Blockchain specific contextual infos
}

// FilterLotTransferred is a free log retrieval operation binding the contract event 0x0e60401031695311e5192456b98ba458c20ba883eb86b101645de6252c6e9dd3.
//
// Solidity: event LotTransferred(uint256 _auctionId, address _winner)
func (_Auction *AuctionFilterer) FilterLotTransferred(opts *bind.FilterOpts) (*AuctionLotTransferredIterator, error) {

	logs, sub, err := _Auction.contract.FilterLogs(opts, "LotTransferred")
	if err != nil {
		return nil, err
	}
	return &AuctionLotTransferredIterator{contract: _Auction.contract, event: "LotTransferred", logs: logs, sub: sub}, nil
}

// WatchLotTransferred is a free log subscription operation binding the contract event 0x0e60401031695311e5192456b98ba458c20ba883eb86b101645de6252c6e9dd3.
//
// Solidity: event LotTransferred(uint256 _auctionId, address _winner)
func (_Auction *AuctionFilterer) WatchLotTransferred(opts *bind.WatchOpts, sink chan<- *AuctionLotTransferred) (event.Subscription, error) {

	logs, sub, err := _Auction.contract.WatchLogs(opts, "LotTransferred")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(AuctionLotTransferred)
				if err := _Auction.contract.UnpackLog(event, "LotTransferred", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseLotTransferred is a log parse operation binding the contract event 0x0e60401031695311e5192456b98ba458c20ba883eb86b101645de6252c6e9dd3.
//
// Solidity: event LotTransferred(uint256 _auctionId, address _winner)
func (_Auction *AuctionFilterer) ParseLotTransferred(log types.Log) (*AuctionLotTransferred, error) {
	event := new(AuctionLotTransferred)
	if err := _Auction.contract.UnpackLog(event, "LotTransferred", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// AuctionOwnershipTransferredIterator is returned from FilterOwnershipTransferred and is used to iterate over the raw logs and unpacked data for OwnershipTransferred events raised by the Auction contract.
type AuctionOwnershipTransferredIterator struct {
	Event *AuctionOwnershipTransferred // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *AuctionOwnershipTransferredIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(AuctionOwnershipTransferred)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(AuctionOwnershipTransferred)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *AuctionOwnershipTransferredIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *AuctionOwnershipTransferredIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// AuctionOwnershipTransferred represents a OwnershipTransferred event raised by the Auction contract.
type AuctionOwnershipTransferred struct {
	PreviousOwner common.Address
	NewOwner      common.Address
	Raw           types.Log // Blockchain specific contextual infos
}

// FilterOwnershipTransferred is a free log retrieval operation binding the contract event 0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0.
//
// Solidity: event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)
func (_Auction *AuctionFilterer) FilterOwnershipTransferred(opts *bind.FilterOpts, previousOwner []common.Address, newOwner []common.Address) (*AuctionOwnershipTransferredIterator, error) {

	var previousOwnerRule []interface{}
	for _, previousOwnerItem := range previousOwner {
		previousOwnerRule = append(previousOwnerRule, previousOwnerItem)
	}
	var newOwnerRule []interface{}
	for _, newOwnerItem := range newOwner {
		newOwnerRule = append(newOwnerRule, newOwnerItem)
	}

	logs, sub, err := _Auction.contract.FilterLogs(opts, "OwnershipTransferred", previousOwnerRule, newOwnerRule)
	if err != nil {
		return nil, err
	}
	return &AuctionOwnershipTransferredIterator{contract: _Auction.contract, event: "OwnershipTransferred", logs: logs, sub: sub}, nil
}

// WatchOwnershipTransferred is a free log subscription operation binding the contract event 0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0.
//
// Solidity: event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)
func (_Auction *AuctionFilterer) WatchOwnershipTransferred(opts *bind.WatchOpts, sink chan<- *AuctionOwnershipTransferred, previousOwner []common.Address, newOwner []common.Address) (event.Subscription, error) {

	var previousOwnerRule []interface{}
	for _, previousOwnerItem := range previousOwner {
		previousOwnerRule = append(previousOwnerRule, previousOwnerItem)
	}
	var newOwnerRule []interface{}
	for _, newOwnerItem := range newOwner {
		newOwnerRule = append(newOwnerRule, newOwnerItem)
	}

	logs, sub, err := _Auction.contract.WatchLogs(opts, "OwnershipTransferred", previousOwnerRule, newOwnerRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(AuctionOwnershipTransferred)
				if err := _Auction.contract.UnpackLog(event, "OwnershipTransferred", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseOwnershipTransferred is a log parse operation binding the contract event 0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0.
//
// Solidity: event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)
func (_Auction *AuctionFilterer) ParseOwnershipTransferred(log types.Log) (*AuctionOwnershipTransferred, error) {
	event := new(AuctionOwnershipTransferred)
	if err := _Auction.contract.UnpackLog(event, "OwnershipTransferred", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// AuctionRepaymentTransferredIterator is returned from FilterRepaymentTransferred and is used to iterate over the raw logs and unpacked data for RepaymentTransferred events raised by the Auction contract.
type AuctionRepaymentTransferredIterator struct {
	Event *AuctionRepaymentTransferred // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *AuctionRepaymentTransferredIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(AuctionRepaymentTransferred)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(AuctionRepaymentTransferred)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *AuctionRepaymentTransferredIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *AuctionRepaymentTransferredIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// AuctionRepaymentTransferred represents a RepaymentTransferred event raised by the Auction contract.
type AuctionRepaymentTransferred struct {
	AuctionId *big.Int
	Creator   common.Address
	Raw       types.Log // Blockchain specific contextual infos
}

// FilterRepaymentTransferred is a free log retrieval operation binding the contract event 0xcede1e8bc44e44a1be509c46755459a8fef702efbee4649158b5376942bc14b9.
//
// Solidity: event RepaymentTransferred(uint256 _auctionId, address _creator)
func (_Auction *AuctionFilterer) FilterRepaymentTransferred(opts *bind.FilterOpts) (*AuctionRepaymentTransferredIterator, error) {

	logs, sub, err := _Auction.contract.FilterLogs(opts, "RepaymentTransferred")
	if err != nil {
		return nil, err
	}
	return &AuctionRepaymentTransferredIterator{contract: _Auction.contract, event: "RepaymentTransferred", logs: logs, sub: sub}, nil
}

// WatchRepaymentTransferred is a free log subscription operation binding the contract event 0xcede1e8bc44e44a1be509c46755459a8fef702efbee4649158b5376942bc14b9.
//
// Solidity: event RepaymentTransferred(uint256 _auctionId, address _creator)
func (_Auction *AuctionFilterer) WatchRepaymentTransferred(opts *bind.WatchOpts, sink chan<- *AuctionRepaymentTransferred) (event.Subscription, error) {

	logs, sub, err := _Auction.contract.WatchLogs(opts, "RepaymentTransferred")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(AuctionRepaymentTransferred)
				if err := _Auction.contract.UnpackLog(event, "RepaymentTransferred", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseRepaymentTransferred is a log parse operation binding the contract event 0xcede1e8bc44e44a1be509c46755459a8fef702efbee4649158b5376942bc14b9.
//
// Solidity: event RepaymentTransferred(uint256 _auctionId, address _creator)
func (_Auction *AuctionFilterer) ParseRepaymentTransferred(log types.Log) (*AuctionRepaymentTransferred, error) {
	event := new(AuctionRepaymentTransferred)
	if err := _Auction.contract.UnpackLog(event, "RepaymentTransferred", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

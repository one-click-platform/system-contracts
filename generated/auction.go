// Code generated - DO NOT EDIT.
// This file is a generated binding and any manual changes will be lost.

package generated

import (
	"math/big"
	"strings"

	ethereum "github.com/ethereum/go-ethereum"
	"github.com/ethereum/go-ethereum/accounts/abi"
	"github.com/ethereum/go-ethereum/accounts/abi/bind"
	"github.com/ethereum/go-ethereum/common"
	"github.com/ethereum/go-ethereum/core/types"
	"github.com/ethereum/go-ethereum/event"
)

// Reference imports to suppress errors if they are not otherwise used.
var (
	_ = big.NewInt
	_ = strings.NewReader
	_ = ethereum.NotFound
	_ = bind.Bind
	_ = common.Big1
	_ = types.BloomLookup
	_ = event.NewSubscription
)

// AuctionAuctionInfo is an auto generated low-level Go binding around an user-defined struct.
type AuctionAuctionInfo struct {
	Creator              common.Address
	StartPrice           *big.Int
	BuyNowPrice          *big.Int
	StartTime            *big.Int
	Duration             *big.Int
	DurationIncrement    *big.Int
	BidIncrement         *big.Int
	Description          string
	TokenAddress         common.Address
	TokenId              *big.Int
	CurrencyAddress      common.Address
	CurrentBidder        common.Address
	HighestBid           *big.Int
	LotBought            bool
	RepaymentTransferred bool
	LotTransferred       bool
}

// AuctionABI is the input ABI used to generate the binding from.
const AuctionABI = "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_auctionId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_bidder\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"AuctionBid\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_auctionId\",\"type\":\"uint256\"}],\"name\":\"AuctionClosed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_creator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_tokenAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_currencyAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_auctionId\",\"type\":\"uint256\"}],\"name\":\"AuctionCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_auctionId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_winner\",\"type\":\"address\"}],\"name\":\"LotTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_auctionId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_creator\",\"type\":\"address\"}],\"name\":\"RepaymentTransferred\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_auctionId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"bid\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_auctionId\",\"type\":\"uint256\"}],\"name\":\"buyNow\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_auctionId\",\"type\":\"uint256\"}],\"name\":\"claimLot\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_auctionId\",\"type\":\"uint256\"}],\"name\":\"claimRepayment\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_auctionId\",\"type\":\"uint256\"}],\"name\":\"closeAuction\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"countOfAuctions\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_tokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_currencyAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_startPrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_buyNowPrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_startTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_duration\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_durationIncrement\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_bidIncrement\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"_description\",\"type\":\"string\"}],\"name\":\"createAuction\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_auctionId\",\"type\":\"uint256\"}],\"name\":\"getAuctionInfo\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"creator\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"startPrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"buyNowPrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"startTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"duration\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"durationIncrement\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"bidIncrement\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"description\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"currencyAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"currentBidder\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"highestBid\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"lotBought\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"repaymentTransferred\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"lotTransferred\",\"type\":\"bool\"}],\"internalType\":\"structAuction.AuctionInfo\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_auctionId\",\"type\":\"uint256\"}],\"name\":\"getRaisingBid\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_auctionId\",\"type\":\"uint256\"}],\"name\":\"getStatus\",\"outputs\":[{\"internalType\":\"enumAuction.AuctionStatus\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]"

// AuctionBin is the compiled bytecode used for deploying new contracts.
var AuctionBin = "0x60806040523480156200001157600080fd5b50600062000024620000c860201b60201c565b9050806000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508073ffffffffffffffffffffffffffffffffffffffff16600073ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a350620000d0565b600033905090565b614fc280620000e06000396000f3fe608060405234801561001057600080fd5b50600436106100ce5760003560e01c80635c622a0e1161008c578063a216592011610066578063a2165920146101e9578063f2da066414610219578063f2fde38b14610235578063fc3fc4ed14610251576100ce565b80635c622a0e14610191578063715018a6146101c15780638da5cb5b146101cb576100ce565b8062d878e8146100d357806308a0f32f146100ef57806322a0119b1461010b578063236ed8f3146101295780634bc28ede14610145578063598647f814610175575b600080fd5b6100ed60048036038101906100e89190613d76565b610281565b005b61010960048036038101906101049190613d76565b6107f4565b005b610113610f23565b6040516101209190614693565b60405180910390f35b610143600480360381019061013e9190613d76565b610f29565b005b61015f600480360381019061015a9190613c5a565b6116e8565b60405161016c9190614693565b60405180910390f35b61018f600480360381019061018a9190613d9f565b611f08565b005b6101ab60048036038101906101a69190613d76565b612677565b6040516101b89190614396565b60405180910390f35b6101c96129ee565b005b6101d3612b28565b6040516101e091906142c8565b60405180910390f35b61020360048036038101906101fe9190613d76565b612b51565b6040516102109190614693565b60405180910390f35b610233600480360381019061022e9190613d76565b612f2f565b005b61024f600480360381019061024a9190613c08565b61343d565b005b61026b60048036038101906102669190613d76565b6135e6565b6040516102789190614671565b60405180910390f35b80600360048111156102bc577f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b6102c582612677565b60048111156102fd577f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b1461033d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161033490614411565b60405180910390fd5b600060026000848152602001908152602001600020604051806102000160405290816000820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200160018201548152602001600282015481526020016003820154815260200160048201548152602001600582015481526020016006820154815260200160078201805461040090614921565b80601f016020809104026020016040519081016040528092919081815260200182805461042c90614921565b80156104795780601f1061044e57610100808354040283529160200191610479565b820191906000526020600020905b81548152906001019060200180831161045c57829003601f168201915b505050505081526020016008820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200160098201548152602001600a820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001600b820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001600c8201548152602001600d820160009054906101000a900460ff16151515158152602001600d820160019054906101000a900460ff16151515158152602001600d820160029054906101000a900460ff16151515158152505090503373ffffffffffffffffffffffffffffffffffffffff16816000015173ffffffffffffffffffffffffffffffffffffffff161461065d576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610654906143b1565b60405180910390fd5b806101c00151156106a3576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161069a906145d1565b60405180910390fd5b600081610140015173ffffffffffffffffffffffffffffffffffffffff1663a9059cbb83600001518461018001516040518363ffffffff1660e01b81526004016106ee92919061436d565b602060405180830381600087803b15801561070857600080fd5b505af115801561071c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107409190613d4d565b905080610782576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161077990614651565b60405180910390fd5b600160026000868152602001908152602001600020600d0160016101000a81548160ff0219169083151502179055507fcede1e8bc44e44a1be509c46755459a8fef702efbee4649158b5376942bc14b98483600001516040516107e69291906146ae565b60405180910390a150505050565b806002600481111561082f577f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b61083882612677565b6004811115610870577f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b146108b0576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016108a790614471565b60405180910390fd5b600060026000848152602001908152602001600020604051806102000160405290816000820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200160018201548152602001600282015481526020016003820154815260200160048201548152602001600582015481526020016006820154815260200160078201805461097390614921565b80601f016020809104026020016040519081016040528092919081815260200182805461099f90614921565b80156109ec5780601f106109c1576101008083540402835291602001916109ec565b820191906000526020600020905b8154815290600101906020018083116109cf57829003601f168201915b505050505081526020016008820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200160098201548152602001600a820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001600b820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001600c8201548152602001600d820160009054906101000a900460ff16151515158152602001600d820160019054906101000a900460ff16151515158152602001600d820160029054906101000a900460ff1615151515815250509050600081610140015173ffffffffffffffffffffffffffffffffffffffff166323b872dd333085604001516040518463ffffffff1660e01b8152600401610ba6939291906142e3565b602060405180830381600087803b158015610bc057600080fd5b505af1158015610bd4573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610bf89190613d4d565b905080610c3a576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610c3190614651565b60405180910390fd5b81610100015173ffffffffffffffffffffffffffffffffffffffff166323b872dd308461016001518561012001516040518463ffffffff1660e01b8152600401610c86939291906142e3565b600060405180830381600087803b158015610ca057600080fd5b505af1158015610cb4573d6000803e3d6000fd5b505050506001826101a00190151590811515815250506001826101e0019015159081151581525050816002600086815260200190815260200160002060008201518160000160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506020820151816001015560408201518160020155606082015181600301556080820151816004015560a0820151816005015560c0820151816006015560e0820151816007019080519060200190610d8f9291906139ce565b506101008201518160080160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550610120820151816009015561014082015181600a0160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555061016082015181600b0160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555061018082015181600c01556101a082015181600d0160006101000a81548160ff0219169083151502179055506101c082015181600d0160016101000a81548160ff0219169083151502179055506101e082015181600d0160026101000a81548160ff0219169083151502179055509050507f0e60401031695311e5192456b98ba458c20ba883eb86b101645de6252c6e9dd38433604051610f159291906146ae565b60405180910390a150505050565b60015481565b610f3161395d565b73ffffffffffffffffffffffffffffffffffffffff16610f4f612b28565b73ffffffffffffffffffffffffffffffffffffffff1614610fa5576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610f9c90614511565b60405180910390fd5b8060036004811115610fe0577f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b610fe982612677565b6004811115611021577f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b14611061576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161105890614411565b60405180910390fd5b600060026000848152602001908152602001600020604051806102000160405290816000820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200160018201548152602001600282015481526020016003820154815260200160048201548152602001600582015481526020016006820154815260200160078201805461112490614921565b80601f016020809104026020016040519081016040528092919081815260200182805461115090614921565b801561119d5780601f106111725761010080835404028352916020019161119d565b820191906000526020600020905b81548152906001019060200180831161118057829003601f168201915b505050505081526020016008820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200160098201548152602001600a820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001600b820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001600c8201548152602001600d820160009054906101000a900460ff16151515158152602001600d820160019054906101000a900460ff16151515158152602001600d820160029054906101000a900460ff1615151515815250509050806101c0015161140957600081610140015173ffffffffffffffffffffffffffffffffffffffff166323b872dd333085604001516040518463ffffffff1660e01b8152600401611361939291906142e3565b602060405180830381600087803b15801561137b57600080fd5b505af115801561138f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906113b39190613d4d565b9050806113f5576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016113ec90614651565b60405180910390fd5b6001826101c0019015159081151581525050505b806101e001516114a45780610100015173ffffffffffffffffffffffffffffffffffffffff166323b872dd308361016001518461012001516040518463ffffffff1660e01b815260040161145f939291906142e3565b600060405180830381600087803b15801561147957600080fd5b505af115801561148d573d6000803e3d6000fd5b505050506001816101e00190151590811515815250505b806002600085815260200190815260200160002060008201518160000160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506020820151816001015560408201518160020155606082015181600301556080820151816004015560a0820151816005015560c0820151816006015560e08201518160070190805190602001906115579291906139ce565b506101008201518160080160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550610120820151816009015561014082015181600a0160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555061016082015181600b0160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555061018082015181600c01556101a082015181600d0160006101000a81548160ff0219169083151502179055506101c082015181600d0160016101000a81548160ff0219169083151502179055506101e082015181600d0160026101000a81548160ff0219169083151502179055509050507fac4a907ec29adcc56774b757ecb1e1b4d597374fc9386107d05e2670259df7d3836040516116db9190614693565b60405180910390a1505050565b60006117098b73ffffffffffffffffffffffffffffffffffffffff16613965565b611748576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161173f90614611565b60405180910390fd5b60008b90503373ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16636352211e8d6040518263ffffffff1660e01b815260040161179d9190614693565b60206040518083038186803b1580156117b557600080fd5b505afa1580156117c9573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906117ed9190613c31565b73ffffffffffffffffffffffffffffffffffffffff1614611843576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161183a90614451565b60405180910390fd5b3073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1663081812fc8d6040518263ffffffff1660e01b81526004016118939190614693565b60206040518083038186803b1580156118ab57600080fd5b505afa1580156118bf573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906118e39190613c31565b73ffffffffffffffffffffffffffffffffffffffff1614611939576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611930906145b1565b60405180910390fd5b6119588a73ffffffffffffffffffffffffffffffffffffffff16613965565b611997576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161198e906143f1565b60405180910390fd5b60008914156119db576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016119d290614531565b60405180910390fd5b88881015611a1e576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611a1590614571565b60405180910390fd5b6000861415611a62576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611a5990614551565b60405180910390fd5b6000851415611aa6576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611a9d906144d1565b60405180910390fd5b836000108015611abd5750611ab9613978565b8411155b611afc576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611af390614431565b60405180910390fd5b8073ffffffffffffffffffffffffffffffffffffffff166323b872dd33308e6040518463ffffffff1660e01b8152600401611b39939291906142e3565b600060405180830381600087803b158015611b5357600080fd5b505af1158015611b67573d6000803e3d6000fd5b50505050611b73613a54565b42881015611b8a5742816060018181525050611b95565b878160600181815250505b33816000019073ffffffffffffffffffffffffffffffffffffffff16908173ffffffffffffffffffffffffffffffffffffffff16815250508c81610100019073ffffffffffffffffffffffffffffffffffffffff16908173ffffffffffffffffffffffffffffffffffffffff16815250508b816101200181815250508a81610140019073ffffffffffffffffffffffffffffffffffffffff16908173ffffffffffffffffffffffffffffffffffffffff1681525050898160200181815250508881604001818152505086816080018181525050848160c0018181525050838160e0018190525060006001549050816002600083815260200190815260200160002060008201518160000160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506020820151816001015560408201518160020155606082015181600301556080820151816004015560a0820151816005015560c0820151816006015560e0820151816007019080519060200190611d359291906139ce565b506101008201518160080160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550610120820151816009015561014082015181600a0160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555061016082015181600b0160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555061018082015181600c01556101a082015181600d0160006101000a81548160ff0219169083151502179055506101c082015181600d0160016101000a81548160ff0219169083151502179055506101e082015181600d0160026101000a81548160ff02191690831515021790555090505060016000815480929190611e9d90614984565b91905055507f03bb6e669c5d9d2143afb3599bda2cc92f483158549e37b474a6dc117f848b68826000015183610100015184610120015185610140015185604051611eec95949392919061431a565b60405180910390a18093505050509a9950505050505050505050565b611f1182612b51565b811015611f53576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611f4a90614491565b60405180910390fd5b600060026000848152602001908152602001600020604051806102000160405290816000820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200160018201548152602001600282015481526020016003820154815260200160048201548152602001600582015481526020016006820154815260200160078201805461201690614921565b80601f016020809104026020016040519081016040528092919081815260200182805461204290614921565b801561208f5780601f106120645761010080835404028352916020019161208f565b820191906000526020600020905b81548152906001019060200180831161207257829003601f168201915b505050505081526020016008820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200160098201548152602001600a820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001600b820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001600c8201548152602001600d820160009054906101000a900460ff16151515158152602001600d820160019054906101000a900460ff16151515158152602001600d820160029054906101000a900460ff16151515158152505090506000816101400151905060008173ffffffffffffffffffffffffffffffffffffffff166323b872dd3330876040518463ffffffff1660e01b815260040161224a939291906142e3565b602060405180830381600087803b15801561226457600080fd5b505af1158015612278573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061229c9190613d4d565b9050806122de576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016122d5906145f1565b60405180910390fd5b6000836101800151146123c5578173ffffffffffffffffffffffffffffffffffffffff1663a9059cbb8461016001518561018001516040518363ffffffff1660e01b815260040161233092919061436d565b602060405180830381600087803b15801561234a57600080fd5b505af115801561235e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906123829190613d4d565b9050806123c4576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016123bb906144b1565b60405180910390fd5b5b83836101800181815250503383610160019073ffffffffffffffffffffffffffffffffffffffff16908173ffffffffffffffffffffffffffffffffffffffff16815250506124248360a00151846080015161398c90919063ffffffff16565b836080018181525050826002600087815260200190815260200160002060008201518160000160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506020820151816001015560408201518160020155606082015181600301556080820151816004015560a0820151816005015560c0820151816006015560e08201518160070190805190602001906124e09291906139ce565b506101008201518160080160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550610120820151816009015561014082015181600a0160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555061016082015181600b0160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555061018082015181600c01556101a082015181600d0160006101000a81548160ff0219169083151502179055506101c082015181600d0160016101000a81548160ff0219169083151502179055506101e082015181600d0160026101000a81548160ff0219169083151502179055509050507fb8d756f2d1da4663767eb4d559780ace84f2f65a421a60ddcb47e8b2e5d2fd26853386604051612668939291906146d7565b60405180910390a15050505050565b60008060026000848152602001908152602001600020604051806102000160405290816000820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200160018201548152602001600282015481526020016003820154815260200160048201548152602001600582015481526020016006820154815260200160078201805461273b90614921565b80601f016020809104026020016040519081016040528092919081815260200182805461276790614921565b80156127b45780601f10612789576101008083540402835291602001916127b4565b820191906000526020600020905b81548152906001019060200180831161279757829003601f168201915b505050505081526020016008820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200160098201548152602001600a820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001600b820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001600c8201548152602001600d820160009054906101000a900460ff16151515158152602001600d820160019054906101000a900460ff16151515158152602001600d820160029054906101000a900460ff1615151515815250509050600073ffffffffffffffffffffffffffffffffffffffff16816000015173ffffffffffffffffffffffffffffffffffffffff1614156129695760009150506129e9565b806101c00151801561297d5750806101e001515b1561298c5760049150506129e9565b806101a00151156129a15760039150506129e9565b80606001514210156129b75760019150506129e9565b6129d28160800151826060015161398c90919063ffffffff16565b4210156129e35760029150506129e9565b60039150505b919050565b6129f661395d565b73ffffffffffffffffffffffffffffffffffffffff16612a14612b28565b73ffffffffffffffffffffffffffffffffffffffff1614612a6a576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612a6190614511565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff1660008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a360008060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b60008160026004811115612b8e577f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b612b9782612677565b6004811115612bcf577f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b14612c0f576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612c0690614471565b60405180910390fd5b600060026000858152602001908152602001600020604051806102000160405290816000820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001600182015481526020016002820154815260200160038201548152602001600482015481526020016005820154815260200160068201548152602001600782018054612cd290614921565b80601f0160208091040260200160405190810160405280929190818152602001828054612cfe90614921565b8015612d4b5780601f10612d2057610100808354040283529160200191612d4b565b820191906000526020600020905b815481529060010190602001808311612d2e57829003601f168201915b505050505081526020016008820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200160098201548152602001600a820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001600b820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001600c8201548152602001600d820160009054906101000a900460ff16151515158152602001600d820160019054906101000a900460ff16151515158152602001600d820160029054906101000a900460ff161515151581525050905060008161018001511415612ed8578060200151925050612f29565b60008161018001519050612f2481612f16612ef1613978565b612f088660c00151866139a290919063ffffffff16565b6139b890919063ffffffff16565b61398c90919063ffffffff16565b935050505b50919050565b8060036004811115612f6a577f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b612f7382612677565b6004811115612fab577f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b14612feb576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612fe290614411565b60405180910390fd5b600060026000848152602001908152602001600020604051806102000160405290816000820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020016001820154815260200160028201548152602001600382015481526020016004820154815260200160058201548152602001600682015481526020016007820180546130ae90614921565b80601f01602080910402602001604051908101604052809291908181526020018280546130da90614921565b80156131275780601f106130fc57610100808354040283529160200191613127565b820191906000526020600020905b81548152906001019060200180831161310a57829003601f168201915b505050505081526020016008820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200160098201548152602001600a820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001600b820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001600c8201548152602001600d820160009054906101000a900460ff16151515158152602001600d820160019054906101000a900460ff16151515158152602001600d820160029054906101000a900460ff16151515158152505090503373ffffffffffffffffffffffffffffffffffffffff1681610160015173ffffffffffffffffffffffffffffffffffffffff161461330c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161330390614591565b60405180910390fd5b806101e0015115613352576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161334990614631565b60405180910390fd5b80610100015173ffffffffffffffffffffffffffffffffffffffff166323b872dd308361016001518461012001516040518463ffffffff1660e01b815260040161339e939291906142e3565b600060405180830381600087803b1580156133b857600080fd5b505af11580156133cc573d6000803e3d6000fd5b50505050600160026000858152602001908152602001600020600d0160026101000a81548160ff0219169083151502179055507f0e60401031695311e5192456b98ba458c20ba883eb86b101645de6252c6e9dd383336040516134309291906146ae565b60405180910390a1505050565b61344561395d565b73ffffffffffffffffffffffffffffffffffffffff16613463612b28565b73ffffffffffffffffffffffffffffffffffffffff16146134b9576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016134b090614511565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161415613529576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401613520906143d1565b60405180910390fd5b8073ffffffffffffffffffffffffffffffffffffffff1660008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a3806000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b6135ee613a54565b8160006004811115613629577f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b61363282612677565b600481111561366a577f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b14156136ab576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016136a2906144f1565b60405180910390fd5b60026000848152602001908152602001600020604051806102000160405290816000820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200160018201548152602001600282015481526020016003820154815260200160048201548152602001600582015481526020016006820154815260200160078201805461376c90614921565b80601f016020809104026020016040519081016040528092919081815260200182805461379890614921565b80156137e55780601f106137ba576101008083540402835291602001916137e5565b820191906000526020600020905b8154815290600101906020018083116137c857829003601f168201915b505050505081526020016008820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200160098201548152602001600a820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001600b820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001600c8201548152602001600d820160009054906101000a900460ff16151515158152602001600d820160019054906101000a900460ff16151515158152602001600d820160029054906101000a900460ff161515151581525050915050919050565b600033905090565b600080823b905060008111915050919050565b60006b033b2e3c9fd0803ce8000000905090565b6000818361399a9190614791565b905092915050565b600081836139b09190614818565b905092915050565b600081836139c691906147e7565b905092915050565b8280546139da90614921565b90600052602060002090601f0160209004810192826139fc5760008555613a43565b82601f10613a1557805160ff1916838001178555613a43565b82800160010185558215613a43579182015b82811115613a42578251825591602001919060010190613a27565b5b509050613a509190613b2f565b5090565b604051806102000160405280600073ffffffffffffffffffffffffffffffffffffffff16815260200160008152602001600081526020016000815260200160008152602001600081526020016000815260200160608152602001600073ffffffffffffffffffffffffffffffffffffffff16815260200160008152602001600073ffffffffffffffffffffffffffffffffffffffff168152602001600073ffffffffffffffffffffffffffffffffffffffff168152602001600081526020016000151581526020016000151581526020016000151581525090565b5b80821115613b48576000816000905550600101613b30565b5090565b6000613b5f613b5a84614733565b61470e565b905082815260208101848484011115613b7757600080fd5b613b828482856148df565b509392505050565b600081359050613b9981614f47565b92915050565b600081519050613bae81614f47565b92915050565b600081519050613bc381614f5e565b92915050565b600082601f830112613bda57600080fd5b8135613bea848260208601613b4c565b91505092915050565b600081359050613c0281614f75565b92915050565b600060208284031215613c1a57600080fd5b6000613c2884828501613b8a565b91505092915050565b600060208284031215613c4357600080fd5b6000613c5184828501613b9f565b91505092915050565b6000806000806000806000806000806101408b8d031215613c7a57600080fd5b6000613c888d828e01613b8a565b9a50506020613c998d828e01613bf3565b9950506040613caa8d828e01613b8a565b9850506060613cbb8d828e01613bf3565b9750506080613ccc8d828e01613bf3565b96505060a0613cdd8d828e01613bf3565b95505060c0613cee8d828e01613bf3565b94505060e0613cff8d828e01613bf3565b935050610100613d118d828e01613bf3565b9250506101208b013567ffffffffffffffff811115613d2f57600080fd5b613d3b8d828e01613bc9565b9150509295989b9194979a5092959850565b600060208284031215613d5f57600080fd5b6000613d6d84828501613bb4565b91505092915050565b600060208284031215613d8857600080fd5b6000613d9684828501613bf3565b91505092915050565b60008060408385031215613db257600080fd5b6000613dc085828601613bf3565b9250506020613dd185828601613bf3565b9150509250929050565b613de481614872565b82525050565b613df381614872565b82525050565b613e0281614884565b82525050565b613e11816148cd565b82525050565b6000613e2282614764565b613e2c818561476f565b9350613e3c8185602086016148ee565b613e4581614ab8565b840191505092915050565b6000613e5d601b83614780565b9150613e6882614ac9565b602082019050919050565b6000613e80602683614780565b9150613e8b82614af2565b604082019050919050565b6000613ea3602083614780565b9150613eae82614b41565b602082019050919050565b6000613ec6601783614780565b9150613ed182614b6a565b602082019050919050565b6000613ee9601583614780565b9150613ef482614b93565b602082019050919050565b6000613f0c601583614780565b9150613f1782614bbc565b602082019050919050565b6000613f2f601583614780565b9150613f3a82614be5565b602082019050919050565b6000613f52605383614780565b9150613f5d82614c0e565b606082019050919050565b6000613f75601283614780565b9150613f8082614c83565b602082019050919050565b6000613f98601983614780565b9150613fa382614cac565b602082019050919050565b6000613fbb601683614780565b9150613fc682614cd5565b602082019050919050565b6000613fde602083614780565b9150613fe982614cfe565b602082019050919050565b6000614001601383614780565b915061400c82614d27565b602082019050919050565b6000614024601883614780565b915061402f82614d50565b602082019050919050565b6000614047603383614780565b915061405282614d79565b604082019050919050565b600061406a601483614780565b915061407582614dc8565b602082019050919050565b600061408d601383614780565b915061409882614df1565b602082019050919050565b60006140b0602a83614780565b91506140bb82614e1a565b604082019050919050565b60006140d3602083614780565b91506140de82614e69565b602082019050919050565b60006140f6601d83614780565b915061410182614e92565b602082019050919050565b6000614119602483614780565b915061412482614ebb565b604082019050919050565b600061413c602083614780565b915061414782614f0a565b602082019050919050565b60006102008301600083015161416b6000860182613ddb565b50602083015161417e60208601826142aa565b50604083015161419160408601826142aa565b5060608301516141a460608601826142aa565b5060808301516141b760808601826142aa565b5060a08301516141ca60a08601826142aa565b5060c08301516141dd60c08601826142aa565b5060e083015184820360e08601526141f58282613e17565b91505061010083015161420c610100860182613ddb565b506101208301516142216101208601826142aa565b50610140830151614236610140860182613ddb565b5061016083015161424b610160860182613ddb565b506101808301516142606101808601826142aa565b506101a08301516142756101a0860182613df9565b506101c083015161428a6101c0860182613df9565b506101e083015161429f6101e0860182613df9565b508091505092915050565b6142b3816148c3565b82525050565b6142c2816148c3565b82525050565b60006020820190506142dd6000830184613dea565b92915050565b60006060820190506142f86000830186613dea565b6143056020830185613dea565b61431260408301846142b9565b949350505050565b600060a08201905061432f6000830188613dea565b61433c6020830187613dea565b61434960408301866142b9565b6143566060830185613dea565b61436360808301846142b9565b9695505050505050565b60006040820190506143826000830185613dea565b61438f60208301846142b9565b9392505050565b60006020820190506143ab6000830184613e08565b92915050565b600060208201905081810360008301526143ca81613e50565b9050919050565b600060208201905081810360008301526143ea81613e73565b9050919050565b6000602082019050818103600083015261440a81613e96565b9050919050565b6000602082019050818103600083015261442a81613eb9565b9050919050565b6000602082019050818103600083015261444a81613edc565b9050919050565b6000602082019050818103600083015261446a81613eff565b9050919050565b6000602082019050818103600083015261448a81613f22565b9050919050565b600060208201905081810360008301526144aa81613f45565b9050919050565b600060208201905081810360008301526144ca81613f68565b9050919050565b600060208201905081810360008301526144ea81613f8b565b9050919050565b6000602082019050818103600083015261450a81613fae565b9050919050565b6000602082019050818103600083015261452a81613fd1565b9050919050565b6000602082019050818103600083015261454a81613ff4565b9050919050565b6000602082019050818103600083015261456a81614017565b9050919050565b6000602082019050818103600083015261458a8161403a565b9050919050565b600060208201905081810360008301526145aa8161405d565b9050919050565b600060208201905081810360008301526145ca81614080565b9050919050565b600060208201905081810360008301526145ea816140a3565b9050919050565b6000602082019050818103600083015261460a816140c6565b9050919050565b6000602082019050818103600083015261462a816140e9565b9050919050565b6000602082019050818103600083015261464a8161410c565b9050919050565b6000602082019050818103600083015261466a8161412f565b9050919050565b6000602082019050818103600083015261468b8184614152565b905092915050565b60006020820190506146a860008301846142b9565b92915050565b60006040820190506146c360008301856142b9565b6146d06020830184613dea565b9392505050565b60006060820190506146ec60008301866142b9565b6146f96020830185613dea565b61470660408301846142b9565b949350505050565b6000614718614729565b90506147248282614953565b919050565b6000604051905090565b600067ffffffffffffffff82111561474e5761474d614a89565b5b61475782614ab8565b9050602081019050919050565b600081519050919050565b600082825260208201905092915050565b600082825260208201905092915050565b600061479c826148c3565b91506147a7836148c3565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff038211156147dc576147db6149cd565b5b828201905092915050565b60006147f2826148c3565b91506147fd836148c3565b92508261480d5761480c6149fc565b5b828204905092915050565b6000614823826148c3565b915061482e836148c3565b9250817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0483118215151615614867576148666149cd565b5b828202905092915050565b600061487d826148a3565b9050919050565b60008115159050919050565b600081905061489e82614f33565b919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b60006148d882614890565b9050919050565b82818337600083830152505050565b60005b8381101561490c5780820151818401526020810190506148f1565b8381111561491b576000848401525b50505050565b6000600282049050600182168061493957607f821691505b6020821081141561494d5761494c614a5a565b5b50919050565b61495c82614ab8565b810181811067ffffffffffffffff8211171561497b5761497a614a89565b5b80604052505050565b600061498f826148c3565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8214156149c2576149c16149cd565b5b600182019050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6000601f19601f8301169050919050565b7f53656e646572206973206e6f742061756374696f6e206f776e65720000000000600082015250565b7f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160008201527f6464726573730000000000000000000000000000000000000000000000000000602082015250565b7f476976656e2063757272656e6379206973206e6f74206120636f6e7472616374600082015250565b7f41756374696f6e206973206e6f742066696e6973686564000000000000000000600082015250565b7f496e76616c69642062696420696e6372656d656e740000000000000000000000600082015250565b7f4973206e6f74206f776e6572206f662061737365740000000000000000000000600082015250565b7f41756374696f6e206973206e6f74206163746976650000000000000000000000600082015250565b7f42696420616d6f756e74206d757374206578636565642074686520686967686560008201527f73742062696420627920746865206d696e696d756d20696e6372656d656e742060208201527f70657263656e74616765206f72206d6f72652e00000000000000000000000000604082015250565b7f4661696c656420746f20706179206261636b0000000000000000000000000000600082015250565b7f496e76616c69642061756374696f6e20696e6372656d656e7400000000000000600082015250565b7f41756374696f6e20646f6573206e6f7420657869737400000000000000000000600082015250565b7f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572600082015250565b7f496e76616c696420737461727420707269636500000000000000000000000000600082015250565b7f496e76616c69642061756374696f6e206475726174696f6e0000000000000000600082015250565b7f427579206e6f772070726963652073686f756c6420686967686572206f72206560008201527f7175616c20746f20737461727420707269636500000000000000000000000000602082015250565b7f53656e646572206973206e6f742077696e6e6572000000000000000000000000600082015250565b7f4c6f74206973206e6f7420617070726f76656400000000000000000000000000600082015250565b7f5468652072657061796d656e742068617320616c7265616479206265656e207460008201527f72616e7366657272656400000000000000000000000000000000000000000000602082015250565b7f4661696c656420746f207472616e7366657220746f6b656e7320746f20626964600082015250565b7f476976656e20746f6b656e206973206e6f74206120636f6e7472616374000000600082015250565b7f546865206c6f742068617320616c7265616479206265656e207472616e73666560008201527f7272656400000000000000000000000000000000000000000000000000000000602082015250565b7f4661696c656420746f207472616e73666572207468652072657061796d656e74600082015250565b60058110614f4457614f43614a2b565b5b50565b614f5081614872565b8114614f5b57600080fd5b50565b614f6781614884565b8114614f7257600080fd5b50565b614f7e816148c3565b8114614f8957600080fd5b5056fea2646970667358221220cd9a4237373ccd1105b7fb5e76b9982ca7ea9534bfcd8a273b2a3c8750a2065a64736f6c63430008030033"

// DeployAuction deploys a new Ethereum contract, binding an instance of Auction to it.
func DeployAuction(auth *bind.TransactOpts, backend bind.ContractBackend) (common.Address, *types.Transaction, *Auction, error) {
	parsed, err := abi.JSON(strings.NewReader(AuctionABI))
	if err != nil {
		return common.Address{}, nil, nil, err
	}

	address, tx, contract, err := bind.DeployContract(auth, parsed, common.FromHex(AuctionBin), backend)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &Auction{AuctionCaller: AuctionCaller{contract: contract}, AuctionTransactor: AuctionTransactor{contract: contract}, AuctionFilterer: AuctionFilterer{contract: contract}}, nil
}

// Auction is an auto generated Go binding around an Ethereum contract.
type Auction struct {
	AuctionCaller     // Read-only binding to the contract
	AuctionTransactor // Write-only binding to the contract
	AuctionFilterer   // Log filterer for contract events
}

// AuctionCaller is an auto generated read-only Go binding around an Ethereum contract.
type AuctionCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// AuctionTransactor is an auto generated write-only Go binding around an Ethereum contract.
type AuctionTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// AuctionFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type AuctionFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// AuctionSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type AuctionSession struct {
	Contract     *Auction          // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// AuctionCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type AuctionCallerSession struct {
	Contract *AuctionCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts  // Call options to use throughout this session
}

// AuctionTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type AuctionTransactorSession struct {
	Contract     *AuctionTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts  // Transaction auth options to use throughout this session
}

// AuctionRaw is an auto generated low-level Go binding around an Ethereum contract.
type AuctionRaw struct {
	Contract *Auction // Generic contract binding to access the raw methods on
}

// AuctionCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type AuctionCallerRaw struct {
	Contract *AuctionCaller // Generic read-only contract binding to access the raw methods on
}

// AuctionTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type AuctionTransactorRaw struct {
	Contract *AuctionTransactor // Generic write-only contract binding to access the raw methods on
}

// NewAuction creates a new instance of Auction, bound to a specific deployed contract.
func NewAuction(address common.Address, backend bind.ContractBackend) (*Auction, error) {
	contract, err := bindAuction(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &Auction{AuctionCaller: AuctionCaller{contract: contract}, AuctionTransactor: AuctionTransactor{contract: contract}, AuctionFilterer: AuctionFilterer{contract: contract}}, nil
}

// NewAuctionCaller creates a new read-only instance of Auction, bound to a specific deployed contract.
func NewAuctionCaller(address common.Address, caller bind.ContractCaller) (*AuctionCaller, error) {
	contract, err := bindAuction(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &AuctionCaller{contract: contract}, nil
}

// NewAuctionTransactor creates a new write-only instance of Auction, bound to a specific deployed contract.
func NewAuctionTransactor(address common.Address, transactor bind.ContractTransactor) (*AuctionTransactor, error) {
	contract, err := bindAuction(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &AuctionTransactor{contract: contract}, nil
}

// NewAuctionFilterer creates a new log filterer instance of Auction, bound to a specific deployed contract.
func NewAuctionFilterer(address common.Address, filterer bind.ContractFilterer) (*AuctionFilterer, error) {
	contract, err := bindAuction(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &AuctionFilterer{contract: contract}, nil
}

// bindAuction binds a generic wrapper to an already deployed contract.
func bindAuction(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := abi.JSON(strings.NewReader(AuctionABI))
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_Auction *AuctionRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _Auction.Contract.AuctionCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_Auction *AuctionRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Auction.Contract.AuctionTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_Auction *AuctionRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _Auction.Contract.AuctionTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_Auction *AuctionCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _Auction.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_Auction *AuctionTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Auction.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_Auction *AuctionTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _Auction.Contract.contract.Transact(opts, method, params...)
}

// CountOfAuctions is a free data retrieval call binding the contract method 0x22a0119b.
//
// Solidity: function countOfAuctions() view returns(uint256)
func (_Auction *AuctionCaller) CountOfAuctions(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _Auction.contract.Call(opts, &out, "countOfAuctions")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// CountOfAuctions is a free data retrieval call binding the contract method 0x22a0119b.
//
// Solidity: function countOfAuctions() view returns(uint256)
func (_Auction *AuctionSession) CountOfAuctions() (*big.Int, error) {
	return _Auction.Contract.CountOfAuctions(&_Auction.CallOpts)
}

// CountOfAuctions is a free data retrieval call binding the contract method 0x22a0119b.
//
// Solidity: function countOfAuctions() view returns(uint256)
func (_Auction *AuctionCallerSession) CountOfAuctions() (*big.Int, error) {
	return _Auction.Contract.CountOfAuctions(&_Auction.CallOpts)
}

// GetAuctionInfo is a free data retrieval call binding the contract method 0xfc3fc4ed.
//
// Solidity: function getAuctionInfo(uint256 _auctionId) view returns((address,uint256,uint256,uint256,uint256,uint256,uint256,string,address,uint256,address,address,uint256,bool,bool,bool))
func (_Auction *AuctionCaller) GetAuctionInfo(opts *bind.CallOpts, _auctionId *big.Int) (AuctionAuctionInfo, error) {
	var out []interface{}
	err := _Auction.contract.Call(opts, &out, "getAuctionInfo", _auctionId)

	if err != nil {
		return *new(AuctionAuctionInfo), err
	}

	out0 := *abi.ConvertType(out[0], new(AuctionAuctionInfo)).(*AuctionAuctionInfo)

	return out0, err

}

// GetAuctionInfo is a free data retrieval call binding the contract method 0xfc3fc4ed.
//
// Solidity: function getAuctionInfo(uint256 _auctionId) view returns((address,uint256,uint256,uint256,uint256,uint256,uint256,string,address,uint256,address,address,uint256,bool,bool,bool))
func (_Auction *AuctionSession) GetAuctionInfo(_auctionId *big.Int) (AuctionAuctionInfo, error) {
	return _Auction.Contract.GetAuctionInfo(&_Auction.CallOpts, _auctionId)
}

// GetAuctionInfo is a free data retrieval call binding the contract method 0xfc3fc4ed.
//
// Solidity: function getAuctionInfo(uint256 _auctionId) view returns((address,uint256,uint256,uint256,uint256,uint256,uint256,string,address,uint256,address,address,uint256,bool,bool,bool))
func (_Auction *AuctionCallerSession) GetAuctionInfo(_auctionId *big.Int) (AuctionAuctionInfo, error) {
	return _Auction.Contract.GetAuctionInfo(&_Auction.CallOpts, _auctionId)
}

// GetRaisingBid is a free data retrieval call binding the contract method 0xa2165920.
//
// Solidity: function getRaisingBid(uint256 _auctionId) view returns(uint256)
func (_Auction *AuctionCaller) GetRaisingBid(opts *bind.CallOpts, _auctionId *big.Int) (*big.Int, error) {
	var out []interface{}
	err := _Auction.contract.Call(opts, &out, "getRaisingBid", _auctionId)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// GetRaisingBid is a free data retrieval call binding the contract method 0xa2165920.
//
// Solidity: function getRaisingBid(uint256 _auctionId) view returns(uint256)
func (_Auction *AuctionSession) GetRaisingBid(_auctionId *big.Int) (*big.Int, error) {
	return _Auction.Contract.GetRaisingBid(&_Auction.CallOpts, _auctionId)
}

// GetRaisingBid is a free data retrieval call binding the contract method 0xa2165920.
//
// Solidity: function getRaisingBid(uint256 _auctionId) view returns(uint256)
func (_Auction *AuctionCallerSession) GetRaisingBid(_auctionId *big.Int) (*big.Int, error) {
	return _Auction.Contract.GetRaisingBid(&_Auction.CallOpts, _auctionId)
}

// GetStatus is a free data retrieval call binding the contract method 0x5c622a0e.
//
// Solidity: function getStatus(uint256 _auctionId) view returns(uint8)
func (_Auction *AuctionCaller) GetStatus(opts *bind.CallOpts, _auctionId *big.Int) (uint8, error) {
	var out []interface{}
	err := _Auction.contract.Call(opts, &out, "getStatus", _auctionId)

	if err != nil {
		return *new(uint8), err
	}

	out0 := *abi.ConvertType(out[0], new(uint8)).(*uint8)

	return out0, err

}

// GetStatus is a free data retrieval call binding the contract method 0x5c622a0e.
//
// Solidity: function getStatus(uint256 _auctionId) view returns(uint8)
func (_Auction *AuctionSession) GetStatus(_auctionId *big.Int) (uint8, error) {
	return _Auction.Contract.GetStatus(&_Auction.CallOpts, _auctionId)
}

// GetStatus is a free data retrieval call binding the contract method 0x5c622a0e.
//
// Solidity: function getStatus(uint256 _auctionId) view returns(uint8)
func (_Auction *AuctionCallerSession) GetStatus(_auctionId *big.Int) (uint8, error) {
	return _Auction.Contract.GetStatus(&_Auction.CallOpts, _auctionId)
}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() view returns(address)
func (_Auction *AuctionCaller) Owner(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _Auction.contract.Call(opts, &out, "owner")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() view returns(address)
func (_Auction *AuctionSession) Owner() (common.Address, error) {
	return _Auction.Contract.Owner(&_Auction.CallOpts)
}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() view returns(address)
func (_Auction *AuctionCallerSession) Owner() (common.Address, error) {
	return _Auction.Contract.Owner(&_Auction.CallOpts)
}

// Bid is a paid mutator transaction binding the contract method 0x598647f8.
//
// Solidity: function bid(uint256 _auctionId, uint256 _amount) returns()
func (_Auction *AuctionTransactor) Bid(opts *bind.TransactOpts, _auctionId *big.Int, _amount *big.Int) (*types.Transaction, error) {
	return _Auction.contract.Transact(opts, "bid", _auctionId, _amount)
}

// Bid is a paid mutator transaction binding the contract method 0x598647f8.
//
// Solidity: function bid(uint256 _auctionId, uint256 _amount) returns()
func (_Auction *AuctionSession) Bid(_auctionId *big.Int, _amount *big.Int) (*types.Transaction, error) {
	return _Auction.Contract.Bid(&_Auction.TransactOpts, _auctionId, _amount)
}

// Bid is a paid mutator transaction binding the contract method 0x598647f8.
//
// Solidity: function bid(uint256 _auctionId, uint256 _amount) returns()
func (_Auction *AuctionTransactorSession) Bid(_auctionId *big.Int, _amount *big.Int) (*types.Transaction, error) {
	return _Auction.Contract.Bid(&_Auction.TransactOpts, _auctionId, _amount)
}

// BuyNow is a paid mutator transaction binding the contract method 0x08a0f32f.
//
// Solidity: function buyNow(uint256 _auctionId) returns()
func (_Auction *AuctionTransactor) BuyNow(opts *bind.TransactOpts, _auctionId *big.Int) (*types.Transaction, error) {
	return _Auction.contract.Transact(opts, "buyNow", _auctionId)
}

// BuyNow is a paid mutator transaction binding the contract method 0x08a0f32f.
//
// Solidity: function buyNow(uint256 _auctionId) returns()
func (_Auction *AuctionSession) BuyNow(_auctionId *big.Int) (*types.Transaction, error) {
	return _Auction.Contract.BuyNow(&_Auction.TransactOpts, _auctionId)
}

// BuyNow is a paid mutator transaction binding the contract method 0x08a0f32f.
//
// Solidity: function buyNow(uint256 _auctionId) returns()
func (_Auction *AuctionTransactorSession) BuyNow(_auctionId *big.Int) (*types.Transaction, error) {
	return _Auction.Contract.BuyNow(&_Auction.TransactOpts, _auctionId)
}

// ClaimLot is a paid mutator transaction binding the contract method 0xf2da0664.
//
// Solidity: function claimLot(uint256 _auctionId) returns()
func (_Auction *AuctionTransactor) ClaimLot(opts *bind.TransactOpts, _auctionId *big.Int) (*types.Transaction, error) {
	return _Auction.contract.Transact(opts, "claimLot", _auctionId)
}

// ClaimLot is a paid mutator transaction binding the contract method 0xf2da0664.
//
// Solidity: function claimLot(uint256 _auctionId) returns()
func (_Auction *AuctionSession) ClaimLot(_auctionId *big.Int) (*types.Transaction, error) {
	return _Auction.Contract.ClaimLot(&_Auction.TransactOpts, _auctionId)
}

// ClaimLot is a paid mutator transaction binding the contract method 0xf2da0664.
//
// Solidity: function claimLot(uint256 _auctionId) returns()
func (_Auction *AuctionTransactorSession) ClaimLot(_auctionId *big.Int) (*types.Transaction, error) {
	return _Auction.Contract.ClaimLot(&_Auction.TransactOpts, _auctionId)
}

// ClaimRepayment is a paid mutator transaction binding the contract method 0x00d878e8.
//
// Solidity: function claimRepayment(uint256 _auctionId) returns()
func (_Auction *AuctionTransactor) ClaimRepayment(opts *bind.TransactOpts, _auctionId *big.Int) (*types.Transaction, error) {
	return _Auction.contract.Transact(opts, "claimRepayment", _auctionId)
}

// ClaimRepayment is a paid mutator transaction binding the contract method 0x00d878e8.
//
// Solidity: function claimRepayment(uint256 _auctionId) returns()
func (_Auction *AuctionSession) ClaimRepayment(_auctionId *big.Int) (*types.Transaction, error) {
	return _Auction.Contract.ClaimRepayment(&_Auction.TransactOpts, _auctionId)
}

// ClaimRepayment is a paid mutator transaction binding the contract method 0x00d878e8.
//
// Solidity: function claimRepayment(uint256 _auctionId) returns()
func (_Auction *AuctionTransactorSession) ClaimRepayment(_auctionId *big.Int) (*types.Transaction, error) {
	return _Auction.Contract.ClaimRepayment(&_Auction.TransactOpts, _auctionId)
}

// CloseAuction is a paid mutator transaction binding the contract method 0x236ed8f3.
//
// Solidity: function closeAuction(uint256 _auctionId) returns()
func (_Auction *AuctionTransactor) CloseAuction(opts *bind.TransactOpts, _auctionId *big.Int) (*types.Transaction, error) {
	return _Auction.contract.Transact(opts, "closeAuction", _auctionId)
}

// CloseAuction is a paid mutator transaction binding the contract method 0x236ed8f3.
//
// Solidity: function closeAuction(uint256 _auctionId) returns()
func (_Auction *AuctionSession) CloseAuction(_auctionId *big.Int) (*types.Transaction, error) {
	return _Auction.Contract.CloseAuction(&_Auction.TransactOpts, _auctionId)
}

// CloseAuction is a paid mutator transaction binding the contract method 0x236ed8f3.
//
// Solidity: function closeAuction(uint256 _auctionId) returns()
func (_Auction *AuctionTransactorSession) CloseAuction(_auctionId *big.Int) (*types.Transaction, error) {
	return _Auction.Contract.CloseAuction(&_Auction.TransactOpts, _auctionId)
}

// CreateAuction is a paid mutator transaction binding the contract method 0x4bc28ede.
//
// Solidity: function createAuction(address _tokenAddress, uint256 _tokenId, address _currencyAddress, uint256 _startPrice, uint256 _buyNowPrice, uint256 _startTime, uint256 _duration, uint256 _durationIncrement, uint256 _bidIncrement, string _description) returns(uint256)
func (_Auction *AuctionTransactor) CreateAuction(opts *bind.TransactOpts, _tokenAddress common.Address, _tokenId *big.Int, _currencyAddress common.Address, _startPrice *big.Int, _buyNowPrice *big.Int, _startTime *big.Int, _duration *big.Int, _durationIncrement *big.Int, _bidIncrement *big.Int, _description string) (*types.Transaction, error) {
	return _Auction.contract.Transact(opts, "createAuction", _tokenAddress, _tokenId, _currencyAddress, _startPrice, _buyNowPrice, _startTime, _duration, _durationIncrement, _bidIncrement, _description)
}

// CreateAuction is a paid mutator transaction binding the contract method 0x4bc28ede.
//
// Solidity: function createAuction(address _tokenAddress, uint256 _tokenId, address _currencyAddress, uint256 _startPrice, uint256 _buyNowPrice, uint256 _startTime, uint256 _duration, uint256 _durationIncrement, uint256 _bidIncrement, string _description) returns(uint256)
func (_Auction *AuctionSession) CreateAuction(_tokenAddress common.Address, _tokenId *big.Int, _currencyAddress common.Address, _startPrice *big.Int, _buyNowPrice *big.Int, _startTime *big.Int, _duration *big.Int, _durationIncrement *big.Int, _bidIncrement *big.Int, _description string) (*types.Transaction, error) {
	return _Auction.Contract.CreateAuction(&_Auction.TransactOpts, _tokenAddress, _tokenId, _currencyAddress, _startPrice, _buyNowPrice, _startTime, _duration, _durationIncrement, _bidIncrement, _description)
}

// CreateAuction is a paid mutator transaction binding the contract method 0x4bc28ede.
//
// Solidity: function createAuction(address _tokenAddress, uint256 _tokenId, address _currencyAddress, uint256 _startPrice, uint256 _buyNowPrice, uint256 _startTime, uint256 _duration, uint256 _durationIncrement, uint256 _bidIncrement, string _description) returns(uint256)
func (_Auction *AuctionTransactorSession) CreateAuction(_tokenAddress common.Address, _tokenId *big.Int, _currencyAddress common.Address, _startPrice *big.Int, _buyNowPrice *big.Int, _startTime *big.Int, _duration *big.Int, _durationIncrement *big.Int, _bidIncrement *big.Int, _description string) (*types.Transaction, error) {
	return _Auction.Contract.CreateAuction(&_Auction.TransactOpts, _tokenAddress, _tokenId, _currencyAddress, _startPrice, _buyNowPrice, _startTime, _duration, _durationIncrement, _bidIncrement, _description)
}

// RenounceOwnership is a paid mutator transaction binding the contract method 0x715018a6.
//
// Solidity: function renounceOwnership() returns()
func (_Auction *AuctionTransactor) RenounceOwnership(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Auction.contract.Transact(opts, "renounceOwnership")
}

// RenounceOwnership is a paid mutator transaction binding the contract method 0x715018a6.
//
// Solidity: function renounceOwnership() returns()
func (_Auction *AuctionSession) RenounceOwnership() (*types.Transaction, error) {
	return _Auction.Contract.RenounceOwnership(&_Auction.TransactOpts)
}

// RenounceOwnership is a paid mutator transaction binding the contract method 0x715018a6.
//
// Solidity: function renounceOwnership() returns()
func (_Auction *AuctionTransactorSession) RenounceOwnership() (*types.Transaction, error) {
	return _Auction.Contract.RenounceOwnership(&_Auction.TransactOpts)
}

// TransferOwnership is a paid mutator transaction binding the contract method 0xf2fde38b.
//
// Solidity: function transferOwnership(address newOwner) returns()
func (_Auction *AuctionTransactor) TransferOwnership(opts *bind.TransactOpts, newOwner common.Address) (*types.Transaction, error) {
	return _Auction.contract.Transact(opts, "transferOwnership", newOwner)
}

// TransferOwnership is a paid mutator transaction binding the contract method 0xf2fde38b.
//
// Solidity: function transferOwnership(address newOwner) returns()
func (_Auction *AuctionSession) TransferOwnership(newOwner common.Address) (*types.Transaction, error) {
	return _Auction.Contract.TransferOwnership(&_Auction.TransactOpts, newOwner)
}

// TransferOwnership is a paid mutator transaction binding the contract method 0xf2fde38b.
//
// Solidity: function transferOwnership(address newOwner) returns()
func (_Auction *AuctionTransactorSession) TransferOwnership(newOwner common.Address) (*types.Transaction, error) {
	return _Auction.Contract.TransferOwnership(&_Auction.TransactOpts, newOwner)
}

// AuctionAuctionBidIterator is returned from FilterAuctionBid and is used to iterate over the raw logs and unpacked data for AuctionBid events raised by the Auction contract.
type AuctionAuctionBidIterator struct {
	Event *AuctionAuctionBid // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *AuctionAuctionBidIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(AuctionAuctionBid)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(AuctionAuctionBid)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *AuctionAuctionBidIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *AuctionAuctionBidIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// AuctionAuctionBid represents a AuctionBid event raised by the Auction contract.
type AuctionAuctionBid struct {
	AuctionId *big.Int
	Bidder    common.Address
	Amount    *big.Int
	Raw       types.Log // Blockchain specific contextual infos
}

// FilterAuctionBid is a free log retrieval operation binding the contract event 0xb8d756f2d1da4663767eb4d559780ace84f2f65a421a60ddcb47e8b2e5d2fd26.
//
// Solidity: event AuctionBid(uint256 _auctionId, address _bidder, uint256 _amount)
func (_Auction *AuctionFilterer) FilterAuctionBid(opts *bind.FilterOpts) (*AuctionAuctionBidIterator, error) {

	logs, sub, err := _Auction.contract.FilterLogs(opts, "AuctionBid")
	if err != nil {
		return nil, err
	}
	return &AuctionAuctionBidIterator{contract: _Auction.contract, event: "AuctionBid", logs: logs, sub: sub}, nil
}

// WatchAuctionBid is a free log subscription operation binding the contract event 0xb8d756f2d1da4663767eb4d559780ace84f2f65a421a60ddcb47e8b2e5d2fd26.
//
// Solidity: event AuctionBid(uint256 _auctionId, address _bidder, uint256 _amount)
func (_Auction *AuctionFilterer) WatchAuctionBid(opts *bind.WatchOpts, sink chan<- *AuctionAuctionBid) (event.Subscription, error) {

	logs, sub, err := _Auction.contract.WatchLogs(opts, "AuctionBid")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(AuctionAuctionBid)
				if err := _Auction.contract.UnpackLog(event, "AuctionBid", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseAuctionBid is a log parse operation binding the contract event 0xb8d756f2d1da4663767eb4d559780ace84f2f65a421a60ddcb47e8b2e5d2fd26.
//
// Solidity: event AuctionBid(uint256 _auctionId, address _bidder, uint256 _amount)
func (_Auction *AuctionFilterer) ParseAuctionBid(log types.Log) (*AuctionAuctionBid, error) {
	event := new(AuctionAuctionBid)
	if err := _Auction.contract.UnpackLog(event, "AuctionBid", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// AuctionAuctionClosedIterator is returned from FilterAuctionClosed and is used to iterate over the raw logs and unpacked data for AuctionClosed events raised by the Auction contract.
type AuctionAuctionClosedIterator struct {
	Event *AuctionAuctionClosed // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *AuctionAuctionClosedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(AuctionAuctionClosed)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(AuctionAuctionClosed)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *AuctionAuctionClosedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *AuctionAuctionClosedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// AuctionAuctionClosed represents a AuctionClosed event raised by the Auction contract.
type AuctionAuctionClosed struct {
	AuctionId *big.Int
	Raw       types.Log // Blockchain specific contextual infos
}

// FilterAuctionClosed is a free log retrieval operation binding the contract event 0xac4a907ec29adcc56774b757ecb1e1b4d597374fc9386107d05e2670259df7d3.
//
// Solidity: event AuctionClosed(uint256 _auctionId)
func (_Auction *AuctionFilterer) FilterAuctionClosed(opts *bind.FilterOpts) (*AuctionAuctionClosedIterator, error) {

	logs, sub, err := _Auction.contract.FilterLogs(opts, "AuctionClosed")
	if err != nil {
		return nil, err
	}
	return &AuctionAuctionClosedIterator{contract: _Auction.contract, event: "AuctionClosed", logs: logs, sub: sub}, nil
}

// WatchAuctionClosed is a free log subscription operation binding the contract event 0xac4a907ec29adcc56774b757ecb1e1b4d597374fc9386107d05e2670259df7d3.
//
// Solidity: event AuctionClosed(uint256 _auctionId)
func (_Auction *AuctionFilterer) WatchAuctionClosed(opts *bind.WatchOpts, sink chan<- *AuctionAuctionClosed) (event.Subscription, error) {

	logs, sub, err := _Auction.contract.WatchLogs(opts, "AuctionClosed")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(AuctionAuctionClosed)
				if err := _Auction.contract.UnpackLog(event, "AuctionClosed", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseAuctionClosed is a log parse operation binding the contract event 0xac4a907ec29adcc56774b757ecb1e1b4d597374fc9386107d05e2670259df7d3.
//
// Solidity: event AuctionClosed(uint256 _auctionId)
func (_Auction *AuctionFilterer) ParseAuctionClosed(log types.Log) (*AuctionAuctionClosed, error) {
	event := new(AuctionAuctionClosed)
	if err := _Auction.contract.UnpackLog(event, "AuctionClosed", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// AuctionAuctionCreatedIterator is returned from FilterAuctionCreated and is used to iterate over the raw logs and unpacked data for AuctionCreated events raised by the Auction contract.
type AuctionAuctionCreatedIterator struct {
	Event *AuctionAuctionCreated // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *AuctionAuctionCreatedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(AuctionAuctionCreated)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(AuctionAuctionCreated)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *AuctionAuctionCreatedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *AuctionAuctionCreatedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// AuctionAuctionCreated represents a AuctionCreated event raised by the Auction contract.
type AuctionAuctionCreated struct {
	Creator         common.Address
	TokenAddress    common.Address
	TokenId         *big.Int
	CurrencyAddress common.Address
	AuctionId       *big.Int
	Raw             types.Log // Blockchain specific contextual infos
}

// FilterAuctionCreated is a free log retrieval operation binding the contract event 0x03bb6e669c5d9d2143afb3599bda2cc92f483158549e37b474a6dc117f848b68.
//
// Solidity: event AuctionCreated(address _creator, address _tokenAddress, uint256 _tokenId, address _currencyAddress, uint256 _auctionId)
func (_Auction *AuctionFilterer) FilterAuctionCreated(opts *bind.FilterOpts) (*AuctionAuctionCreatedIterator, error) {

	logs, sub, err := _Auction.contract.FilterLogs(opts, "AuctionCreated")
	if err != nil {
		return nil, err
	}
	return &AuctionAuctionCreatedIterator{contract: _Auction.contract, event: "AuctionCreated", logs: logs, sub: sub}, nil
}

// WatchAuctionCreated is a free log subscription operation binding the contract event 0x03bb6e669c5d9d2143afb3599bda2cc92f483158549e37b474a6dc117f848b68.
//
// Solidity: event AuctionCreated(address _creator, address _tokenAddress, uint256 _tokenId, address _currencyAddress, uint256 _auctionId)
func (_Auction *AuctionFilterer) WatchAuctionCreated(opts *bind.WatchOpts, sink chan<- *AuctionAuctionCreated) (event.Subscription, error) {

	logs, sub, err := _Auction.contract.WatchLogs(opts, "AuctionCreated")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(AuctionAuctionCreated)
				if err := _Auction.contract.UnpackLog(event, "AuctionCreated", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseAuctionCreated is a log parse operation binding the contract event 0x03bb6e669c5d9d2143afb3599bda2cc92f483158549e37b474a6dc117f848b68.
//
// Solidity: event AuctionCreated(address _creator, address _tokenAddress, uint256 _tokenId, address _currencyAddress, uint256 _auctionId)
func (_Auction *AuctionFilterer) ParseAuctionCreated(log types.Log) (*AuctionAuctionCreated, error) {
	event := new(AuctionAuctionCreated)
	if err := _Auction.contract.UnpackLog(event, "AuctionCreated", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// AuctionLotTransferredIterator is returned from FilterLotTransferred and is used to iterate over the raw logs and unpacked data for LotTransferred events raised by the Auction contract.
type AuctionLotTransferredIterator struct {
	Event *AuctionLotTransferred // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *AuctionLotTransferredIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(AuctionLotTransferred)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(AuctionLotTransferred)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *AuctionLotTransferredIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *AuctionLotTransferredIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// AuctionLotTransferred represents a LotTransferred event raised by the Auction contract.
type AuctionLotTransferred struct {
	AuctionId *big.Int
	Winner    common.Address
	Raw       types.Log // Blockchain specific contextual infos
}

// FilterLotTransferred is a free log retrieval operation binding the contract event 0x0e60401031695311e5192456b98ba458c20ba883eb86b101645de6252c6e9dd3.
//
// Solidity: event LotTransferred(uint256 _auctionId, address _winner)
func (_Auction *AuctionFilterer) FilterLotTransferred(opts *bind.FilterOpts) (*AuctionLotTransferredIterator, error) {

	logs, sub, err := _Auction.contract.FilterLogs(opts, "LotTransferred")
	if err != nil {
		return nil, err
	}
	return &AuctionLotTransferredIterator{contract: _Auction.contract, event: "LotTransferred", logs: logs, sub: sub}, nil
}

// WatchLotTransferred is a free log subscription operation binding the contract event 0x0e60401031695311e5192456b98ba458c20ba883eb86b101645de6252c6e9dd3.
//
// Solidity: event LotTransferred(uint256 _auctionId, address _winner)
func (_Auction *AuctionFilterer) WatchLotTransferred(opts *bind.WatchOpts, sink chan<- *AuctionLotTransferred) (event.Subscription, error) {

	logs, sub, err := _Auction.contract.WatchLogs(opts, "LotTransferred")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(AuctionLotTransferred)
				if err := _Auction.contract.UnpackLog(event, "LotTransferred", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseLotTransferred is a log parse operation binding the contract event 0x0e60401031695311e5192456b98ba458c20ba883eb86b101645de6252c6e9dd3.
//
// Solidity: event LotTransferred(uint256 _auctionId, address _winner)
func (_Auction *AuctionFilterer) ParseLotTransferred(log types.Log) (*AuctionLotTransferred, error) {
	event := new(AuctionLotTransferred)
	if err := _Auction.contract.UnpackLog(event, "LotTransferred", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// AuctionOwnershipTransferredIterator is returned from FilterOwnershipTransferred and is used to iterate over the raw logs and unpacked data for OwnershipTransferred events raised by the Auction contract.
type AuctionOwnershipTransferredIterator struct {
	Event *AuctionOwnershipTransferred // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *AuctionOwnershipTransferredIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(AuctionOwnershipTransferred)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(AuctionOwnershipTransferred)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *AuctionOwnershipTransferredIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *AuctionOwnershipTransferredIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// AuctionOwnershipTransferred represents a OwnershipTransferred event raised by the Auction contract.
type AuctionOwnershipTransferred struct {
	PreviousOwner common.Address
	NewOwner      common.Address
	Raw           types.Log // Blockchain specific contextual infos
}

// FilterOwnershipTransferred is a free log retrieval operation binding the contract event 0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0.
//
// Solidity: event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)
func (_Auction *AuctionFilterer) FilterOwnershipTransferred(opts *bind.FilterOpts, previousOwner []common.Address, newOwner []common.Address) (*AuctionOwnershipTransferredIterator, error) {

	var previousOwnerRule []interface{}
	for _, previousOwnerItem := range previousOwner {
		previousOwnerRule = append(previousOwnerRule, previousOwnerItem)
	}
	var newOwnerRule []interface{}
	for _, newOwnerItem := range newOwner {
		newOwnerRule = append(newOwnerRule, newOwnerItem)
	}

	logs, sub, err := _Auction.contract.FilterLogs(opts, "OwnershipTransferred", previousOwnerRule, newOwnerRule)
	if err != nil {
		return nil, err
	}
	return &AuctionOwnershipTransferredIterator{contract: _Auction.contract, event: "OwnershipTransferred", logs: logs, sub: sub}, nil
}

// WatchOwnershipTransferred is a free log subscription operation binding the contract event 0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0.
//
// Solidity: event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)
func (_Auction *AuctionFilterer) WatchOwnershipTransferred(opts *bind.WatchOpts, sink chan<- *AuctionOwnershipTransferred, previousOwner []common.Address, newOwner []common.Address) (event.Subscription, error) {

	var previousOwnerRule []interface{}
	for _, previousOwnerItem := range previousOwner {
		previousOwnerRule = append(previousOwnerRule, previousOwnerItem)
	}
	var newOwnerRule []interface{}
	for _, newOwnerItem := range newOwner {
		newOwnerRule = append(newOwnerRule, newOwnerItem)
	}

	logs, sub, err := _Auction.contract.WatchLogs(opts, "OwnershipTransferred", previousOwnerRule, newOwnerRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(AuctionOwnershipTransferred)
				if err := _Auction.contract.UnpackLog(event, "OwnershipTransferred", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseOwnershipTransferred is a log parse operation binding the contract event 0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0.
//
// Solidity: event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)
func (_Auction *AuctionFilterer) ParseOwnershipTransferred(log types.Log) (*AuctionOwnershipTransferred, error) {
	event := new(AuctionOwnershipTransferred)
	if err := _Auction.contract.UnpackLog(event, "OwnershipTransferred", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// AuctionRepaymentTransferredIterator is returned from FilterRepaymentTransferred and is used to iterate over the raw logs and unpacked data for RepaymentTransferred events raised by the Auction contract.
type AuctionRepaymentTransferredIterator struct {
	Event *AuctionRepaymentTransferred // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *AuctionRepaymentTransferredIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(AuctionRepaymentTransferred)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(AuctionRepaymentTransferred)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *AuctionRepaymentTransferredIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *AuctionRepaymentTransferredIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// AuctionRepaymentTransferred represents a RepaymentTransferred event raised by the Auction contract.
type AuctionRepaymentTransferred struct {
	AuctionId *big.Int
	Creator   common.Address
	Raw       types.Log // Blockchain specific contextual infos
}

// FilterRepaymentTransferred is a free log retrieval operation binding the contract event 0xcede1e8bc44e44a1be509c46755459a8fef702efbee4649158b5376942bc14b9.
//
// Solidity: event RepaymentTransferred(uint256 _auctionId, address _creator)
func (_Auction *AuctionFilterer) FilterRepaymentTransferred(opts *bind.FilterOpts) (*AuctionRepaymentTransferredIterator, error) {

	logs, sub, err := _Auction.contract.FilterLogs(opts, "RepaymentTransferred")
	if err != nil {
		return nil, err
	}
	return &AuctionRepaymentTransferredIterator{contract: _Auction.contract, event: "RepaymentTransferred", logs: logs, sub: sub}, nil
}

// WatchRepaymentTransferred is a free log subscription operation binding the contract event 0xcede1e8bc44e44a1be509c46755459a8fef702efbee4649158b5376942bc14b9.
//
// Solidity: event RepaymentTransferred(uint256 _auctionId, address _creator)
func (_Auction *AuctionFilterer) WatchRepaymentTransferred(opts *bind.WatchOpts, sink chan<- *AuctionRepaymentTransferred) (event.Subscription, error) {

	logs, sub, err := _Auction.contract.WatchLogs(opts, "RepaymentTransferred")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(AuctionRepaymentTransferred)
				if err := _Auction.contract.UnpackLog(event, "RepaymentTransferred", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseRepaymentTransferred is a log parse operation binding the contract event 0xcede1e8bc44e44a1be509c46755459a8fef702efbee4649158b5376942bc14b9.
//
// Solidity: event RepaymentTransferred(uint256 _auctionId, address _creator)
func (_Auction *AuctionFilterer) ParseRepaymentTransferred(log types.Log) (*AuctionRepaymentTransferred, error) {
	event := new(AuctionRepaymentTransferred)
	if err := _Auction.contract.UnpackLog(event, "RepaymentTransferred", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

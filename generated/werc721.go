// Code generated - DO NOT EDIT.
// This file is a generated binding and any manual changes will be lost.

package generated

import (
	"math/big"
	"strings"

	ethereum "github.com/ethereum/go-ethereum"
	"github.com/ethereum/go-ethereum/accounts/abi"
	"github.com/ethereum/go-ethereum/accounts/abi/bind"
	"github.com/ethereum/go-ethereum/common"
	"github.com/ethereum/go-ethereum/core/types"
	"github.com/ethereum/go-ethereum/event"
)

// Reference imports to suppress errors if they are not otherwise used.
var (
	_ = big.NewInt
	_ = strings.NewReader
	_ = ethereum.NotFound
	_ = bind.Bind
	_ = common.Big1
	_ = types.BloomLookup
	_ = event.NewSubscription
)

// WERC721ABI is the input ABI used to generate the binding from.
const WERC721ABI = "[{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_eligibleUsers\",\"type\":\"address[]\"},{\"internalType\":\"string\",\"name\":\"_name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_symbol\",\"type\":\"string\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"approved\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getApproved\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"mint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"switchUserPermissions\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"tokenURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_ownerOfTokens\",\"type\":\"address\"}],\"name\":\"tokensOfOwner\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]"

// WERC721Bin is the compiled bytecode used for deploying new contracts.
var WERC721Bin = "0x60806040523480156200001157600080fd5b5060405162003868380380620038688339818101604052810190620000379190620003c6565b818160006200004b620001e360201b60201c565b9050806000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508073ffffffffffffffffffffffffffffffffffffffff16600073ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a350816001908051906020019062000101929190620001eb565b5080600290805190602001906200011a929190620001eb565b50505060005b8351811015620001d9576001600760008684815181106200016a577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b602002602001015173ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055508080620001d090620005d5565b91505062000120565b50505050620006db565b600033905090565b828054620001f99062000569565b90600052602060002090601f0160209004810192826200021d576000855562000269565b82601f106200023857805160ff191683800117855562000269565b8280016001018555821562000269579182015b82811115620002685782518255916020019190600101906200024b565b5b5090506200027891906200027c565b5090565b5b80821115620002975760008160009055506001016200027d565b5090565b6000620002b2620002ac8462000490565b62000467565b90508083825260208201905082856020860282011115620002d257600080fd5b60005b85811015620003065781620002eb888262000355565b845260208401935060208301925050600181019050620002d5565b5050509392505050565b6000620003276200032184620004bf565b62000467565b9050828152602081018484840111156200034057600080fd5b6200034d84828562000533565b509392505050565b6000815190506200036681620006c1565b92915050565b600082601f8301126200037e57600080fd5b8151620003908482602086016200029b565b91505092915050565b600082601f830112620003ab57600080fd5b8151620003bd84826020860162000310565b91505092915050565b600080600060608486031215620003dc57600080fd5b600084015167ffffffffffffffff811115620003f757600080fd5b62000405868287016200036c565b935050602084015167ffffffffffffffff8111156200042357600080fd5b620004318682870162000399565b925050604084015167ffffffffffffffff8111156200044f57600080fd5b6200045d8682870162000399565b9150509250925092565b60006200047362000486565b90506200048182826200059f565b919050565b6000604051905090565b600067ffffffffffffffff821115620004ae57620004ad62000681565b5b602082029050602081019050919050565b600067ffffffffffffffff821115620004dd57620004dc62000681565b5b620004e882620006b0565b9050602081019050919050565b6000620005028262000509565b9050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b60005b838110156200055357808201518184015260208101905062000536565b8381111562000563576000848401525b50505050565b600060028204905060018216806200058257607f821691505b6020821081141562000599576200059862000652565b5b50919050565b620005aa82620006b0565b810181811067ffffffffffffffff82111715620005cc57620005cb62000681565b5b80604052505050565b6000620005e28262000529565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82141562000618576200061762000623565b5b600182019050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6000601f19601f8301169050919050565b620006cc81620004f5565b8114620006d857600080fd5b50565b61317d80620006eb6000396000f3fe608060405234801561001057600080fd5b506004361061012c5760003560e01c8063715018a6116100ad578063b510391f11610071578063b510391f1461032f578063b88d4fde1461034b578063c87b56dd14610367578063e985e9c514610397578063f2fde38b146103c75761012c565b8063715018a61461029d5780638462151c146102a75780638da5cb5b146102d757806395d89b41146102f5578063a22cb465146103135761012c565b806323b872dd116100f457806323b872dd146101e957806342842e0e1461020557806348065fa6146102215780636352211e1461023d57806370a082311461026d5761012c565b806301ffc9a71461013157806306fdde0314610161578063081812fc1461017f578063095ea7b3146101af57806318160ddd146101cb575b600080fd5b61014b60048036038101906101469190612135565b6103e3565b6040516101589190612605565b60405180910390f35b6101696104c5565b6040516101769190612620565b60405180910390f35b61019960048036038101906101949190612187565b610557565b6040516101a6919061257c565b60405180910390f35b6101c960048036038101906101c491906120f9565b6105dc565b005b6101d36106f4565b6040516101e09190612862565b60405180910390f35b61020360048036038101906101fe9190611f9f565b6106fa565b005b61021f600480360381019061021a9190611f9f565b61075a565b005b61023b60048036038101906102369190611f3a565b61077a565b005b61025760048036038101906102529190612187565b61089d565b604051610264919061257c565b60405180910390f35b61028760048036038101906102829190611f3a565b61094f565b6040516102949190612862565b60405180910390f35b6102a5610a07565b005b6102c160048036038101906102bc9190611f3a565b610b41565b6040516102ce91906125e3565b60405180910390f35b6102df610d0c565b6040516102ec919061257c565b60405180910390f35b6102fd610d35565b60405161030a9190612620565b60405180910390f35b61032d60048036038101906103289190612069565b610dc7565b005b610349600480360381019061034491906120a5565b610f48565b005b61036560048036038101906103609190611fee565b611044565b005b610381600480360381019061037c9190612187565b6110a6565b60405161038e9190612620565b60405180910390f35b6103b160048036038101906103ac9190611f63565b61114d565b6040516103be9190612605565b60405180910390f35b6103e160048036038101906103dc9190611f3a565b6111e1565b005b60007f80ac58cd000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff191614806104ae57507f5b5e139f000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916145b806104be57506104bd8261138a565b5b9050919050565b6060600180546104d490612ac0565b80601f016020809104026020016040519081016040528092919081815260200182805461050090612ac0565b801561054d5780601f106105225761010080835404028352916020019161054d565b820191906000526020600020905b81548152906001019060200180831161053057829003601f168201915b5050505050905090565b6000610562826113f4565b6105a1576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610598906127a2565b60405180910390fd5b6005600083815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b60006105e78261089d565b90508073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff161415610658576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161064f90612822565b60405180910390fd5b8073ffffffffffffffffffffffffffffffffffffffff16610677611460565b73ffffffffffffffffffffffffffffffffffffffff1614806106a657506106a5816106a0611460565b61114d565b5b6106e5576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016106dc90612722565b60405180910390fd5b6106ef8383611468565b505050565b60085481565b61070b610705611460565b82611521565b61074a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161074190612842565b60405180910390fd5b6107558383836115ff565b505050565b61077583838360405180602001604052806000815250611044565b505050565b610782611460565b73ffffffffffffffffffffffffffffffffffffffff166107a0610d0c565b73ffffffffffffffffffffffffffffffffffffffff16146107f6576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016107ed906127c2565b60405180910390fd5b600760008273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff1615600760008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff02191690831515021790555050565b6000806003600084815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161415610946576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161093d90612762565b60405180910390fd5b80915050919050565b60008073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1614156109c0576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016109b790612742565b60405180910390fd5b600460008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b610a0f611460565b73ffffffffffffffffffffffffffffffffffffffff16610a2d610d0c565b73ffffffffffffffffffffffffffffffffffffffff1614610a83576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610a7a906127c2565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff1660008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a360008060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550565b60606000610b4e8361094f565b90506000811415610bd157600067ffffffffffffffff811115610b9a577f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b604051908082528060200260200182016040528015610bc85781602001602082028036833780820191505090505b50915050610d07565b60008167ffffffffffffffff811115610c13577f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b604051908082528060200260200182016040528015610c415781602001602082028036833780820191505090505b50905060006008549050600080600190505b828111610cfe578673ffffffffffffffffffffffffffffffffffffffff16610c7a8261089d565b73ffffffffffffffffffffffffffffffffffffffff161415610ceb5780848381518110610cd0577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b6020026020010181815250508180610ce790612b23565b9250505b8080610cf690612b23565b915050610c53565b50829450505050505b919050565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b606060028054610d4490612ac0565b80601f0160208091040260200160405190810160405280929190818152602001828054610d7090612ac0565b8015610dbd5780601f10610d9257610100808354040283529160200191610dbd565b820191906000526020600020905b815481529060010190602001808311610da057829003601f168201915b5050505050905090565b610dcf611460565b73ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff161415610e3d576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610e34906126e2565b60405180910390fd5b8060066000610e4a611460565b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055508173ffffffffffffffffffffffffffffffffffffffff16610ef7611460565b73ffffffffffffffffffffffffffffffffffffffff167f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c3183604051610f3c9190612605565b60405180910390a35050565b33600760008273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff1680610fd35750610fa4610d0c565b73ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16145b611012576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161100990612682565b60405180910390fd5b600061102a600160085461185b90919063ffffffff16565b90508060088190555061103e848285611871565b50505050565b61105561104f611460565b83611521565b611094576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161108b90612842565b60405180910390fd5b6110a0848484846118cc565b50505050565b60606110b1826113f4565b6110f0576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016110e790612802565b60405180910390fd5b60006110fa611928565b9050600081511161111a5760405180602001604052806000815250611145565b806111248461193f565b604051602001611135929190612558565b6040516020818303038152906040525b915050919050565b6000600660008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16905092915050565b6111e9611460565b73ffffffffffffffffffffffffffffffffffffffff16611207610d0c565b73ffffffffffffffffffffffffffffffffffffffff161461125d576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611254906127c2565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614156112cd576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016112c490612662565b60405180910390fd5b8073ffffffffffffffffffffffffffffffffffffffff1660008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a3806000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b60007f01ffc9a7000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916149050919050565b60008073ffffffffffffffffffffffffffffffffffffffff166003600084815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614159050919050565b600033905090565b816005600083815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550808273ffffffffffffffffffffffffffffffffffffffff166114db8361089d565b73ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92560405160405180910390a45050565b600061152c826113f4565b61156b576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161156290612702565b60405180910390fd5b60006115768361089d565b90508073ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff1614806115e557508373ffffffffffffffffffffffffffffffffffffffff166115cd84610557565b73ffffffffffffffffffffffffffffffffffffffff16145b806115f657506115f5818561114d565b5b91505092915050565b8273ffffffffffffffffffffffffffffffffffffffff1661161f8261089d565b73ffffffffffffffffffffffffffffffffffffffff1614611675576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161166c906127e2565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1614156116e5576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016116dc906126c2565b60405180910390fd5b6116f0838383611aec565b6116fb600082611468565b6001600460008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825461174b91906129d6565b925050819055506001600460008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282546117a2919061294f565b92505081905550816003600083815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550808273ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef60405160405180910390a4505050565b60008183611869919061294f565b905092915050565b61187b8383611af1565b6118886000848484611cbf565b6118c7576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016118be90612642565b60405180910390fd5b505050565b6118d78484846115ff565b6118e384848484611cbf565b611922576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161191990612642565b60405180910390fd5b50505050565b606060405180602001604052806000815250905090565b60606000821415611987576040518060400160405280600181526020017f30000000000000000000000000000000000000000000000000000000000000008152509050611ae7565b600082905060005b600082146119b95780806119a290612b23565b915050600a826119b291906129a5565b915061198f565b60008167ffffffffffffffff8111156119fb577f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6040519080825280601f01601f191660200182016040528015611a2d5781602001600182028036833780820191505090505b5090505b60008514611ae057600182611a4691906129d6565b9150600a85611a559190612b6c565b6030611a61919061294f565b60f81b818381518110611a9d577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a905350600a85611ad991906129a5565b9450611a31565b8093505050505b919050565b505050565b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff161415611b61576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611b5890612782565b60405180910390fd5b611b6a816113f4565b15611baa576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611ba1906126a2565b60405180910390fd5b611bb660008383611aec565b6001600460008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000828254611c06919061294f565b92505081905550816003600083815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550808273ffffffffffffffffffffffffffffffffffffffff16600073ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef60405160405180910390a45050565b6000611ce08473ffffffffffffffffffffffffffffffffffffffff16611e56565b15611e49578373ffffffffffffffffffffffffffffffffffffffff1663150b7a02611d09611460565b8786866040518563ffffffff1660e01b8152600401611d2b9493929190612597565b602060405180830381600087803b158015611d4557600080fd5b505af1925050508015611d7657506040513d601f19601f82011682018060405250810190611d73919061215e565b60015b611df9573d8060008114611da6576040519150601f19603f3d011682016040523d82523d6000602084013e611dab565b606091505b50600081511415611df1576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611de890612642565b60405180910390fd5b805181602001fd5b63150b7a0260e01b7bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916817bffffffffffffffffffffffffffffffffffffffffffffffffffffffff191614915050611e4e565b600190505b949350505050565b600080823b905060008111915050919050565b6000611e7c611e77846128a2565b61287d565b905082815260208101848484011115611e9457600080fd5b611e9f848285612a7e565b509392505050565b600081359050611eb6816130eb565b92915050565b600081359050611ecb81613102565b92915050565b600081359050611ee081613119565b92915050565b600081519050611ef581613119565b92915050565b600082601f830112611f0c57600080fd5b8135611f1c848260208601611e69565b91505092915050565b600081359050611f3481613130565b92915050565b600060208284031215611f4c57600080fd5b6000611f5a84828501611ea7565b91505092915050565b60008060408385031215611f7657600080fd5b6000611f8485828601611ea7565b9250506020611f9585828601611ea7565b9150509250929050565b600080600060608486031215611fb457600080fd5b6000611fc286828701611ea7565b9350506020611fd386828701611ea7565b9250506040611fe486828701611f25565b9150509250925092565b6000806000806080858703121561200457600080fd5b600061201287828801611ea7565b945050602061202387828801611ea7565b935050604061203487828801611f25565b925050606085013567ffffffffffffffff81111561205157600080fd5b61205d87828801611efb565b91505092959194509250565b6000806040838503121561207c57600080fd5b600061208a85828601611ea7565b925050602061209b85828601611ebc565b9150509250929050565b600080604083850312156120b857600080fd5b60006120c685828601611ea7565b925050602083013567ffffffffffffffff8111156120e357600080fd5b6120ef85828601611efb565b9150509250929050565b6000806040838503121561210c57600080fd5b600061211a85828601611ea7565b925050602061212b85828601611f25565b9150509250929050565b60006020828403121561214757600080fd5b600061215584828501611ed1565b91505092915050565b60006020828403121561217057600080fd5b600061217e84828501611ee6565b91505092915050565b60006020828403121561219957600080fd5b60006121a784828501611f25565b91505092915050565b60006121bc838361253a565b60208301905092915050565b6121d181612a0a565b82525050565b60006121e2826128e3565b6121ec8185612911565b93506121f7836128d3565b8060005b8381101561222857815161220f88826121b0565b975061221a83612904565b9250506001810190506121fb565b5085935050505092915050565b61223e81612a1c565b82525050565b600061224f826128ee565b6122598185612922565b9350612269818560208601612a8d565b61227281612c59565b840191505092915050565b6000612288826128f9565b6122928185612933565b93506122a2818560208601612a8d565b6122ab81612c59565b840191505092915050565b60006122c1826128f9565b6122cb8185612944565b93506122db818560208601612a8d565b80840191505092915050565b60006122f4603283612933565b91506122ff82612c6a565b604082019050919050565b6000612317602683612933565b915061232282612cb9565b604082019050919050565b600061233a601483612933565b915061234582612d08565b602082019050919050565b600061235d601c83612933565b915061236882612d31565b602082019050919050565b6000612380602483612933565b915061238b82612d5a565b604082019050919050565b60006123a3601983612933565b91506123ae82612da9565b602082019050919050565b60006123c6602c83612933565b91506123d182612dd2565b604082019050919050565b60006123e9603883612933565b91506123f482612e21565b604082019050919050565b600061240c602a83612933565b915061241782612e70565b604082019050919050565b600061242f602983612933565b915061243a82612ebf565b604082019050919050565b6000612452602083612933565b915061245d82612f0e565b602082019050919050565b6000612475602c83612933565b915061248082612f37565b604082019050919050565b6000612498602083612933565b91506124a382612f86565b602082019050919050565b60006124bb602983612933565b91506124c682612faf565b604082019050919050565b60006124de602f83612933565b91506124e982612ffe565b604082019050919050565b6000612501602183612933565b915061250c8261304d565b604082019050919050565b6000612524603183612933565b915061252f8261309c565b604082019050919050565b61254381612a74565b82525050565b61255281612a74565b82525050565b600061256482856122b6565b915061257082846122b6565b91508190509392505050565b600060208201905061259160008301846121c8565b92915050565b60006080820190506125ac60008301876121c8565b6125b960208301866121c8565b6125c66040830185612549565b81810360608301526125d88184612244565b905095945050505050565b600060208201905081810360008301526125fd81846121d7565b905092915050565b600060208201905061261a6000830184612235565b92915050565b6000602082019050818103600083015261263a818461227d565b905092915050565b6000602082019050818103600083015261265b816122e7565b9050919050565b6000602082019050818103600083015261267b8161230a565b9050919050565b6000602082019050818103600083015261269b8161232d565b9050919050565b600060208201905081810360008301526126bb81612350565b9050919050565b600060208201905081810360008301526126db81612373565b9050919050565b600060208201905081810360008301526126fb81612396565b9050919050565b6000602082019050818103600083015261271b816123b9565b9050919050565b6000602082019050818103600083015261273b816123dc565b9050919050565b6000602082019050818103600083015261275b816123ff565b9050919050565b6000602082019050818103600083015261277b81612422565b9050919050565b6000602082019050818103600083015261279b81612445565b9050919050565b600060208201905081810360008301526127bb81612468565b9050919050565b600060208201905081810360008301526127db8161248b565b9050919050565b600060208201905081810360008301526127fb816124ae565b9050919050565b6000602082019050818103600083015261281b816124d1565b9050919050565b6000602082019050818103600083015261283b816124f4565b9050919050565b6000602082019050818103600083015261285b81612517565b9050919050565b60006020820190506128776000830184612549565b92915050565b6000612887612898565b90506128938282612af2565b919050565b6000604051905090565b600067ffffffffffffffff8211156128bd576128bc612c2a565b5b6128c682612c59565b9050602081019050919050565b6000819050602082019050919050565b600081519050919050565b600081519050919050565b600081519050919050565b6000602082019050919050565b600082825260208201905092915050565b600082825260208201905092915050565b600082825260208201905092915050565b600081905092915050565b600061295a82612a74565b915061296583612a74565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0382111561299a57612999612b9d565b5b828201905092915050565b60006129b082612a74565b91506129bb83612a74565b9250826129cb576129ca612bcc565b5b828204905092915050565b60006129e182612a74565b91506129ec83612a74565b9250828210156129ff576129fe612b9d565b5b828203905092915050565b6000612a1582612a54565b9050919050565b60008115159050919050565b60007fffffffff0000000000000000000000000000000000000000000000000000000082169050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b82818337600083830152505050565b60005b83811015612aab578082015181840152602081019050612a90565b83811115612aba576000848401525b50505050565b60006002820490506001821680612ad857607f821691505b60208210811415612aec57612aeb612bfb565b5b50919050565b612afb82612c59565b810181811067ffffffffffffffff82111715612b1a57612b19612c2a565b5b80604052505050565b6000612b2e82612a74565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff821415612b6157612b60612b9d565b5b600182019050919050565b6000612b7782612a74565b9150612b8283612a74565b925082612b9257612b91612bcc565b5b828206905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6000601f19601f8301169050919050565b7f4552433732313a207472616e7366657220746f206e6f6e20455243373231526560008201527f63656976657220696d706c656d656e7465720000000000000000000000000000602082015250565b7f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160008201527f6464726573730000000000000000000000000000000000000000000000000000602082015250565b7f4973206e6f7420656c696769626c652075736572000000000000000000000000600082015250565b7f4552433732313a20746f6b656e20616c7265616479206d696e74656400000000600082015250565b7f4552433732313a207472616e7366657220746f20746865207a65726f2061646460008201527f7265737300000000000000000000000000000000000000000000000000000000602082015250565b7f4552433732313a20617070726f766520746f2063616c6c657200000000000000600082015250565b7f4552433732313a206f70657261746f7220717565727920666f72206e6f6e657860008201527f697374656e7420746f6b656e0000000000000000000000000000000000000000602082015250565b7f4552433732313a20617070726f76652063616c6c6572206973206e6f74206f7760008201527f6e6572206e6f7220617070726f76656420666f7220616c6c0000000000000000602082015250565b7f4552433732313a2062616c616e636520717565727920666f7220746865207a6560008201527f726f206164647265737300000000000000000000000000000000000000000000602082015250565b7f4552433732313a206f776e657220717565727920666f72206e6f6e657869737460008201527f656e7420746f6b656e0000000000000000000000000000000000000000000000602082015250565b7f4552433732313a206d696e7420746f20746865207a65726f2061646472657373600082015250565b7f4552433732313a20617070726f76656420717565727920666f72206e6f6e657860008201527f697374656e7420746f6b656e0000000000000000000000000000000000000000602082015250565b7f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572600082015250565b7f4552433732313a207472616e73666572206f6620746f6b656e2074686174206960008201527f73206e6f74206f776e0000000000000000000000000000000000000000000000602082015250565b7f4552433732314d657461646174613a2055524920717565727920666f72206e6f60008201527f6e6578697374656e7420746f6b656e0000000000000000000000000000000000602082015250565b7f4552433732313a20617070726f76616c20746f2063757272656e74206f776e6560008201527f7200000000000000000000000000000000000000000000000000000000000000602082015250565b7f4552433732313a207472616e736665722063616c6c6572206973206e6f74206f60008201527f776e6572206e6f7220617070726f766564000000000000000000000000000000602082015250565b6130f481612a0a565b81146130ff57600080fd5b50565b61310b81612a1c565b811461311657600080fd5b50565b61312281612a28565b811461312d57600080fd5b50565b61313981612a74565b811461314457600080fd5b5056fea26469706673582212202bb23b714e7c61c3bd659ebc25db2d66d6141942813eb6590397c1a43e44319b64736f6c63430008030033"

// DeployWERC721 deploys a new Ethereum contract, binding an instance of WERC721 to it.
func DeployWERC721(auth *bind.TransactOpts, backend bind.ContractBackend, _eligibleUsers []common.Address, _name string, _symbol string) (common.Address, *types.Transaction, *WERC721, error) {
	parsed, err := abi.JSON(strings.NewReader(WERC721ABI))
	if err != nil {
		return common.Address{}, nil, nil, err
	}

	address, tx, contract, err := bind.DeployContract(auth, parsed, common.FromHex(WERC721Bin), backend, _eligibleUsers, _name, _symbol)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &WERC721{WERC721Caller: WERC721Caller{contract: contract}, WERC721Transactor: WERC721Transactor{contract: contract}, WERC721Filterer: WERC721Filterer{contract: contract}}, nil
}

// WERC721 is an auto generated Go binding around an Ethereum contract.
type WERC721 struct {
	WERC721Caller     // Read-only binding to the contract
	WERC721Transactor // Write-only binding to the contract
	WERC721Filterer   // Log filterer for contract events
}

// WERC721Caller is an auto generated read-only Go binding around an Ethereum contract.
type WERC721Caller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// WERC721Transactor is an auto generated write-only Go binding around an Ethereum contract.
type WERC721Transactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// WERC721Filterer is an auto generated log filtering Go binding around an Ethereum contract events.
type WERC721Filterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// WERC721Session is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type WERC721Session struct {
	Contract     *WERC721          // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// WERC721CallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type WERC721CallerSession struct {
	Contract *WERC721Caller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts  // Call options to use throughout this session
}

// WERC721TransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type WERC721TransactorSession struct {
	Contract     *WERC721Transactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts  // Transaction auth options to use throughout this session
}

// WERC721Raw is an auto generated low-level Go binding around an Ethereum contract.
type WERC721Raw struct {
	Contract *WERC721 // Generic contract binding to access the raw methods on
}

// WERC721CallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type WERC721CallerRaw struct {
	Contract *WERC721Caller // Generic read-only contract binding to access the raw methods on
}

// WERC721TransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type WERC721TransactorRaw struct {
	Contract *WERC721Transactor // Generic write-only contract binding to access the raw methods on
}

// NewWERC721 creates a new instance of WERC721, bound to a specific deployed contract.
func NewWERC721(address common.Address, backend bind.ContractBackend) (*WERC721, error) {
	contract, err := bindWERC721(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &WERC721{WERC721Caller: WERC721Caller{contract: contract}, WERC721Transactor: WERC721Transactor{contract: contract}, WERC721Filterer: WERC721Filterer{contract: contract}}, nil
}

// NewWERC721Caller creates a new read-only instance of WERC721, bound to a specific deployed contract.
func NewWERC721Caller(address common.Address, caller bind.ContractCaller) (*WERC721Caller, error) {
	contract, err := bindWERC721(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &WERC721Caller{contract: contract}, nil
}

// NewWERC721Transactor creates a new write-only instance of WERC721, bound to a specific deployed contract.
func NewWERC721Transactor(address common.Address, transactor bind.ContractTransactor) (*WERC721Transactor, error) {
	contract, err := bindWERC721(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &WERC721Transactor{contract: contract}, nil
}

// NewWERC721Filterer creates a new log filterer instance of WERC721, bound to a specific deployed contract.
func NewWERC721Filterer(address common.Address, filterer bind.ContractFilterer) (*WERC721Filterer, error) {
	contract, err := bindWERC721(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &WERC721Filterer{contract: contract}, nil
}

// bindWERC721 binds a generic wrapper to an already deployed contract.
func bindWERC721(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := abi.JSON(strings.NewReader(WERC721ABI))
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_WERC721 *WERC721Raw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _WERC721.Contract.WERC721Caller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_WERC721 *WERC721Raw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _WERC721.Contract.WERC721Transactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_WERC721 *WERC721Raw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _WERC721.Contract.WERC721Transactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_WERC721 *WERC721CallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _WERC721.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_WERC721 *WERC721TransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _WERC721.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_WERC721 *WERC721TransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _WERC721.Contract.contract.Transact(opts, method, params...)
}

// BalanceOf is a free data retrieval call binding the contract method 0x70a08231.
//
// Solidity: function balanceOf(address owner) view returns(uint256)
func (_WERC721 *WERC721Caller) BalanceOf(opts *bind.CallOpts, owner common.Address) (*big.Int, error) {
	var out []interface{}
	err := _WERC721.contract.Call(opts, &out, "balanceOf", owner)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// BalanceOf is a free data retrieval call binding the contract method 0x70a08231.
//
// Solidity: function balanceOf(address owner) view returns(uint256)
func (_WERC721 *WERC721Session) BalanceOf(owner common.Address) (*big.Int, error) {
	return _WERC721.Contract.BalanceOf(&_WERC721.CallOpts, owner)
}

// BalanceOf is a free data retrieval call binding the contract method 0x70a08231.
//
// Solidity: function balanceOf(address owner) view returns(uint256)
func (_WERC721 *WERC721CallerSession) BalanceOf(owner common.Address) (*big.Int, error) {
	return _WERC721.Contract.BalanceOf(&_WERC721.CallOpts, owner)
}

// GetApproved is a free data retrieval call binding the contract method 0x081812fc.
//
// Solidity: function getApproved(uint256 tokenId) view returns(address)
func (_WERC721 *WERC721Caller) GetApproved(opts *bind.CallOpts, tokenId *big.Int) (common.Address, error) {
	var out []interface{}
	err := _WERC721.contract.Call(opts, &out, "getApproved", tokenId)

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// GetApproved is a free data retrieval call binding the contract method 0x081812fc.
//
// Solidity: function getApproved(uint256 tokenId) view returns(address)
func (_WERC721 *WERC721Session) GetApproved(tokenId *big.Int) (common.Address, error) {
	return _WERC721.Contract.GetApproved(&_WERC721.CallOpts, tokenId)
}

// GetApproved is a free data retrieval call binding the contract method 0x081812fc.
//
// Solidity: function getApproved(uint256 tokenId) view returns(address)
func (_WERC721 *WERC721CallerSession) GetApproved(tokenId *big.Int) (common.Address, error) {
	return _WERC721.Contract.GetApproved(&_WERC721.CallOpts, tokenId)
}

// IsApprovedForAll is a free data retrieval call binding the contract method 0xe985e9c5.
//
// Solidity: function isApprovedForAll(address owner, address operator) view returns(bool)
func (_WERC721 *WERC721Caller) IsApprovedForAll(opts *bind.CallOpts, owner common.Address, operator common.Address) (bool, error) {
	var out []interface{}
	err := _WERC721.contract.Call(opts, &out, "isApprovedForAll", owner, operator)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// IsApprovedForAll is a free data retrieval call binding the contract method 0xe985e9c5.
//
// Solidity: function isApprovedForAll(address owner, address operator) view returns(bool)
func (_WERC721 *WERC721Session) IsApprovedForAll(owner common.Address, operator common.Address) (bool, error) {
	return _WERC721.Contract.IsApprovedForAll(&_WERC721.CallOpts, owner, operator)
}

// IsApprovedForAll is a free data retrieval call binding the contract method 0xe985e9c5.
//
// Solidity: function isApprovedForAll(address owner, address operator) view returns(bool)
func (_WERC721 *WERC721CallerSession) IsApprovedForAll(owner common.Address, operator common.Address) (bool, error) {
	return _WERC721.Contract.IsApprovedForAll(&_WERC721.CallOpts, owner, operator)
}

// Name is a free data retrieval call binding the contract method 0x06fdde03.
//
// Solidity: function name() view returns(string)
func (_WERC721 *WERC721Caller) Name(opts *bind.CallOpts) (string, error) {
	var out []interface{}
	err := _WERC721.contract.Call(opts, &out, "name")

	if err != nil {
		return *new(string), err
	}

	out0 := *abi.ConvertType(out[0], new(string)).(*string)

	return out0, err

}

// Name is a free data retrieval call binding the contract method 0x06fdde03.
//
// Solidity: function name() view returns(string)
func (_WERC721 *WERC721Session) Name() (string, error) {
	return _WERC721.Contract.Name(&_WERC721.CallOpts)
}

// Name is a free data retrieval call binding the contract method 0x06fdde03.
//
// Solidity: function name() view returns(string)
func (_WERC721 *WERC721CallerSession) Name() (string, error) {
	return _WERC721.Contract.Name(&_WERC721.CallOpts)
}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() view returns(address)
func (_WERC721 *WERC721Caller) Owner(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _WERC721.contract.Call(opts, &out, "owner")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() view returns(address)
func (_WERC721 *WERC721Session) Owner() (common.Address, error) {
	return _WERC721.Contract.Owner(&_WERC721.CallOpts)
}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() view returns(address)
func (_WERC721 *WERC721CallerSession) Owner() (common.Address, error) {
	return _WERC721.Contract.Owner(&_WERC721.CallOpts)
}

// OwnerOf is a free data retrieval call binding the contract method 0x6352211e.
//
// Solidity: function ownerOf(uint256 tokenId) view returns(address)
func (_WERC721 *WERC721Caller) OwnerOf(opts *bind.CallOpts, tokenId *big.Int) (common.Address, error) {
	var out []interface{}
	err := _WERC721.contract.Call(opts, &out, "ownerOf", tokenId)

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// OwnerOf is a free data retrieval call binding the contract method 0x6352211e.
//
// Solidity: function ownerOf(uint256 tokenId) view returns(address)
func (_WERC721 *WERC721Session) OwnerOf(tokenId *big.Int) (common.Address, error) {
	return _WERC721.Contract.OwnerOf(&_WERC721.CallOpts, tokenId)
}

// OwnerOf is a free data retrieval call binding the contract method 0x6352211e.
//
// Solidity: function ownerOf(uint256 tokenId) view returns(address)
func (_WERC721 *WERC721CallerSession) OwnerOf(tokenId *big.Int) (common.Address, error) {
	return _WERC721.Contract.OwnerOf(&_WERC721.CallOpts, tokenId)
}

// SupportsInterface is a free data retrieval call binding the contract method 0x01ffc9a7.
//
// Solidity: function supportsInterface(bytes4 interfaceId) view returns(bool)
func (_WERC721 *WERC721Caller) SupportsInterface(opts *bind.CallOpts, interfaceId [4]byte) (bool, error) {
	var out []interface{}
	err := _WERC721.contract.Call(opts, &out, "supportsInterface", interfaceId)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// SupportsInterface is a free data retrieval call binding the contract method 0x01ffc9a7.
//
// Solidity: function supportsInterface(bytes4 interfaceId) view returns(bool)
func (_WERC721 *WERC721Session) SupportsInterface(interfaceId [4]byte) (bool, error) {
	return _WERC721.Contract.SupportsInterface(&_WERC721.CallOpts, interfaceId)
}

// SupportsInterface is a free data retrieval call binding the contract method 0x01ffc9a7.
//
// Solidity: function supportsInterface(bytes4 interfaceId) view returns(bool)
func (_WERC721 *WERC721CallerSession) SupportsInterface(interfaceId [4]byte) (bool, error) {
	return _WERC721.Contract.SupportsInterface(&_WERC721.CallOpts, interfaceId)
}

// Symbol is a free data retrieval call binding the contract method 0x95d89b41.
//
// Solidity: function symbol() view returns(string)
func (_WERC721 *WERC721Caller) Symbol(opts *bind.CallOpts) (string, error) {
	var out []interface{}
	err := _WERC721.contract.Call(opts, &out, "symbol")

	if err != nil {
		return *new(string), err
	}

	out0 := *abi.ConvertType(out[0], new(string)).(*string)

	return out0, err

}

// Symbol is a free data retrieval call binding the contract method 0x95d89b41.
//
// Solidity: function symbol() view returns(string)
func (_WERC721 *WERC721Session) Symbol() (string, error) {
	return _WERC721.Contract.Symbol(&_WERC721.CallOpts)
}

// Symbol is a free data retrieval call binding the contract method 0x95d89b41.
//
// Solidity: function symbol() view returns(string)
func (_WERC721 *WERC721CallerSession) Symbol() (string, error) {
	return _WERC721.Contract.Symbol(&_WERC721.CallOpts)
}

// TokenURI is a free data retrieval call binding the contract method 0xc87b56dd.
//
// Solidity: function tokenURI(uint256 tokenId) view returns(string)
func (_WERC721 *WERC721Caller) TokenURI(opts *bind.CallOpts, tokenId *big.Int) (string, error) {
	var out []interface{}
	err := _WERC721.contract.Call(opts, &out, "tokenURI", tokenId)

	if err != nil {
		return *new(string), err
	}

	out0 := *abi.ConvertType(out[0], new(string)).(*string)

	return out0, err

}

// TokenURI is a free data retrieval call binding the contract method 0xc87b56dd.
//
// Solidity: function tokenURI(uint256 tokenId) view returns(string)
func (_WERC721 *WERC721Session) TokenURI(tokenId *big.Int) (string, error) {
	return _WERC721.Contract.TokenURI(&_WERC721.CallOpts, tokenId)
}

// TokenURI is a free data retrieval call binding the contract method 0xc87b56dd.
//
// Solidity: function tokenURI(uint256 tokenId) view returns(string)
func (_WERC721 *WERC721CallerSession) TokenURI(tokenId *big.Int) (string, error) {
	return _WERC721.Contract.TokenURI(&_WERC721.CallOpts, tokenId)
}

// TokensOfOwner is a free data retrieval call binding the contract method 0x8462151c.
//
// Solidity: function tokensOfOwner(address _ownerOfTokens) view returns(uint256[])
func (_WERC721 *WERC721Caller) TokensOfOwner(opts *bind.CallOpts, _ownerOfTokens common.Address) ([]*big.Int, error) {
	var out []interface{}
	err := _WERC721.contract.Call(opts, &out, "tokensOfOwner", _ownerOfTokens)

	if err != nil {
		return *new([]*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new([]*big.Int)).(*[]*big.Int)

	return out0, err

}

// TokensOfOwner is a free data retrieval call binding the contract method 0x8462151c.
//
// Solidity: function tokensOfOwner(address _ownerOfTokens) view returns(uint256[])
func (_WERC721 *WERC721Session) TokensOfOwner(_ownerOfTokens common.Address) ([]*big.Int, error) {
	return _WERC721.Contract.TokensOfOwner(&_WERC721.CallOpts, _ownerOfTokens)
}

// TokensOfOwner is a free data retrieval call binding the contract method 0x8462151c.
//
// Solidity: function tokensOfOwner(address _ownerOfTokens) view returns(uint256[])
func (_WERC721 *WERC721CallerSession) TokensOfOwner(_ownerOfTokens common.Address) ([]*big.Int, error) {
	return _WERC721.Contract.TokensOfOwner(&_WERC721.CallOpts, _ownerOfTokens)
}

// TotalSupply is a free data retrieval call binding the contract method 0x18160ddd.
//
// Solidity: function totalSupply() view returns(uint256)
func (_WERC721 *WERC721Caller) TotalSupply(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _WERC721.contract.Call(opts, &out, "totalSupply")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// TotalSupply is a free data retrieval call binding the contract method 0x18160ddd.
//
// Solidity: function totalSupply() view returns(uint256)
func (_WERC721 *WERC721Session) TotalSupply() (*big.Int, error) {
	return _WERC721.Contract.TotalSupply(&_WERC721.CallOpts)
}

// TotalSupply is a free data retrieval call binding the contract method 0x18160ddd.
//
// Solidity: function totalSupply() view returns(uint256)
func (_WERC721 *WERC721CallerSession) TotalSupply() (*big.Int, error) {
	return _WERC721.Contract.TotalSupply(&_WERC721.CallOpts)
}

// Approve is a paid mutator transaction binding the contract method 0x095ea7b3.
//
// Solidity: function approve(address to, uint256 tokenId) returns()
func (_WERC721 *WERC721Transactor) Approve(opts *bind.TransactOpts, to common.Address, tokenId *big.Int) (*types.Transaction, error) {
	return _WERC721.contract.Transact(opts, "approve", to, tokenId)
}

// Approve is a paid mutator transaction binding the contract method 0x095ea7b3.
//
// Solidity: function approve(address to, uint256 tokenId) returns()
func (_WERC721 *WERC721Session) Approve(to common.Address, tokenId *big.Int) (*types.Transaction, error) {
	return _WERC721.Contract.Approve(&_WERC721.TransactOpts, to, tokenId)
}

// Approve is a paid mutator transaction binding the contract method 0x095ea7b3.
//
// Solidity: function approve(address to, uint256 tokenId) returns()
func (_WERC721 *WERC721TransactorSession) Approve(to common.Address, tokenId *big.Int) (*types.Transaction, error) {
	return _WERC721.Contract.Approve(&_WERC721.TransactOpts, to, tokenId)
}

// Mint is a paid mutator transaction binding the contract method 0xb510391f.
//
// Solidity: function mint(address _to, bytes _data) returns()
func (_WERC721 *WERC721Transactor) Mint(opts *bind.TransactOpts, _to common.Address, _data []byte) (*types.Transaction, error) {
	return _WERC721.contract.Transact(opts, "mint", _to, _data)
}

// Mint is a paid mutator transaction binding the contract method 0xb510391f.
//
// Solidity: function mint(address _to, bytes _data) returns()
func (_WERC721 *WERC721Session) Mint(_to common.Address, _data []byte) (*types.Transaction, error) {
	return _WERC721.Contract.Mint(&_WERC721.TransactOpts, _to, _data)
}

// Mint is a paid mutator transaction binding the contract method 0xb510391f.
//
// Solidity: function mint(address _to, bytes _data) returns()
func (_WERC721 *WERC721TransactorSession) Mint(_to common.Address, _data []byte) (*types.Transaction, error) {
	return _WERC721.Contract.Mint(&_WERC721.TransactOpts, _to, _data)
}

// RenounceOwnership is a paid mutator transaction binding the contract method 0x715018a6.
//
// Solidity: function renounceOwnership() returns()
func (_WERC721 *WERC721Transactor) RenounceOwnership(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _WERC721.contract.Transact(opts, "renounceOwnership")
}

// RenounceOwnership is a paid mutator transaction binding the contract method 0x715018a6.
//
// Solidity: function renounceOwnership() returns()
func (_WERC721 *WERC721Session) RenounceOwnership() (*types.Transaction, error) {
	return _WERC721.Contract.RenounceOwnership(&_WERC721.TransactOpts)
}

// RenounceOwnership is a paid mutator transaction binding the contract method 0x715018a6.
//
// Solidity: function renounceOwnership() returns()
func (_WERC721 *WERC721TransactorSession) RenounceOwnership() (*types.Transaction, error) {
	return _WERC721.Contract.RenounceOwnership(&_WERC721.TransactOpts)
}

// SafeTransferFrom is a paid mutator transaction binding the contract method 0x42842e0e.
//
// Solidity: function safeTransferFrom(address from, address to, uint256 tokenId) returns()
func (_WERC721 *WERC721Transactor) SafeTransferFrom(opts *bind.TransactOpts, from common.Address, to common.Address, tokenId *big.Int) (*types.Transaction, error) {
	return _WERC721.contract.Transact(opts, "safeTransferFrom", from, to, tokenId)
}

// SafeTransferFrom is a paid mutator transaction binding the contract method 0x42842e0e.
//
// Solidity: function safeTransferFrom(address from, address to, uint256 tokenId) returns()
func (_WERC721 *WERC721Session) SafeTransferFrom(from common.Address, to common.Address, tokenId *big.Int) (*types.Transaction, error) {
	return _WERC721.Contract.SafeTransferFrom(&_WERC721.TransactOpts, from, to, tokenId)
}

// SafeTransferFrom is a paid mutator transaction binding the contract method 0x42842e0e.
//
// Solidity: function safeTransferFrom(address from, address to, uint256 tokenId) returns()
func (_WERC721 *WERC721TransactorSession) SafeTransferFrom(from common.Address, to common.Address, tokenId *big.Int) (*types.Transaction, error) {
	return _WERC721.Contract.SafeTransferFrom(&_WERC721.TransactOpts, from, to, tokenId)
}

// SafeTransferFrom0 is a paid mutator transaction binding the contract method 0xb88d4fde.
//
// Solidity: function safeTransferFrom(address from, address to, uint256 tokenId, bytes _data) returns()
func (_WERC721 *WERC721Transactor) SafeTransferFrom0(opts *bind.TransactOpts, from common.Address, to common.Address, tokenId *big.Int, _data []byte) (*types.Transaction, error) {
	return _WERC721.contract.Transact(opts, "safeTransferFrom0", from, to, tokenId, _data)
}

// SafeTransferFrom0 is a paid mutator transaction binding the contract method 0xb88d4fde.
//
// Solidity: function safeTransferFrom(address from, address to, uint256 tokenId, bytes _data) returns()
func (_WERC721 *WERC721Session) SafeTransferFrom0(from common.Address, to common.Address, tokenId *big.Int, _data []byte) (*types.Transaction, error) {
	return _WERC721.Contract.SafeTransferFrom0(&_WERC721.TransactOpts, from, to, tokenId, _data)
}

// SafeTransferFrom0 is a paid mutator transaction binding the contract method 0xb88d4fde.
//
// Solidity: function safeTransferFrom(address from, address to, uint256 tokenId, bytes _data) returns()
func (_WERC721 *WERC721TransactorSession) SafeTransferFrom0(from common.Address, to common.Address, tokenId *big.Int, _data []byte) (*types.Transaction, error) {
	return _WERC721.Contract.SafeTransferFrom0(&_WERC721.TransactOpts, from, to, tokenId, _data)
}

// SetApprovalForAll is a paid mutator transaction binding the contract method 0xa22cb465.
//
// Solidity: function setApprovalForAll(address operator, bool approved) returns()
func (_WERC721 *WERC721Transactor) SetApprovalForAll(opts *bind.TransactOpts, operator common.Address, approved bool) (*types.Transaction, error) {
	return _WERC721.contract.Transact(opts, "setApprovalForAll", operator, approved)
}

// SetApprovalForAll is a paid mutator transaction binding the contract method 0xa22cb465.
//
// Solidity: function setApprovalForAll(address operator, bool approved) returns()
func (_WERC721 *WERC721Session) SetApprovalForAll(operator common.Address, approved bool) (*types.Transaction, error) {
	return _WERC721.Contract.SetApprovalForAll(&_WERC721.TransactOpts, operator, approved)
}

// SetApprovalForAll is a paid mutator transaction binding the contract method 0xa22cb465.
//
// Solidity: function setApprovalForAll(address operator, bool approved) returns()
func (_WERC721 *WERC721TransactorSession) SetApprovalForAll(operator common.Address, approved bool) (*types.Transaction, error) {
	return _WERC721.Contract.SetApprovalForAll(&_WERC721.TransactOpts, operator, approved)
}

// SwitchUserPermissions is a paid mutator transaction binding the contract method 0x48065fa6.
//
// Solidity: function switchUserPermissions(address _user) returns()
func (_WERC721 *WERC721Transactor) SwitchUserPermissions(opts *bind.TransactOpts, _user common.Address) (*types.Transaction, error) {
	return _WERC721.contract.Transact(opts, "switchUserPermissions", _user)
}

// SwitchUserPermissions is a paid mutator transaction binding the contract method 0x48065fa6.
//
// Solidity: function switchUserPermissions(address _user) returns()
func (_WERC721 *WERC721Session) SwitchUserPermissions(_user common.Address) (*types.Transaction, error) {
	return _WERC721.Contract.SwitchUserPermissions(&_WERC721.TransactOpts, _user)
}

// SwitchUserPermissions is a paid mutator transaction binding the contract method 0x48065fa6.
//
// Solidity: function switchUserPermissions(address _user) returns()
func (_WERC721 *WERC721TransactorSession) SwitchUserPermissions(_user common.Address) (*types.Transaction, error) {
	return _WERC721.Contract.SwitchUserPermissions(&_WERC721.TransactOpts, _user)
}

// TransferFrom is a paid mutator transaction binding the contract method 0x23b872dd.
//
// Solidity: function transferFrom(address from, address to, uint256 tokenId) returns()
func (_WERC721 *WERC721Transactor) TransferFrom(opts *bind.TransactOpts, from common.Address, to common.Address, tokenId *big.Int) (*types.Transaction, error) {
	return _WERC721.contract.Transact(opts, "transferFrom", from, to, tokenId)
}

// TransferFrom is a paid mutator transaction binding the contract method 0x23b872dd.
//
// Solidity: function transferFrom(address from, address to, uint256 tokenId) returns()
func (_WERC721 *WERC721Session) TransferFrom(from common.Address, to common.Address, tokenId *big.Int) (*types.Transaction, error) {
	return _WERC721.Contract.TransferFrom(&_WERC721.TransactOpts, from, to, tokenId)
}

// TransferFrom is a paid mutator transaction binding the contract method 0x23b872dd.
//
// Solidity: function transferFrom(address from, address to, uint256 tokenId) returns()
func (_WERC721 *WERC721TransactorSession) TransferFrom(from common.Address, to common.Address, tokenId *big.Int) (*types.Transaction, error) {
	return _WERC721.Contract.TransferFrom(&_WERC721.TransactOpts, from, to, tokenId)
}

// TransferOwnership is a paid mutator transaction binding the contract method 0xf2fde38b.
//
// Solidity: function transferOwnership(address newOwner) returns()
func (_WERC721 *WERC721Transactor) TransferOwnership(opts *bind.TransactOpts, newOwner common.Address) (*types.Transaction, error) {
	return _WERC721.contract.Transact(opts, "transferOwnership", newOwner)
}

// TransferOwnership is a paid mutator transaction binding the contract method 0xf2fde38b.
//
// Solidity: function transferOwnership(address newOwner) returns()
func (_WERC721 *WERC721Session) TransferOwnership(newOwner common.Address) (*types.Transaction, error) {
	return _WERC721.Contract.TransferOwnership(&_WERC721.TransactOpts, newOwner)
}

// TransferOwnership is a paid mutator transaction binding the contract method 0xf2fde38b.
//
// Solidity: function transferOwnership(address newOwner) returns()
func (_WERC721 *WERC721TransactorSession) TransferOwnership(newOwner common.Address) (*types.Transaction, error) {
	return _WERC721.Contract.TransferOwnership(&_WERC721.TransactOpts, newOwner)
}

// WERC721ApprovalIterator is returned from FilterApproval and is used to iterate over the raw logs and unpacked data for Approval events raised by the WERC721 contract.
type WERC721ApprovalIterator struct {
	Event *WERC721Approval // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *WERC721ApprovalIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(WERC721Approval)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(WERC721Approval)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *WERC721ApprovalIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *WERC721ApprovalIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// WERC721Approval represents a Approval event raised by the WERC721 contract.
type WERC721Approval struct {
	Owner    common.Address
	Approved common.Address
	TokenId  *big.Int
	Raw      types.Log // Blockchain specific contextual infos
}

// FilterApproval is a free log retrieval operation binding the contract event 0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925.
//
// Solidity: event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId)
func (_WERC721 *WERC721Filterer) FilterApproval(opts *bind.FilterOpts, owner []common.Address, approved []common.Address, tokenId []*big.Int) (*WERC721ApprovalIterator, error) {

	var ownerRule []interface{}
	for _, ownerItem := range owner {
		ownerRule = append(ownerRule, ownerItem)
	}
	var approvedRule []interface{}
	for _, approvedItem := range approved {
		approvedRule = append(approvedRule, approvedItem)
	}
	var tokenIdRule []interface{}
	for _, tokenIdItem := range tokenId {
		tokenIdRule = append(tokenIdRule, tokenIdItem)
	}

	logs, sub, err := _WERC721.contract.FilterLogs(opts, "Approval", ownerRule, approvedRule, tokenIdRule)
	if err != nil {
		return nil, err
	}
	return &WERC721ApprovalIterator{contract: _WERC721.contract, event: "Approval", logs: logs, sub: sub}, nil
}

// WatchApproval is a free log subscription operation binding the contract event 0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925.
//
// Solidity: event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId)
func (_WERC721 *WERC721Filterer) WatchApproval(opts *bind.WatchOpts, sink chan<- *WERC721Approval, owner []common.Address, approved []common.Address, tokenId []*big.Int) (event.Subscription, error) {

	var ownerRule []interface{}
	for _, ownerItem := range owner {
		ownerRule = append(ownerRule, ownerItem)
	}
	var approvedRule []interface{}
	for _, approvedItem := range approved {
		approvedRule = append(approvedRule, approvedItem)
	}
	var tokenIdRule []interface{}
	for _, tokenIdItem := range tokenId {
		tokenIdRule = append(tokenIdRule, tokenIdItem)
	}

	logs, sub, err := _WERC721.contract.WatchLogs(opts, "Approval", ownerRule, approvedRule, tokenIdRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(WERC721Approval)
				if err := _WERC721.contract.UnpackLog(event, "Approval", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseApproval is a log parse operation binding the contract event 0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925.
//
// Solidity: event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId)
func (_WERC721 *WERC721Filterer) ParseApproval(log types.Log) (*WERC721Approval, error) {
	event := new(WERC721Approval)
	if err := _WERC721.contract.UnpackLog(event, "Approval", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// WERC721ApprovalForAllIterator is returned from FilterApprovalForAll and is used to iterate over the raw logs and unpacked data for ApprovalForAll events raised by the WERC721 contract.
type WERC721ApprovalForAllIterator struct {
	Event *WERC721ApprovalForAll // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *WERC721ApprovalForAllIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(WERC721ApprovalForAll)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(WERC721ApprovalForAll)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *WERC721ApprovalForAllIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *WERC721ApprovalForAllIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// WERC721ApprovalForAll represents a ApprovalForAll event raised by the WERC721 contract.
type WERC721ApprovalForAll struct {
	Owner    common.Address
	Operator common.Address
	Approved bool
	Raw      types.Log // Blockchain specific contextual infos
}

// FilterApprovalForAll is a free log retrieval operation binding the contract event 0x17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31.
//
// Solidity: event ApprovalForAll(address indexed owner, address indexed operator, bool approved)
func (_WERC721 *WERC721Filterer) FilterApprovalForAll(opts *bind.FilterOpts, owner []common.Address, operator []common.Address) (*WERC721ApprovalForAllIterator, error) {

	var ownerRule []interface{}
	for _, ownerItem := range owner {
		ownerRule = append(ownerRule, ownerItem)
	}
	var operatorRule []interface{}
	for _, operatorItem := range operator {
		operatorRule = append(operatorRule, operatorItem)
	}

	logs, sub, err := _WERC721.contract.FilterLogs(opts, "ApprovalForAll", ownerRule, operatorRule)
	if err != nil {
		return nil, err
	}
	return &WERC721ApprovalForAllIterator{contract: _WERC721.contract, event: "ApprovalForAll", logs: logs, sub: sub}, nil
}

// WatchApprovalForAll is a free log subscription operation binding the contract event 0x17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31.
//
// Solidity: event ApprovalForAll(address indexed owner, address indexed operator, bool approved)
func (_WERC721 *WERC721Filterer) WatchApprovalForAll(opts *bind.WatchOpts, sink chan<- *WERC721ApprovalForAll, owner []common.Address, operator []common.Address) (event.Subscription, error) {

	var ownerRule []interface{}
	for _, ownerItem := range owner {
		ownerRule = append(ownerRule, ownerItem)
	}
	var operatorRule []interface{}
	for _, operatorItem := range operator {
		operatorRule = append(operatorRule, operatorItem)
	}

	logs, sub, err := _WERC721.contract.WatchLogs(opts, "ApprovalForAll", ownerRule, operatorRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(WERC721ApprovalForAll)
				if err := _WERC721.contract.UnpackLog(event, "ApprovalForAll", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseApprovalForAll is a log parse operation binding the contract event 0x17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31.
//
// Solidity: event ApprovalForAll(address indexed owner, address indexed operator, bool approved)
func (_WERC721 *WERC721Filterer) ParseApprovalForAll(log types.Log) (*WERC721ApprovalForAll, error) {
	event := new(WERC721ApprovalForAll)
	if err := _WERC721.contract.UnpackLog(event, "ApprovalForAll", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// WERC721OwnershipTransferredIterator is returned from FilterOwnershipTransferred and is used to iterate over the raw logs and unpacked data for OwnershipTransferred events raised by the WERC721 contract.
type WERC721OwnershipTransferredIterator struct {
	Event *WERC721OwnershipTransferred // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *WERC721OwnershipTransferredIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(WERC721OwnershipTransferred)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(WERC721OwnershipTransferred)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *WERC721OwnershipTransferredIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *WERC721OwnershipTransferredIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// WERC721OwnershipTransferred represents a OwnershipTransferred event raised by the WERC721 contract.
type WERC721OwnershipTransferred struct {
	PreviousOwner common.Address
	NewOwner      common.Address
	Raw           types.Log // Blockchain specific contextual infos
}

// FilterOwnershipTransferred is a free log retrieval operation binding the contract event 0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0.
//
// Solidity: event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)
func (_WERC721 *WERC721Filterer) FilterOwnershipTransferred(opts *bind.FilterOpts, previousOwner []common.Address, newOwner []common.Address) (*WERC721OwnershipTransferredIterator, error) {

	var previousOwnerRule []interface{}
	for _, previousOwnerItem := range previousOwner {
		previousOwnerRule = append(previousOwnerRule, previousOwnerItem)
	}
	var newOwnerRule []interface{}
	for _, newOwnerItem := range newOwner {
		newOwnerRule = append(newOwnerRule, newOwnerItem)
	}

	logs, sub, err := _WERC721.contract.FilterLogs(opts, "OwnershipTransferred", previousOwnerRule, newOwnerRule)
	if err != nil {
		return nil, err
	}
	return &WERC721OwnershipTransferredIterator{contract: _WERC721.contract, event: "OwnershipTransferred", logs: logs, sub: sub}, nil
}

// WatchOwnershipTransferred is a free log subscription operation binding the contract event 0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0.
//
// Solidity: event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)
func (_WERC721 *WERC721Filterer) WatchOwnershipTransferred(opts *bind.WatchOpts, sink chan<- *WERC721OwnershipTransferred, previousOwner []common.Address, newOwner []common.Address) (event.Subscription, error) {

	var previousOwnerRule []interface{}
	for _, previousOwnerItem := range previousOwner {
		previousOwnerRule = append(previousOwnerRule, previousOwnerItem)
	}
	var newOwnerRule []interface{}
	for _, newOwnerItem := range newOwner {
		newOwnerRule = append(newOwnerRule, newOwnerItem)
	}

	logs, sub, err := _WERC721.contract.WatchLogs(opts, "OwnershipTransferred", previousOwnerRule, newOwnerRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(WERC721OwnershipTransferred)
				if err := _WERC721.contract.UnpackLog(event, "OwnershipTransferred", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseOwnershipTransferred is a log parse operation binding the contract event 0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0.
//
// Solidity: event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)
func (_WERC721 *WERC721Filterer) ParseOwnershipTransferred(log types.Log) (*WERC721OwnershipTransferred, error) {
	event := new(WERC721OwnershipTransferred)
	if err := _WERC721.contract.UnpackLog(event, "OwnershipTransferred", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// WERC721TransferIterator is returned from FilterTransfer and is used to iterate over the raw logs and unpacked data for Transfer events raised by the WERC721 contract.
type WERC721TransferIterator struct {
	Event *WERC721Transfer // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *WERC721TransferIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(WERC721Transfer)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(WERC721Transfer)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *WERC721TransferIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *WERC721TransferIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// WERC721Transfer represents a Transfer event raised by the WERC721 contract.
type WERC721Transfer struct {
	From    common.Address
	To      common.Address
	TokenId *big.Int
	Raw     types.Log // Blockchain specific contextual infos
}

// FilterTransfer is a free log retrieval operation binding the contract event 0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef.
//
// Solidity: event Transfer(address indexed from, address indexed to, uint256 indexed tokenId)
func (_WERC721 *WERC721Filterer) FilterTransfer(opts *bind.FilterOpts, from []common.Address, to []common.Address, tokenId []*big.Int) (*WERC721TransferIterator, error) {

	var fromRule []interface{}
	for _, fromItem := range from {
		fromRule = append(fromRule, fromItem)
	}
	var toRule []interface{}
	for _, toItem := range to {
		toRule = append(toRule, toItem)
	}
	var tokenIdRule []interface{}
	for _, tokenIdItem := range tokenId {
		tokenIdRule = append(tokenIdRule, tokenIdItem)
	}

	logs, sub, err := _WERC721.contract.FilterLogs(opts, "Transfer", fromRule, toRule, tokenIdRule)
	if err != nil {
		return nil, err
	}
	return &WERC721TransferIterator{contract: _WERC721.contract, event: "Transfer", logs: logs, sub: sub}, nil
}

// WatchTransfer is a free log subscription operation binding the contract event 0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef.
//
// Solidity: event Transfer(address indexed from, address indexed to, uint256 indexed tokenId)
func (_WERC721 *WERC721Filterer) WatchTransfer(opts *bind.WatchOpts, sink chan<- *WERC721Transfer, from []common.Address, to []common.Address, tokenId []*big.Int) (event.Subscription, error) {

	var fromRule []interface{}
	for _, fromItem := range from {
		fromRule = append(fromRule, fromItem)
	}
	var toRule []interface{}
	for _, toItem := range to {
		toRule = append(toRule, toItem)
	}
	var tokenIdRule []interface{}
	for _, tokenIdItem := range tokenId {
		tokenIdRule = append(tokenIdRule, tokenIdItem)
	}

	logs, sub, err := _WERC721.contract.WatchLogs(opts, "Transfer", fromRule, toRule, tokenIdRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(WERC721Transfer)
				if err := _WERC721.contract.UnpackLog(event, "Transfer", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseTransfer is a log parse operation binding the contract event 0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef.
//
// Solidity: event Transfer(address indexed from, address indexed to, uint256 indexed tokenId)
func (_WERC721 *WERC721Filterer) ParseTransfer(log types.Log) (*WERC721Transfer, error) {
	event := new(WERC721Transfer)
	if err := _WERC721.contract.UnpackLog(event, "Transfer", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// Code generated - DO NOT EDIT.
// This file is a generated binding and any manual changes will be lost.

package generated

import (
	"math/big"
	"strings"

	ethereum "github.com/ethereum/go-ethereum"
	"github.com/ethereum/go-ethereum/accounts/abi"
	"github.com/ethereum/go-ethereum/accounts/abi/bind"
	"github.com/ethereum/go-ethereum/common"
	"github.com/ethereum/go-ethereum/core/types"
	"github.com/ethereum/go-ethereum/event"
)

// Reference imports to suppress errors if they are not otherwise used.
var (
	_ = big.NewInt
	_ = strings.NewReader
	_ = ethereum.NotFound
	_ = bind.Bind
	_ = common.Big1
	_ = types.BloomLookup
	_ = event.NewSubscription
)

// WERC721ABI is the input ABI used to generate the binding from.
const WERC721ABI = "[{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_eligibleUsers\",\"type\":\"address[]\"},{\"internalType\":\"string\",\"name\":\"_name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_symbol\",\"type\":\"string\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"approved\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getApproved\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"_data\",\"type\":\"string\"}],\"name\":\"mint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"switchUserPermissions\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"tokenURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"tokensData\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_ownerOfTokens\",\"type\":\"address\"}],\"name\":\"tokensOfOwner\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]"

// WERC721Bin is the compiled bytecode used for deploying new contracts.
var WERC721Bin = "0x60806040523480156200001157600080fd5b5060405162003adf38038062003adf83398181016040528101906200003791906200041e565b818160006200004b6200023b60201b60201c565b9050806000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508073ffffffffffffffffffffffffffffffffffffffff16600073ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35081600190805190602001906200010192919062000243565b5080600290805190602001906200011a92919062000243565b5050506001600760003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff02191690831515021790555060005b83518110156200023157600160076000868481518110620001c2577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b602002602001015173ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff021916908315150217905550808062000228906200062d565b91505062000178565b5050505062000733565b600033905090565b8280546200025190620005c1565b90600052602060002090601f016020900481019282620002755760008555620002c1565b82601f106200029057805160ff1916838001178555620002c1565b82800160010185558215620002c1579182015b82811115620002c0578251825591602001919060010190620002a3565b5b509050620002d09190620002d4565b5090565b5b80821115620002ef576000816000905550600101620002d5565b5090565b60006200030a6200030484620004e8565b620004bf565b905080838252602082019050828560208602820111156200032a57600080fd5b60005b858110156200035e5781620003438882620003ad565b8452602084019350602083019250506001810190506200032d565b5050509392505050565b60006200037f620003798462000517565b620004bf565b9050828152602081018484840111156200039857600080fd5b620003a58482856200058b565b509392505050565b600081519050620003be8162000719565b92915050565b600082601f830112620003d657600080fd5b8151620003e8848260208601620002f3565b91505092915050565b600082601f8301126200040357600080fd5b81516200041584826020860162000368565b91505092915050565b6000806000606084860312156200043457600080fd5b600084015167ffffffffffffffff8111156200044f57600080fd5b6200045d86828701620003c4565b935050602084015167ffffffffffffffff8111156200047b57600080fd5b6200048986828701620003f1565b925050604084015167ffffffffffffffff811115620004a757600080fd5b620004b586828701620003f1565b9150509250925092565b6000620004cb620004de565b9050620004d98282620005f7565b919050565b6000604051905090565b600067ffffffffffffffff821115620005065762000505620006d9565b5b602082029050602081019050919050565b600067ffffffffffffffff821115620005355762000534620006d9565b5b620005408262000708565b9050602081019050919050565b60006200055a8262000561565b9050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b60005b83811015620005ab5780820151818401526020810190506200058e565b83811115620005bb576000848401525b50505050565b60006002820490506001821680620005da57607f821691505b60208210811415620005f157620005f0620006aa565b5b50919050565b620006028262000708565b810181811067ffffffffffffffff82111715620006245762000623620006d9565b5b80604052505050565b60006200063a8262000581565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82141562000670576200066f6200067b565b5b600182019050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6000601f19601f8301169050919050565b62000724816200054d565b81146200073057600080fd5b50565b61339c80620007436000396000f3fe608060405234801561001057600080fd5b50600436106101375760003560e01c806370a08231116100b8578063a22cb4651161007c578063a22cb4651461034e578063b88d4fde1461036a578063c87b56dd14610386578063d0def521146103b6578063e985e9c5146103d2578063f2fde38b1461040257610137565b806370a08231146102a8578063715018a6146102d85780638462151c146102e25780638da5cb5b1461031257806395d89b411461033057610137565b806323b872dd116100ff57806323b872dd146101f457806342842e0e1461021057806348065fa61461022c578063599ed3ff146102485780636352211e1461027857610137565b806301ffc9a71461013c57806306fdde031461016c578063081812fc1461018a578063095ea7b3146101ba57806318160ddd146101d6575b600080fd5b61015660048036038101906101519190612323565b61041e565b60405161016391906127f3565b60405180910390f35b610174610500565b604051610181919061280e565b60405180910390f35b6101a4600480360381019061019f9190612375565b610592565b6040516101b1919061276a565b60405180910390f35b6101d460048036038101906101cf91906122e7565b610617565b005b6101de61072f565b6040516101eb9190612a50565b60405180910390f35b61020e6004803603810190610209919061218d565b610735565b005b61022a6004803603810190610225919061218d565b610795565b005b61024660048036038101906102419190612128565b6107b5565b005b610262600480360381019061025d9190612375565b6108d8565b60405161026f919061280e565b60405180910390f35b610292600480360381019061028d9190612375565b610978565b60405161029f919061276a565b60405180910390f35b6102c260048036038101906102bd9190612128565b610a2a565b6040516102cf9190612a50565b60405180910390f35b6102e0610ae2565b005b6102fc60048036038101906102f79190612128565b610c1c565b60405161030991906127d1565b60405180910390f35b61031a610de7565b604051610327919061276a565b60405180910390f35b610338610e10565b604051610345919061280e565b60405180910390f35b61036860048036038101906103639190612257565b610ea2565b005b610384600480360381019061037f91906121dc565b611023565b005b6103a0600480360381019061039b9190612375565b611085565b6040516103ad919061280e565b60405180910390f35b6103d060048036038101906103cb9190612293565b61112c565b005b6103ec60048036038101906103e79190612151565b611212565b6040516103f991906127f3565b60405180910390f35b61041c60048036038101906104179190612128565b6112a6565b005b60007f80ac58cd000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff191614806104e957507f5b5e139f000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916145b806104f957506104f88261144f565b5b9050919050565b60606001805461050f90612cdf565b80601f016020809104026020016040519081016040528092919081815260200182805461053b90612cdf565b80156105885780601f1061055d57610100808354040283529160200191610588565b820191906000526020600020905b81548152906001019060200180831161056b57829003601f168201915b5050505050905090565b600061059d826114b9565b6105dc576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016105d390612990565b60405180910390fd5b6005600083815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b600061062282610978565b90508073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff161415610693576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161068a90612a10565b60405180910390fd5b8073ffffffffffffffffffffffffffffffffffffffff166106b2611525565b73ffffffffffffffffffffffffffffffffffffffff1614806106e157506106e0816106db611525565b611212565b5b610720576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161071790612910565b60405180910390fd5b61072a838361152d565b505050565b60095481565b610746610740611525565b826115e6565b610785576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161077c90612a30565b60405180910390fd5b6107908383836116c4565b505050565b6107b083838360405180602001604052806000815250611023565b505050565b6107bd611525565b73ffffffffffffffffffffffffffffffffffffffff166107db610de7565b73ffffffffffffffffffffffffffffffffffffffff1614610831576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610828906129b0565b60405180910390fd5b600760008273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff1615600760008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff02191690831515021790555050565b600860205280600052604060002060009150905080546108f790612cdf565b80601f016020809104026020016040519081016040528092919081815260200182805461092390612cdf565b80156109705780601f1061094557610100808354040283529160200191610970565b820191906000526020600020905b81548152906001019060200180831161095357829003601f168201915b505050505081565b6000806003600084815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161415610a21576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610a1890612950565b60405180910390fd5b80915050919050565b60008073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff161415610a9b576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610a9290612930565b60405180910390fd5b600460008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b610aea611525565b73ffffffffffffffffffffffffffffffffffffffff16610b08610de7565b73ffffffffffffffffffffffffffffffffffffffff1614610b5e576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610b55906129b0565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff1660008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a360008060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550565b60606000610c2983610a2a565b90506000811415610cac57600067ffffffffffffffff811115610c75577f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b604051908082528060200260200182016040528015610ca35781602001602082028036833780820191505090505b50915050610de2565b60008167ffffffffffffffff811115610cee577f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b604051908082528060200260200182016040528015610d1c5781602001602082028036833780820191505090505b50905060006009549050600080600190505b828111610dd9578673ffffffffffffffffffffffffffffffffffffffff16610d5582610978565b73ffffffffffffffffffffffffffffffffffffffff161415610dc65780848381518110610dab577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b6020026020010181815250508180610dc290612d42565b9250505b8080610dd190612d42565b915050610d2e565b50829450505050505b919050565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b606060028054610e1f90612cdf565b80601f0160208091040260200160405190810160405280929190818152602001828054610e4b90612cdf565b8015610e985780601f10610e6d57610100808354040283529160200191610e98565b820191906000526020600020905b815481529060010190602001808311610e7b57829003601f168201915b5050505050905090565b610eaa611525565b73ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff161415610f18576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610f0f906128d0565b60405180910390fd5b8060066000610f25611525565b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055508173ffffffffffffffffffffffffffffffffffffffff16610fd2611525565b73ffffffffffffffffffffffffffffffffffffffff167f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c318360405161101791906127f3565b60405180910390a35050565b61103461102e611525565b836115e6565b611073576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161106a90612a30565b60405180910390fd5b61107f84848484611920565b50505050565b6060611090826114b9565b6110cf576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016110c6906129f0565b60405180910390fd5b60006110d961197c565b905060008151116110f95760405180602001604052806000815250611124565b8061110384611993565b604051602001611114929190612746565b6040516020818303038152906040525b915050919050565b33600760008273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff166111b9576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016111b090612870565b60405180910390fd5b60006111d16001600954611b4090919063ffffffff16565b90508060098190555082600860008381526020019081526020016000209080519060200190611201929190611f4c565b5061120c8482611b56565b50505050565b6000600660008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16905092915050565b6112ae611525565b73ffffffffffffffffffffffffffffffffffffffff166112cc610de7565b73ffffffffffffffffffffffffffffffffffffffff1614611322576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611319906129b0565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161415611392576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161138990612850565b60405180910390fd5b8073ffffffffffffffffffffffffffffffffffffffff1660008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a3806000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b60007f01ffc9a7000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916149050919050565b60008073ffffffffffffffffffffffffffffffffffffffff166003600084815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614159050919050565b600033905090565b816005600083815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550808273ffffffffffffffffffffffffffffffffffffffff166115a083610978565b73ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92560405160405180910390a45050565b60006115f1826114b9565b611630576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611627906128f0565b60405180910390fd5b600061163b83610978565b90508073ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff1614806116aa57508373ffffffffffffffffffffffffffffffffffffffff1661169284610592565b73ffffffffffffffffffffffffffffffffffffffff16145b806116bb57506116ba8185611212565b5b91505092915050565b8273ffffffffffffffffffffffffffffffffffffffff166116e482610978565b73ffffffffffffffffffffffffffffffffffffffff161461173a576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611731906129d0565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1614156117aa576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016117a1906128b0565b60405180910390fd5b6117b5838383611b74565b6117c060008261152d565b6001600460008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282546118109190612bf5565b925050819055506001600460008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282546118679190612b6e565b92505081905550816003600083815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550808273ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef60405160405180910390a4505050565b61192b8484846116c4565b61193784848484611b79565b611976576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161196d90612830565b60405180910390fd5b50505050565b606060405180602001604052806000815250905090565b606060008214156119db576040518060400160405280600181526020017f30000000000000000000000000000000000000000000000000000000000000008152509050611b3b565b600082905060005b60008214611a0d5780806119f690612d42565b915050600a82611a069190612bc4565b91506119e3565b60008167ffffffffffffffff811115611a4f577f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6040519080825280601f01601f191660200182016040528015611a815781602001600182028036833780820191505090505b5090505b60008514611b3457600182611a9a9190612bf5565b9150600a85611aa99190612d8b565b6030611ab59190612b6e565b60f81b818381518110611af1577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a905350600a85611b2d9190612bc4565b9450611a85565b8093505050505b919050565b60008183611b4e9190612b6e565b905092915050565b611b70828260405180602001604052806000815250611d10565b5050565b505050565b6000611b9a8473ffffffffffffffffffffffffffffffffffffffff16611d6b565b15611d03578373ffffffffffffffffffffffffffffffffffffffff1663150b7a02611bc3611525565b8786866040518563ffffffff1660e01b8152600401611be59493929190612785565b602060405180830381600087803b158015611bff57600080fd5b505af1925050508015611c3057506040513d601f19601f82011682018060405250810190611c2d919061234c565b60015b611cb3573d8060008114611c60576040519150601f19603f3d011682016040523d82523d6000602084013e611c65565b606091505b50600081511415611cab576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611ca290612830565b60405180910390fd5b805181602001fd5b63150b7a0260e01b7bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916817bffffffffffffffffffffffffffffffffffffffffffffffffffffffff191614915050611d08565b600190505b949350505050565b611d1a8383611d7e565b611d276000848484611b79565b611d66576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611d5d90612830565b60405180910390fd5b505050565b600080823b905060008111915050919050565b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff161415611dee576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611de590612970565b60405180910390fd5b611df7816114b9565b15611e37576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611e2e90612890565b60405180910390fd5b611e4360008383611b74565b6001600460008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000828254611e939190612b6e565b92505081905550816003600083815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550808273ffffffffffffffffffffffffffffffffffffffff16600073ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef60405160405180910390a45050565b828054611f5890612cdf565b90600052602060002090601f016020900481019282611f7a5760008555611fc1565b82601f10611f9357805160ff1916838001178555611fc1565b82800160010185558215611fc1579182015b82811115611fc0578251825591602001919060010190611fa5565b5b509050611fce9190611fd2565b5090565b5b80821115611feb576000816000905550600101611fd3565b5090565b6000612002611ffd84612a90565b612a6b565b90508281526020810184848401111561201a57600080fd5b612025848285612c9d565b509392505050565b600061204061203b84612ac1565b612a6b565b90508281526020810184848401111561205857600080fd5b612063848285612c9d565b509392505050565b60008135905061207a8161330a565b92915050565b60008135905061208f81613321565b92915050565b6000813590506120a481613338565b92915050565b6000815190506120b981613338565b92915050565b600082601f8301126120d057600080fd5b81356120e0848260208601611fef565b91505092915050565b600082601f8301126120fa57600080fd5b813561210a84826020860161202d565b91505092915050565b6000813590506121228161334f565b92915050565b60006020828403121561213a57600080fd5b60006121488482850161206b565b91505092915050565b6000806040838503121561216457600080fd5b60006121728582860161206b565b92505060206121838582860161206b565b9150509250929050565b6000806000606084860312156121a257600080fd5b60006121b08682870161206b565b93505060206121c18682870161206b565b92505060406121d286828701612113565b9150509250925092565b600080600080608085870312156121f257600080fd5b60006122008782880161206b565b94505060206122118782880161206b565b935050604061222287828801612113565b925050606085013567ffffffffffffffff81111561223f57600080fd5b61224b878288016120bf565b91505092959194509250565b6000806040838503121561226a57600080fd5b60006122788582860161206b565b925050602061228985828601612080565b9150509250929050565b600080604083850312156122a657600080fd5b60006122b48582860161206b565b925050602083013567ffffffffffffffff8111156122d157600080fd5b6122dd858286016120e9565b9150509250929050565b600080604083850312156122fa57600080fd5b60006123088582860161206b565b925050602061231985828601612113565b9150509250929050565b60006020828403121561233557600080fd5b600061234384828501612095565b91505092915050565b60006020828403121561235e57600080fd5b600061236c848285016120aa565b91505092915050565b60006020828403121561238757600080fd5b600061239584828501612113565b91505092915050565b60006123aa8383612728565b60208301905092915050565b6123bf81612c29565b82525050565b60006123d082612b02565b6123da8185612b30565b93506123e583612af2565b8060005b838110156124165781516123fd888261239e565b975061240883612b23565b9250506001810190506123e9565b5085935050505092915050565b61242c81612c3b565b82525050565b600061243d82612b0d565b6124478185612b41565b9350612457818560208601612cac565b61246081612e78565b840191505092915050565b600061247682612b18565b6124808185612b52565b9350612490818560208601612cac565b61249981612e78565b840191505092915050565b60006124af82612b18565b6124b98185612b63565b93506124c9818560208601612cac565b80840191505092915050565b60006124e2603283612b52565b91506124ed82612e89565b604082019050919050565b6000612505602683612b52565b915061251082612ed8565b604082019050919050565b6000612528601483612b52565b915061253382612f27565b602082019050919050565b600061254b601c83612b52565b915061255682612f50565b602082019050919050565b600061256e602483612b52565b915061257982612f79565b604082019050919050565b6000612591601983612b52565b915061259c82612fc8565b602082019050919050565b60006125b4602c83612b52565b91506125bf82612ff1565b604082019050919050565b60006125d7603883612b52565b91506125e282613040565b604082019050919050565b60006125fa602a83612b52565b91506126058261308f565b604082019050919050565b600061261d602983612b52565b9150612628826130de565b604082019050919050565b6000612640602083612b52565b915061264b8261312d565b602082019050919050565b6000612663602c83612b52565b915061266e82613156565b604082019050919050565b6000612686602083612b52565b9150612691826131a5565b602082019050919050565b60006126a9602983612b52565b91506126b4826131ce565b604082019050919050565b60006126cc602f83612b52565b91506126d78261321d565b604082019050919050565b60006126ef602183612b52565b91506126fa8261326c565b604082019050919050565b6000612712603183612b52565b915061271d826132bb565b604082019050919050565b61273181612c93565b82525050565b61274081612c93565b82525050565b600061275282856124a4565b915061275e82846124a4565b91508190509392505050565b600060208201905061277f60008301846123b6565b92915050565b600060808201905061279a60008301876123b6565b6127a760208301866123b6565b6127b46040830185612737565b81810360608301526127c68184612432565b905095945050505050565b600060208201905081810360008301526127eb81846123c5565b905092915050565b60006020820190506128086000830184612423565b92915050565b60006020820190508181036000830152612828818461246b565b905092915050565b60006020820190508181036000830152612849816124d5565b9050919050565b60006020820190508181036000830152612869816124f8565b9050919050565b600060208201905081810360008301526128898161251b565b9050919050565b600060208201905081810360008301526128a98161253e565b9050919050565b600060208201905081810360008301526128c981612561565b9050919050565b600060208201905081810360008301526128e981612584565b9050919050565b60006020820190508181036000830152612909816125a7565b9050919050565b60006020820190508181036000830152612929816125ca565b9050919050565b60006020820190508181036000830152612949816125ed565b9050919050565b6000602082019050818103600083015261296981612610565b9050919050565b6000602082019050818103600083015261298981612633565b9050919050565b600060208201905081810360008301526129a981612656565b9050919050565b600060208201905081810360008301526129c981612679565b9050919050565b600060208201905081810360008301526129e98161269c565b9050919050565b60006020820190508181036000830152612a09816126bf565b9050919050565b60006020820190508181036000830152612a29816126e2565b9050919050565b60006020820190508181036000830152612a4981612705565b9050919050565b6000602082019050612a656000830184612737565b92915050565b6000612a75612a86565b9050612a818282612d11565b919050565b6000604051905090565b600067ffffffffffffffff821115612aab57612aaa612e49565b5b612ab482612e78565b9050602081019050919050565b600067ffffffffffffffff821115612adc57612adb612e49565b5b612ae582612e78565b9050602081019050919050565b6000819050602082019050919050565b600081519050919050565b600081519050919050565b600081519050919050565b6000602082019050919050565b600082825260208201905092915050565b600082825260208201905092915050565b600082825260208201905092915050565b600081905092915050565b6000612b7982612c93565b9150612b8483612c93565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff03821115612bb957612bb8612dbc565b5b828201905092915050565b6000612bcf82612c93565b9150612bda83612c93565b925082612bea57612be9612deb565b5b828204905092915050565b6000612c0082612c93565b9150612c0b83612c93565b925082821015612c1e57612c1d612dbc565b5b828203905092915050565b6000612c3482612c73565b9050919050565b60008115159050919050565b60007fffffffff0000000000000000000000000000000000000000000000000000000082169050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b82818337600083830152505050565b60005b83811015612cca578082015181840152602081019050612caf565b83811115612cd9576000848401525b50505050565b60006002820490506001821680612cf757607f821691505b60208210811415612d0b57612d0a612e1a565b5b50919050565b612d1a82612e78565b810181811067ffffffffffffffff82111715612d3957612d38612e49565b5b80604052505050565b6000612d4d82612c93565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff821415612d8057612d7f612dbc565b5b600182019050919050565b6000612d9682612c93565b9150612da183612c93565b925082612db157612db0612deb565b5b828206905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6000601f19601f8301169050919050565b7f4552433732313a207472616e7366657220746f206e6f6e20455243373231526560008201527f63656976657220696d706c656d656e7465720000000000000000000000000000602082015250565b7f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160008201527f6464726573730000000000000000000000000000000000000000000000000000602082015250565b7f4973206e6f7420656c696769626c652075736572000000000000000000000000600082015250565b7f4552433732313a20746f6b656e20616c7265616479206d696e74656400000000600082015250565b7f4552433732313a207472616e7366657220746f20746865207a65726f2061646460008201527f7265737300000000000000000000000000000000000000000000000000000000602082015250565b7f4552433732313a20617070726f766520746f2063616c6c657200000000000000600082015250565b7f4552433732313a206f70657261746f7220717565727920666f72206e6f6e657860008201527f697374656e7420746f6b656e0000000000000000000000000000000000000000602082015250565b7f4552433732313a20617070726f76652063616c6c6572206973206e6f74206f7760008201527f6e6572206e6f7220617070726f76656420666f7220616c6c0000000000000000602082015250565b7f4552433732313a2062616c616e636520717565727920666f7220746865207a6560008201527f726f206164647265737300000000000000000000000000000000000000000000602082015250565b7f4552433732313a206f776e657220717565727920666f72206e6f6e657869737460008201527f656e7420746f6b656e0000000000000000000000000000000000000000000000602082015250565b7f4552433732313a206d696e7420746f20746865207a65726f2061646472657373600082015250565b7f4552433732313a20617070726f76656420717565727920666f72206e6f6e657860008201527f697374656e7420746f6b656e0000000000000000000000000000000000000000602082015250565b7f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572600082015250565b7f4552433732313a207472616e73666572206f6620746f6b656e2074686174206960008201527f73206e6f74206f776e0000000000000000000000000000000000000000000000602082015250565b7f4552433732314d657461646174613a2055524920717565727920666f72206e6f60008201527f6e6578697374656e7420746f6b656e0000000000000000000000000000000000602082015250565b7f4552433732313a20617070726f76616c20746f2063757272656e74206f776e6560008201527f7200000000000000000000000000000000000000000000000000000000000000602082015250565b7f4552433732313a207472616e736665722063616c6c6572206973206e6f74206f60008201527f776e6572206e6f7220617070726f766564000000000000000000000000000000602082015250565b61331381612c29565b811461331e57600080fd5b50565b61332a81612c3b565b811461333557600080fd5b50565b61334181612c47565b811461334c57600080fd5b50565b61335881612c93565b811461336357600080fd5b5056fea264697066735822122098f2b7555dde25506c226e5e706704009cbe8c680ae49e3c4797276d437933c364736f6c63430008030033"

// DeployWERC721 deploys a new Ethereum contract, binding an instance of WERC721 to it.
func DeployWERC721(auth *bind.TransactOpts, backend bind.ContractBackend, _eligibleUsers []common.Address, _name string, _symbol string) (common.Address, *types.Transaction, *WERC721, error) {
	parsed, err := abi.JSON(strings.NewReader(WERC721ABI))
	if err != nil {
		return common.Address{}, nil, nil, err
	}

	address, tx, contract, err := bind.DeployContract(auth, parsed, common.FromHex(WERC721Bin), backend, _eligibleUsers, _name, _symbol)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &WERC721{WERC721Caller: WERC721Caller{contract: contract}, WERC721Transactor: WERC721Transactor{contract: contract}, WERC721Filterer: WERC721Filterer{contract: contract}}, nil
}

// WERC721 is an auto generated Go binding around an Ethereum contract.
type WERC721 struct {
	WERC721Caller     // Read-only binding to the contract
	WERC721Transactor // Write-only binding to the contract
	WERC721Filterer   // Log filterer for contract events
}

// WERC721Caller is an auto generated read-only Go binding around an Ethereum contract.
type WERC721Caller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// WERC721Transactor is an auto generated write-only Go binding around an Ethereum contract.
type WERC721Transactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// WERC721Filterer is an auto generated log filtering Go binding around an Ethereum contract events.
type WERC721Filterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// WERC721Session is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type WERC721Session struct {
	Contract     *WERC721          // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// WERC721CallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type WERC721CallerSession struct {
	Contract *WERC721Caller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts  // Call options to use throughout this session
}

// WERC721TransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type WERC721TransactorSession struct {
	Contract     *WERC721Transactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts  // Transaction auth options to use throughout this session
}

// WERC721Raw is an auto generated low-level Go binding around an Ethereum contract.
type WERC721Raw struct {
	Contract *WERC721 // Generic contract binding to access the raw methods on
}

// WERC721CallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type WERC721CallerRaw struct {
	Contract *WERC721Caller // Generic read-only contract binding to access the raw methods on
}

// WERC721TransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type WERC721TransactorRaw struct {
	Contract *WERC721Transactor // Generic write-only contract binding to access the raw methods on
}

// NewWERC721 creates a new instance of WERC721, bound to a specific deployed contract.
func NewWERC721(address common.Address, backend bind.ContractBackend) (*WERC721, error) {
	contract, err := bindWERC721(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &WERC721{WERC721Caller: WERC721Caller{contract: contract}, WERC721Transactor: WERC721Transactor{contract: contract}, WERC721Filterer: WERC721Filterer{contract: contract}}, nil
}

// NewWERC721Caller creates a new read-only instance of WERC721, bound to a specific deployed contract.
func NewWERC721Caller(address common.Address, caller bind.ContractCaller) (*WERC721Caller, error) {
	contract, err := bindWERC721(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &WERC721Caller{contract: contract}, nil
}

// NewWERC721Transactor creates a new write-only instance of WERC721, bound to a specific deployed contract.
func NewWERC721Transactor(address common.Address, transactor bind.ContractTransactor) (*WERC721Transactor, error) {
	contract, err := bindWERC721(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &WERC721Transactor{contract: contract}, nil
}

// NewWERC721Filterer creates a new log filterer instance of WERC721, bound to a specific deployed contract.
func NewWERC721Filterer(address common.Address, filterer bind.ContractFilterer) (*WERC721Filterer, error) {
	contract, err := bindWERC721(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &WERC721Filterer{contract: contract}, nil
}

// bindWERC721 binds a generic wrapper to an already deployed contract.
func bindWERC721(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := abi.JSON(strings.NewReader(WERC721ABI))
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_WERC721 *WERC721Raw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _WERC721.Contract.WERC721Caller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_WERC721 *WERC721Raw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _WERC721.Contract.WERC721Transactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_WERC721 *WERC721Raw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _WERC721.Contract.WERC721Transactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_WERC721 *WERC721CallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _WERC721.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_WERC721 *WERC721TransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _WERC721.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_WERC721 *WERC721TransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _WERC721.Contract.contract.Transact(opts, method, params...)
}

// BalanceOf is a free data retrieval call binding the contract method 0x70a08231.
//
// Solidity: function balanceOf(address owner) view returns(uint256)
func (_WERC721 *WERC721Caller) BalanceOf(opts *bind.CallOpts, owner common.Address) (*big.Int, error) {
	var out []interface{}
	err := _WERC721.contract.Call(opts, &out, "balanceOf", owner)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// BalanceOf is a free data retrieval call binding the contract method 0x70a08231.
//
// Solidity: function balanceOf(address owner) view returns(uint256)
func (_WERC721 *WERC721Session) BalanceOf(owner common.Address) (*big.Int, error) {
	return _WERC721.Contract.BalanceOf(&_WERC721.CallOpts, owner)
}

// BalanceOf is a free data retrieval call binding the contract method 0x70a08231.
//
// Solidity: function balanceOf(address owner) view returns(uint256)
func (_WERC721 *WERC721CallerSession) BalanceOf(owner common.Address) (*big.Int, error) {
	return _WERC721.Contract.BalanceOf(&_WERC721.CallOpts, owner)
}

// GetApproved is a free data retrieval call binding the contract method 0x081812fc.
//
// Solidity: function getApproved(uint256 tokenId) view returns(address)
func (_WERC721 *WERC721Caller) GetApproved(opts *bind.CallOpts, tokenId *big.Int) (common.Address, error) {
	var out []interface{}
	err := _WERC721.contract.Call(opts, &out, "getApproved", tokenId)

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// GetApproved is a free data retrieval call binding the contract method 0x081812fc.
//
// Solidity: function getApproved(uint256 tokenId) view returns(address)
func (_WERC721 *WERC721Session) GetApproved(tokenId *big.Int) (common.Address, error) {
	return _WERC721.Contract.GetApproved(&_WERC721.CallOpts, tokenId)
}

// GetApproved is a free data retrieval call binding the contract method 0x081812fc.
//
// Solidity: function getApproved(uint256 tokenId) view returns(address)
func (_WERC721 *WERC721CallerSession) GetApproved(tokenId *big.Int) (common.Address, error) {
	return _WERC721.Contract.GetApproved(&_WERC721.CallOpts, tokenId)
}

// IsApprovedForAll is a free data retrieval call binding the contract method 0xe985e9c5.
//
// Solidity: function isApprovedForAll(address owner, address operator) view returns(bool)
func (_WERC721 *WERC721Caller) IsApprovedForAll(opts *bind.CallOpts, owner common.Address, operator common.Address) (bool, error) {
	var out []interface{}
	err := _WERC721.contract.Call(opts, &out, "isApprovedForAll", owner, operator)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// IsApprovedForAll is a free data retrieval call binding the contract method 0xe985e9c5.
//
// Solidity: function isApprovedForAll(address owner, address operator) view returns(bool)
func (_WERC721 *WERC721Session) IsApprovedForAll(owner common.Address, operator common.Address) (bool, error) {
	return _WERC721.Contract.IsApprovedForAll(&_WERC721.CallOpts, owner, operator)
}

// IsApprovedForAll is a free data retrieval call binding the contract method 0xe985e9c5.
//
// Solidity: function isApprovedForAll(address owner, address operator) view returns(bool)
func (_WERC721 *WERC721CallerSession) IsApprovedForAll(owner common.Address, operator common.Address) (bool, error) {
	return _WERC721.Contract.IsApprovedForAll(&_WERC721.CallOpts, owner, operator)
}

// Name is a free data retrieval call binding the contract method 0x06fdde03.
//
// Solidity: function name() view returns(string)
func (_WERC721 *WERC721Caller) Name(opts *bind.CallOpts) (string, error) {
	var out []interface{}
	err := _WERC721.contract.Call(opts, &out, "name")

	if err != nil {
		return *new(string), err
	}

	out0 := *abi.ConvertType(out[0], new(string)).(*string)

	return out0, err

}

// Name is a free data retrieval call binding the contract method 0x06fdde03.
//
// Solidity: function name() view returns(string)
func (_WERC721 *WERC721Session) Name() (string, error) {
	return _WERC721.Contract.Name(&_WERC721.CallOpts)
}

// Name is a free data retrieval call binding the contract method 0x06fdde03.
//
// Solidity: function name() view returns(string)
func (_WERC721 *WERC721CallerSession) Name() (string, error) {
	return _WERC721.Contract.Name(&_WERC721.CallOpts)
}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() view returns(address)
func (_WERC721 *WERC721Caller) Owner(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _WERC721.contract.Call(opts, &out, "owner")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() view returns(address)
func (_WERC721 *WERC721Session) Owner() (common.Address, error) {
	return _WERC721.Contract.Owner(&_WERC721.CallOpts)
}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() view returns(address)
func (_WERC721 *WERC721CallerSession) Owner() (common.Address, error) {
	return _WERC721.Contract.Owner(&_WERC721.CallOpts)
}

// OwnerOf is a free data retrieval call binding the contract method 0x6352211e.
//
// Solidity: function ownerOf(uint256 tokenId) view returns(address)
func (_WERC721 *WERC721Caller) OwnerOf(opts *bind.CallOpts, tokenId *big.Int) (common.Address, error) {
	var out []interface{}
	err := _WERC721.contract.Call(opts, &out, "ownerOf", tokenId)

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// OwnerOf is a free data retrieval call binding the contract method 0x6352211e.
//
// Solidity: function ownerOf(uint256 tokenId) view returns(address)
func (_WERC721 *WERC721Session) OwnerOf(tokenId *big.Int) (common.Address, error) {
	return _WERC721.Contract.OwnerOf(&_WERC721.CallOpts, tokenId)
}

// OwnerOf is a free data retrieval call binding the contract method 0x6352211e.
//
// Solidity: function ownerOf(uint256 tokenId) view returns(address)
func (_WERC721 *WERC721CallerSession) OwnerOf(tokenId *big.Int) (common.Address, error) {
	return _WERC721.Contract.OwnerOf(&_WERC721.CallOpts, tokenId)
}

// SupportsInterface is a free data retrieval call binding the contract method 0x01ffc9a7.
//
// Solidity: function supportsInterface(bytes4 interfaceId) view returns(bool)
func (_WERC721 *WERC721Caller) SupportsInterface(opts *bind.CallOpts, interfaceId [4]byte) (bool, error) {
	var out []interface{}
	err := _WERC721.contract.Call(opts, &out, "supportsInterface", interfaceId)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// SupportsInterface is a free data retrieval call binding the contract method 0x01ffc9a7.
//
// Solidity: function supportsInterface(bytes4 interfaceId) view returns(bool)
func (_WERC721 *WERC721Session) SupportsInterface(interfaceId [4]byte) (bool, error) {
	return _WERC721.Contract.SupportsInterface(&_WERC721.CallOpts, interfaceId)
}

// SupportsInterface is a free data retrieval call binding the contract method 0x01ffc9a7.
//
// Solidity: function supportsInterface(bytes4 interfaceId) view returns(bool)
func (_WERC721 *WERC721CallerSession) SupportsInterface(interfaceId [4]byte) (bool, error) {
	return _WERC721.Contract.SupportsInterface(&_WERC721.CallOpts, interfaceId)
}

// Symbol is a free data retrieval call binding the contract method 0x95d89b41.
//
// Solidity: function symbol() view returns(string)
func (_WERC721 *WERC721Caller) Symbol(opts *bind.CallOpts) (string, error) {
	var out []interface{}
	err := _WERC721.contract.Call(opts, &out, "symbol")

	if err != nil {
		return *new(string), err
	}

	out0 := *abi.ConvertType(out[0], new(string)).(*string)

	return out0, err

}

// Symbol is a free data retrieval call binding the contract method 0x95d89b41.
//
// Solidity: function symbol() view returns(string)
func (_WERC721 *WERC721Session) Symbol() (string, error) {
	return _WERC721.Contract.Symbol(&_WERC721.CallOpts)
}

// Symbol is a free data retrieval call binding the contract method 0x95d89b41.
//
// Solidity: function symbol() view returns(string)
func (_WERC721 *WERC721CallerSession) Symbol() (string, error) {
	return _WERC721.Contract.Symbol(&_WERC721.CallOpts)
}

// TokenURI is a free data retrieval call binding the contract method 0xc87b56dd.
//
// Solidity: function tokenURI(uint256 tokenId) view returns(string)
func (_WERC721 *WERC721Caller) TokenURI(opts *bind.CallOpts, tokenId *big.Int) (string, error) {
	var out []interface{}
	err := _WERC721.contract.Call(opts, &out, "tokenURI", tokenId)

	if err != nil {
		return *new(string), err
	}

	out0 := *abi.ConvertType(out[0], new(string)).(*string)

	return out0, err

}

// TokenURI is a free data retrieval call binding the contract method 0xc87b56dd.
//
// Solidity: function tokenURI(uint256 tokenId) view returns(string)
func (_WERC721 *WERC721Session) TokenURI(tokenId *big.Int) (string, error) {
	return _WERC721.Contract.TokenURI(&_WERC721.CallOpts, tokenId)
}

// TokenURI is a free data retrieval call binding the contract method 0xc87b56dd.
//
// Solidity: function tokenURI(uint256 tokenId) view returns(string)
func (_WERC721 *WERC721CallerSession) TokenURI(tokenId *big.Int) (string, error) {
	return _WERC721.Contract.TokenURI(&_WERC721.CallOpts, tokenId)
}

// TokensData is a free data retrieval call binding the contract method 0x599ed3ff.
//
// Solidity: function tokensData(uint256 ) view returns(string)
func (_WERC721 *WERC721Caller) TokensData(opts *bind.CallOpts, arg0 *big.Int) (string, error) {
	var out []interface{}
	err := _WERC721.contract.Call(opts, &out, "tokensData", arg0)

	if err != nil {
		return *new(string), err
	}

	out0 := *abi.ConvertType(out[0], new(string)).(*string)

	return out0, err

}

// TokensData is a free data retrieval call binding the contract method 0x599ed3ff.
//
// Solidity: function tokensData(uint256 ) view returns(string)
func (_WERC721 *WERC721Session) TokensData(arg0 *big.Int) (string, error) {
	return _WERC721.Contract.TokensData(&_WERC721.CallOpts, arg0)
}

// TokensData is a free data retrieval call binding the contract method 0x599ed3ff.
//
// Solidity: function tokensData(uint256 ) view returns(string)
func (_WERC721 *WERC721CallerSession) TokensData(arg0 *big.Int) (string, error) {
	return _WERC721.Contract.TokensData(&_WERC721.CallOpts, arg0)
}

// TokensOfOwner is a free data retrieval call binding the contract method 0x8462151c.
//
// Solidity: function tokensOfOwner(address _ownerOfTokens) view returns(uint256[])
func (_WERC721 *WERC721Caller) TokensOfOwner(opts *bind.CallOpts, _ownerOfTokens common.Address) ([]*big.Int, error) {
	var out []interface{}
	err := _WERC721.contract.Call(opts, &out, "tokensOfOwner", _ownerOfTokens)

	if err != nil {
		return *new([]*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new([]*big.Int)).(*[]*big.Int)

	return out0, err

}

// TokensOfOwner is a free data retrieval call binding the contract method 0x8462151c.
//
// Solidity: function tokensOfOwner(address _ownerOfTokens) view returns(uint256[])
func (_WERC721 *WERC721Session) TokensOfOwner(_ownerOfTokens common.Address) ([]*big.Int, error) {
	return _WERC721.Contract.TokensOfOwner(&_WERC721.CallOpts, _ownerOfTokens)
}

// TokensOfOwner is a free data retrieval call binding the contract method 0x8462151c.
//
// Solidity: function tokensOfOwner(address _ownerOfTokens) view returns(uint256[])
func (_WERC721 *WERC721CallerSession) TokensOfOwner(_ownerOfTokens common.Address) ([]*big.Int, error) {
	return _WERC721.Contract.TokensOfOwner(&_WERC721.CallOpts, _ownerOfTokens)
}

// TotalSupply is a free data retrieval call binding the contract method 0x18160ddd.
//
// Solidity: function totalSupply() view returns(uint256)
func (_WERC721 *WERC721Caller) TotalSupply(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _WERC721.contract.Call(opts, &out, "totalSupply")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// TotalSupply is a free data retrieval call binding the contract method 0x18160ddd.
//
// Solidity: function totalSupply() view returns(uint256)
func (_WERC721 *WERC721Session) TotalSupply() (*big.Int, error) {
	return _WERC721.Contract.TotalSupply(&_WERC721.CallOpts)
}

// TotalSupply is a free data retrieval call binding the contract method 0x18160ddd.
//
// Solidity: function totalSupply() view returns(uint256)
func (_WERC721 *WERC721CallerSession) TotalSupply() (*big.Int, error) {
	return _WERC721.Contract.TotalSupply(&_WERC721.CallOpts)
}

// Approve is a paid mutator transaction binding the contract method 0x095ea7b3.
//
// Solidity: function approve(address to, uint256 tokenId) returns()
func (_WERC721 *WERC721Transactor) Approve(opts *bind.TransactOpts, to common.Address, tokenId *big.Int) (*types.Transaction, error) {
	return _WERC721.contract.Transact(opts, "approve", to, tokenId)
}

// Approve is a paid mutator transaction binding the contract method 0x095ea7b3.
//
// Solidity: function approve(address to, uint256 tokenId) returns()
func (_WERC721 *WERC721Session) Approve(to common.Address, tokenId *big.Int) (*types.Transaction, error) {
	return _WERC721.Contract.Approve(&_WERC721.TransactOpts, to, tokenId)
}

// Approve is a paid mutator transaction binding the contract method 0x095ea7b3.
//
// Solidity: function approve(address to, uint256 tokenId) returns()
func (_WERC721 *WERC721TransactorSession) Approve(to common.Address, tokenId *big.Int) (*types.Transaction, error) {
	return _WERC721.Contract.Approve(&_WERC721.TransactOpts, to, tokenId)
}

// Mint is a paid mutator transaction binding the contract method 0xd0def521.
//
// Solidity: function mint(address _to, string _data) returns()
func (_WERC721 *WERC721Transactor) Mint(opts *bind.TransactOpts, _to common.Address, _data string) (*types.Transaction, error) {
	return _WERC721.contract.Transact(opts, "mint", _to, _data)
}

// Mint is a paid mutator transaction binding the contract method 0xd0def521.
//
// Solidity: function mint(address _to, string _data) returns()
func (_WERC721 *WERC721Session) Mint(_to common.Address, _data string) (*types.Transaction, error) {
	return _WERC721.Contract.Mint(&_WERC721.TransactOpts, _to, _data)
}

// Mint is a paid mutator transaction binding the contract method 0xd0def521.
//
// Solidity: function mint(address _to, string _data) returns()
func (_WERC721 *WERC721TransactorSession) Mint(_to common.Address, _data string) (*types.Transaction, error) {
	return _WERC721.Contract.Mint(&_WERC721.TransactOpts, _to, _data)
}

// RenounceOwnership is a paid mutator transaction binding the contract method 0x715018a6.
//
// Solidity: function renounceOwnership() returns()
func (_WERC721 *WERC721Transactor) RenounceOwnership(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _WERC721.contract.Transact(opts, "renounceOwnership")
}

// RenounceOwnership is a paid mutator transaction binding the contract method 0x715018a6.
//
// Solidity: function renounceOwnership() returns()
func (_WERC721 *WERC721Session) RenounceOwnership() (*types.Transaction, error) {
	return _WERC721.Contract.RenounceOwnership(&_WERC721.TransactOpts)
}

// RenounceOwnership is a paid mutator transaction binding the contract method 0x715018a6.
//
// Solidity: function renounceOwnership() returns()
func (_WERC721 *WERC721TransactorSession) RenounceOwnership() (*types.Transaction, error) {
	return _WERC721.Contract.RenounceOwnership(&_WERC721.TransactOpts)
}

// SafeTransferFrom is a paid mutator transaction binding the contract method 0x42842e0e.
//
// Solidity: function safeTransferFrom(address from, address to, uint256 tokenId) returns()
func (_WERC721 *WERC721Transactor) SafeTransferFrom(opts *bind.TransactOpts, from common.Address, to common.Address, tokenId *big.Int) (*types.Transaction, error) {
	return _WERC721.contract.Transact(opts, "safeTransferFrom", from, to, tokenId)
}

// SafeTransferFrom is a paid mutator transaction binding the contract method 0x42842e0e.
//
// Solidity: function safeTransferFrom(address from, address to, uint256 tokenId) returns()
func (_WERC721 *WERC721Session) SafeTransferFrom(from common.Address, to common.Address, tokenId *big.Int) (*types.Transaction, error) {
	return _WERC721.Contract.SafeTransferFrom(&_WERC721.TransactOpts, from, to, tokenId)
}

// SafeTransferFrom is a paid mutator transaction binding the contract method 0x42842e0e.
//
// Solidity: function safeTransferFrom(address from, address to, uint256 tokenId) returns()
func (_WERC721 *WERC721TransactorSession) SafeTransferFrom(from common.Address, to common.Address, tokenId *big.Int) (*types.Transaction, error) {
	return _WERC721.Contract.SafeTransferFrom(&_WERC721.TransactOpts, from, to, tokenId)
}

// SafeTransferFrom0 is a paid mutator transaction binding the contract method 0xb88d4fde.
//
// Solidity: function safeTransferFrom(address from, address to, uint256 tokenId, bytes _data) returns()
func (_WERC721 *WERC721Transactor) SafeTransferFrom0(opts *bind.TransactOpts, from common.Address, to common.Address, tokenId *big.Int, _data []byte) (*types.Transaction, error) {
	return _WERC721.contract.Transact(opts, "safeTransferFrom0", from, to, tokenId, _data)
}

// SafeTransferFrom0 is a paid mutator transaction binding the contract method 0xb88d4fde.
//
// Solidity: function safeTransferFrom(address from, address to, uint256 tokenId, bytes _data) returns()
func (_WERC721 *WERC721Session) SafeTransferFrom0(from common.Address, to common.Address, tokenId *big.Int, _data []byte) (*types.Transaction, error) {
	return _WERC721.Contract.SafeTransferFrom0(&_WERC721.TransactOpts, from, to, tokenId, _data)
}

// SafeTransferFrom0 is a paid mutator transaction binding the contract method 0xb88d4fde.
//
// Solidity: function safeTransferFrom(address from, address to, uint256 tokenId, bytes _data) returns()
func (_WERC721 *WERC721TransactorSession) SafeTransferFrom0(from common.Address, to common.Address, tokenId *big.Int, _data []byte) (*types.Transaction, error) {
	return _WERC721.Contract.SafeTransferFrom0(&_WERC721.TransactOpts, from, to, tokenId, _data)
}

// SetApprovalForAll is a paid mutator transaction binding the contract method 0xa22cb465.
//
// Solidity: function setApprovalForAll(address operator, bool approved) returns()
func (_WERC721 *WERC721Transactor) SetApprovalForAll(opts *bind.TransactOpts, operator common.Address, approved bool) (*types.Transaction, error) {
	return _WERC721.contract.Transact(opts, "setApprovalForAll", operator, approved)
}

// SetApprovalForAll is a paid mutator transaction binding the contract method 0xa22cb465.
//
// Solidity: function setApprovalForAll(address operator, bool approved) returns()
func (_WERC721 *WERC721Session) SetApprovalForAll(operator common.Address, approved bool) (*types.Transaction, error) {
	return _WERC721.Contract.SetApprovalForAll(&_WERC721.TransactOpts, operator, approved)
}

// SetApprovalForAll is a paid mutator transaction binding the contract method 0xa22cb465.
//
// Solidity: function setApprovalForAll(address operator, bool approved) returns()
func (_WERC721 *WERC721TransactorSession) SetApprovalForAll(operator common.Address, approved bool) (*types.Transaction, error) {
	return _WERC721.Contract.SetApprovalForAll(&_WERC721.TransactOpts, operator, approved)
}

// SwitchUserPermissions is a paid mutator transaction binding the contract method 0x48065fa6.
//
// Solidity: function switchUserPermissions(address _user) returns()
func (_WERC721 *WERC721Transactor) SwitchUserPermissions(opts *bind.TransactOpts, _user common.Address) (*types.Transaction, error) {
	return _WERC721.contract.Transact(opts, "switchUserPermissions", _user)
}

// SwitchUserPermissions is a paid mutator transaction binding the contract method 0x48065fa6.
//
// Solidity: function switchUserPermissions(address _user) returns()
func (_WERC721 *WERC721Session) SwitchUserPermissions(_user common.Address) (*types.Transaction, error) {
	return _WERC721.Contract.SwitchUserPermissions(&_WERC721.TransactOpts, _user)
}

// SwitchUserPermissions is a paid mutator transaction binding the contract method 0x48065fa6.
//
// Solidity: function switchUserPermissions(address _user) returns()
func (_WERC721 *WERC721TransactorSession) SwitchUserPermissions(_user common.Address) (*types.Transaction, error) {
	return _WERC721.Contract.SwitchUserPermissions(&_WERC721.TransactOpts, _user)
}

// TransferFrom is a paid mutator transaction binding the contract method 0x23b872dd.
//
// Solidity: function transferFrom(address from, address to, uint256 tokenId) returns()
func (_WERC721 *WERC721Transactor) TransferFrom(opts *bind.TransactOpts, from common.Address, to common.Address, tokenId *big.Int) (*types.Transaction, error) {
	return _WERC721.contract.Transact(opts, "transferFrom", from, to, tokenId)
}

// TransferFrom is a paid mutator transaction binding the contract method 0x23b872dd.
//
// Solidity: function transferFrom(address from, address to, uint256 tokenId) returns()
func (_WERC721 *WERC721Session) TransferFrom(from common.Address, to common.Address, tokenId *big.Int) (*types.Transaction, error) {
	return _WERC721.Contract.TransferFrom(&_WERC721.TransactOpts, from, to, tokenId)
}

// TransferFrom is a paid mutator transaction binding the contract method 0x23b872dd.
//
// Solidity: function transferFrom(address from, address to, uint256 tokenId) returns()
func (_WERC721 *WERC721TransactorSession) TransferFrom(from common.Address, to common.Address, tokenId *big.Int) (*types.Transaction, error) {
	return _WERC721.Contract.TransferFrom(&_WERC721.TransactOpts, from, to, tokenId)
}

// TransferOwnership is a paid mutator transaction binding the contract method 0xf2fde38b.
//
// Solidity: function transferOwnership(address newOwner) returns()
func (_WERC721 *WERC721Transactor) TransferOwnership(opts *bind.TransactOpts, newOwner common.Address) (*types.Transaction, error) {
	return _WERC721.contract.Transact(opts, "transferOwnership", newOwner)
}

// TransferOwnership is a paid mutator transaction binding the contract method 0xf2fde38b.
//
// Solidity: function transferOwnership(address newOwner) returns()
func (_WERC721 *WERC721Session) TransferOwnership(newOwner common.Address) (*types.Transaction, error) {
	return _WERC721.Contract.TransferOwnership(&_WERC721.TransactOpts, newOwner)
}

// TransferOwnership is a paid mutator transaction binding the contract method 0xf2fde38b.
//
// Solidity: function transferOwnership(address newOwner) returns()
func (_WERC721 *WERC721TransactorSession) TransferOwnership(newOwner common.Address) (*types.Transaction, error) {
	return _WERC721.Contract.TransferOwnership(&_WERC721.TransactOpts, newOwner)
}

// WERC721ApprovalIterator is returned from FilterApproval and is used to iterate over the raw logs and unpacked data for Approval events raised by the WERC721 contract.
type WERC721ApprovalIterator struct {
	Event *WERC721Approval // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *WERC721ApprovalIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(WERC721Approval)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(WERC721Approval)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *WERC721ApprovalIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *WERC721ApprovalIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// WERC721Approval represents a Approval event raised by the WERC721 contract.
type WERC721Approval struct {
	Owner    common.Address
	Approved common.Address
	TokenId  *big.Int
	Raw      types.Log // Blockchain specific contextual infos
}

// FilterApproval is a free log retrieval operation binding the contract event 0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925.
//
// Solidity: event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId)
func (_WERC721 *WERC721Filterer) FilterApproval(opts *bind.FilterOpts, owner []common.Address, approved []common.Address, tokenId []*big.Int) (*WERC721ApprovalIterator, error) {

	var ownerRule []interface{}
	for _, ownerItem := range owner {
		ownerRule = append(ownerRule, ownerItem)
	}
	var approvedRule []interface{}
	for _, approvedItem := range approved {
		approvedRule = append(approvedRule, approvedItem)
	}
	var tokenIdRule []interface{}
	for _, tokenIdItem := range tokenId {
		tokenIdRule = append(tokenIdRule, tokenIdItem)
	}

	logs, sub, err := _WERC721.contract.FilterLogs(opts, "Approval", ownerRule, approvedRule, tokenIdRule)
	if err != nil {
		return nil, err
	}
	return &WERC721ApprovalIterator{contract: _WERC721.contract, event: "Approval", logs: logs, sub: sub}, nil
}

// WatchApproval is a free log subscription operation binding the contract event 0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925.
//
// Solidity: event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId)
func (_WERC721 *WERC721Filterer) WatchApproval(opts *bind.WatchOpts, sink chan<- *WERC721Approval, owner []common.Address, approved []common.Address, tokenId []*big.Int) (event.Subscription, error) {

	var ownerRule []interface{}
	for _, ownerItem := range owner {
		ownerRule = append(ownerRule, ownerItem)
	}
	var approvedRule []interface{}
	for _, approvedItem := range approved {
		approvedRule = append(approvedRule, approvedItem)
	}
	var tokenIdRule []interface{}
	for _, tokenIdItem := range tokenId {
		tokenIdRule = append(tokenIdRule, tokenIdItem)
	}

	logs, sub, err := _WERC721.contract.WatchLogs(opts, "Approval", ownerRule, approvedRule, tokenIdRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(WERC721Approval)
				if err := _WERC721.contract.UnpackLog(event, "Approval", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseApproval is a log parse operation binding the contract event 0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925.
//
// Solidity: event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId)
func (_WERC721 *WERC721Filterer) ParseApproval(log types.Log) (*WERC721Approval, error) {
	event := new(WERC721Approval)
	if err := _WERC721.contract.UnpackLog(event, "Approval", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// WERC721ApprovalForAllIterator is returned from FilterApprovalForAll and is used to iterate over the raw logs and unpacked data for ApprovalForAll events raised by the WERC721 contract.
type WERC721ApprovalForAllIterator struct {
	Event *WERC721ApprovalForAll // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *WERC721ApprovalForAllIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(WERC721ApprovalForAll)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(WERC721ApprovalForAll)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *WERC721ApprovalForAllIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *WERC721ApprovalForAllIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// WERC721ApprovalForAll represents a ApprovalForAll event raised by the WERC721 contract.
type WERC721ApprovalForAll struct {
	Owner    common.Address
	Operator common.Address
	Approved bool
	Raw      types.Log // Blockchain specific contextual infos
}

// FilterApprovalForAll is a free log retrieval operation binding the contract event 0x17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31.
//
// Solidity: event ApprovalForAll(address indexed owner, address indexed operator, bool approved)
func (_WERC721 *WERC721Filterer) FilterApprovalForAll(opts *bind.FilterOpts, owner []common.Address, operator []common.Address) (*WERC721ApprovalForAllIterator, error) {

	var ownerRule []interface{}
	for _, ownerItem := range owner {
		ownerRule = append(ownerRule, ownerItem)
	}
	var operatorRule []interface{}
	for _, operatorItem := range operator {
		operatorRule = append(operatorRule, operatorItem)
	}

	logs, sub, err := _WERC721.contract.FilterLogs(opts, "ApprovalForAll", ownerRule, operatorRule)
	if err != nil {
		return nil, err
	}
	return &WERC721ApprovalForAllIterator{contract: _WERC721.contract, event: "ApprovalForAll", logs: logs, sub: sub}, nil
}

// WatchApprovalForAll is a free log subscription operation binding the contract event 0x17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31.
//
// Solidity: event ApprovalForAll(address indexed owner, address indexed operator, bool approved)
func (_WERC721 *WERC721Filterer) WatchApprovalForAll(opts *bind.WatchOpts, sink chan<- *WERC721ApprovalForAll, owner []common.Address, operator []common.Address) (event.Subscription, error) {

	var ownerRule []interface{}
	for _, ownerItem := range owner {
		ownerRule = append(ownerRule, ownerItem)
	}
	var operatorRule []interface{}
	for _, operatorItem := range operator {
		operatorRule = append(operatorRule, operatorItem)
	}

	logs, sub, err := _WERC721.contract.WatchLogs(opts, "ApprovalForAll", ownerRule, operatorRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(WERC721ApprovalForAll)
				if err := _WERC721.contract.UnpackLog(event, "ApprovalForAll", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseApprovalForAll is a log parse operation binding the contract event 0x17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31.
//
// Solidity: event ApprovalForAll(address indexed owner, address indexed operator, bool approved)
func (_WERC721 *WERC721Filterer) ParseApprovalForAll(log types.Log) (*WERC721ApprovalForAll, error) {
	event := new(WERC721ApprovalForAll)
	if err := _WERC721.contract.UnpackLog(event, "ApprovalForAll", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// WERC721OwnershipTransferredIterator is returned from FilterOwnershipTransferred and is used to iterate over the raw logs and unpacked data for OwnershipTransferred events raised by the WERC721 contract.
type WERC721OwnershipTransferredIterator struct {
	Event *WERC721OwnershipTransferred // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *WERC721OwnershipTransferredIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(WERC721OwnershipTransferred)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(WERC721OwnershipTransferred)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *WERC721OwnershipTransferredIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *WERC721OwnershipTransferredIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// WERC721OwnershipTransferred represents a OwnershipTransferred event raised by the WERC721 contract.
type WERC721OwnershipTransferred struct {
	PreviousOwner common.Address
	NewOwner      common.Address
	Raw           types.Log // Blockchain specific contextual infos
}

// FilterOwnershipTransferred is a free log retrieval operation binding the contract event 0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0.
//
// Solidity: event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)
func (_WERC721 *WERC721Filterer) FilterOwnershipTransferred(opts *bind.FilterOpts, previousOwner []common.Address, newOwner []common.Address) (*WERC721OwnershipTransferredIterator, error) {

	var previousOwnerRule []interface{}
	for _, previousOwnerItem := range previousOwner {
		previousOwnerRule = append(previousOwnerRule, previousOwnerItem)
	}
	var newOwnerRule []interface{}
	for _, newOwnerItem := range newOwner {
		newOwnerRule = append(newOwnerRule, newOwnerItem)
	}

	logs, sub, err := _WERC721.contract.FilterLogs(opts, "OwnershipTransferred", previousOwnerRule, newOwnerRule)
	if err != nil {
		return nil, err
	}
	return &WERC721OwnershipTransferredIterator{contract: _WERC721.contract, event: "OwnershipTransferred", logs: logs, sub: sub}, nil
}

// WatchOwnershipTransferred is a free log subscription operation binding the contract event 0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0.
//
// Solidity: event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)
func (_WERC721 *WERC721Filterer) WatchOwnershipTransferred(opts *bind.WatchOpts, sink chan<- *WERC721OwnershipTransferred, previousOwner []common.Address, newOwner []common.Address) (event.Subscription, error) {

	var previousOwnerRule []interface{}
	for _, previousOwnerItem := range previousOwner {
		previousOwnerRule = append(previousOwnerRule, previousOwnerItem)
	}
	var newOwnerRule []interface{}
	for _, newOwnerItem := range newOwner {
		newOwnerRule = append(newOwnerRule, newOwnerItem)
	}

	logs, sub, err := _WERC721.contract.WatchLogs(opts, "OwnershipTransferred", previousOwnerRule, newOwnerRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(WERC721OwnershipTransferred)
				if err := _WERC721.contract.UnpackLog(event, "OwnershipTransferred", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseOwnershipTransferred is a log parse operation binding the contract event 0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0.
//
// Solidity: event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)
func (_WERC721 *WERC721Filterer) ParseOwnershipTransferred(log types.Log) (*WERC721OwnershipTransferred, error) {
	event := new(WERC721OwnershipTransferred)
	if err := _WERC721.contract.UnpackLog(event, "OwnershipTransferred", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// WERC721TransferIterator is returned from FilterTransfer and is used to iterate over the raw logs and unpacked data for Transfer events raised by the WERC721 contract.
type WERC721TransferIterator struct {
	Event *WERC721Transfer // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *WERC721TransferIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(WERC721Transfer)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(WERC721Transfer)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *WERC721TransferIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *WERC721TransferIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// WERC721Transfer represents a Transfer event raised by the WERC721 contract.
type WERC721Transfer struct {
	From    common.Address
	To      common.Address
	TokenId *big.Int
	Raw     types.Log // Blockchain specific contextual infos
}

// FilterTransfer is a free log retrieval operation binding the contract event 0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef.
//
// Solidity: event Transfer(address indexed from, address indexed to, uint256 indexed tokenId)
func (_WERC721 *WERC721Filterer) FilterTransfer(opts *bind.FilterOpts, from []common.Address, to []common.Address, tokenId []*big.Int) (*WERC721TransferIterator, error) {

	var fromRule []interface{}
	for _, fromItem := range from {
		fromRule = append(fromRule, fromItem)
	}
	var toRule []interface{}
	for _, toItem := range to {
		toRule = append(toRule, toItem)
	}
	var tokenIdRule []interface{}
	for _, tokenIdItem := range tokenId {
		tokenIdRule = append(tokenIdRule, tokenIdItem)
	}

	logs, sub, err := _WERC721.contract.FilterLogs(opts, "Transfer", fromRule, toRule, tokenIdRule)
	if err != nil {
		return nil, err
	}
	return &WERC721TransferIterator{contract: _WERC721.contract, event: "Transfer", logs: logs, sub: sub}, nil
}

// WatchTransfer is a free log subscription operation binding the contract event 0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef.
//
// Solidity: event Transfer(address indexed from, address indexed to, uint256 indexed tokenId)
func (_WERC721 *WERC721Filterer) WatchTransfer(opts *bind.WatchOpts, sink chan<- *WERC721Transfer, from []common.Address, to []common.Address, tokenId []*big.Int) (event.Subscription, error) {

	var fromRule []interface{}
	for _, fromItem := range from {
		fromRule = append(fromRule, fromItem)
	}
	var toRule []interface{}
	for _, toItem := range to {
		toRule = append(toRule, toItem)
	}
	var tokenIdRule []interface{}
	for _, tokenIdItem := range tokenId {
		tokenIdRule = append(tokenIdRule, tokenIdItem)
	}

	logs, sub, err := _WERC721.contract.WatchLogs(opts, "Transfer", fromRule, toRule, tokenIdRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(WERC721Transfer)
				if err := _WERC721.contract.UnpackLog(event, "Transfer", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseTransfer is a log parse operation binding the contract event 0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef.
//
// Solidity: event Transfer(address indexed from, address indexed to, uint256 indexed tokenId)
func (_WERC721 *WERC721Filterer) ParseTransfer(log types.Log) (*WERC721Transfer, error) {
	event := new(WERC721Transfer)
	if err := _WERC721.contract.UnpackLog(event, "Transfer", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

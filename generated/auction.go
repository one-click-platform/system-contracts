// Code generated - DO NOT EDIT.
// This file is a generated binding and any manual changes will be lost.

package generated

import (
	"math/big"
	"strings"

	ethereum "github.com/ethereum/go-ethereum"
	"github.com/ethereum/go-ethereum/accounts/abi"
	"github.com/ethereum/go-ethereum/accounts/abi/bind"
	"github.com/ethereum/go-ethereum/common"
	"github.com/ethereum/go-ethereum/core/types"
	"github.com/ethereum/go-ethereum/event"
)

// Reference imports to suppress errors if they are not otherwise used.
var (
	_ = big.NewInt
	_ = strings.NewReader
	_ = ethereum.NotFound
	_ = bind.Bind
	_ = common.Big1
	_ = types.BloomLookup
	_ = event.NewSubscription
)

// AuctionAuctionInfo is an auto generated low-level Go binding around an user-defined struct.
type AuctionAuctionInfo struct {
	Creator              common.Address
	StartPrice           *big.Int
	BuyNowPrice          *big.Int
	StartTime            *big.Int
	Duration             *big.Int
	DurationIncrement    *big.Int
	BidIncrement         *big.Int
	Description          string
	AssetAddress         common.Address
	AssetId              *big.Int
	CurrencyAddress      common.Address
	CurrentBidder        common.Address
	HighestBid           *big.Int
	LotBought            bool
	RepaymentTransferred bool
	LotTransferred       bool
	Status               uint8
}

// AuctionABI is the input ABI used to generate the binding from.
const AuctionABI = "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_auctionId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_winner\",\"type\":\"address\"}],\"name\":\"AssetClaimed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_auctionId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_bidder\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"AuctionBid\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_auctionId\",\"type\":\"uint256\"}],\"name\":\"AuctionClosed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_creator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_asset\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"assetId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_auctionId\",\"type\":\"uint256\"}],\"name\":\"AuctionCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_auctionId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_creator\",\"type\":\"address\"}],\"name\":\"TokensClaimed\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_auctionId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"bid\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_auctionId\",\"type\":\"uint256\"}],\"name\":\"buyNow\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_auctionId\",\"type\":\"uint256\"}],\"name\":\"claimLot\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_auctionId\",\"type\":\"uint256\"}],\"name\":\"claimRepayment\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_auctionId\",\"type\":\"uint256\"}],\"name\":\"closeAuction\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_assetAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_assetId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_currencyAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_startPrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_buyNowPrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_startTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_duration\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_durationIncrement\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_bidIncrement\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"_description\",\"type\":\"string\"}],\"name\":\"createAuction\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_auctionId\",\"type\":\"uint256\"}],\"name\":\"getAuctionInfo\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"creator\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"startPrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"buyNowPrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"startTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"duration\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"durationIncrement\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"bidIncrement\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"description\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"assetAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"assetId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"currencyAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"currentBidder\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"highestBid\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"lotBought\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"repaymentTransferred\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"lotTransferred\",\"type\":\"bool\"},{\"internalType\":\"enumAuction.AuctionStatus\",\"name\":\"status\",\"type\":\"uint8\"}],\"internalType\":\"structAuction.AuctionInfo\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_auctionId\",\"type\":\"uint256\"}],\"name\":\"getRaisingBid\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_auctionId\",\"type\":\"uint256\"}],\"name\":\"getStatus\",\"outputs\":[{\"internalType\":\"enumAuction.AuctionStatus\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_auctionId\",\"type\":\"uint256\"}],\"name\":\"getUserLatestBid\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"userBids\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]"

// AuctionBin is the compiled bytecode used for deploying new contracts.
var AuctionBin = "0x608060405234801561001057600080fd5b50336000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055503373ffffffffffffffffffffffffffffffffffffffff16600073ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a361526a806100bb6000396000f3fe608060405234801561001057600080fd5b50600436106100e95760003560e01c80636f1a9abb1161008c578063a216592011610066578063a216592014610246578063f2da066414610276578063f2fde38b14610292578063fc3fc4ed146102ae576100e9565b80636f1a9abb146101ee578063715018a61461021e5780638da5cb5b14610228576100e9565b80632b76708b116100c85780632b76708b146101425780634bc28ede14610172578063598647f8146101a25780635c622a0e146101be576100e9565b8062d878e8146100ee57806308a0f32f1461010a578063236ed8f314610126575b600080fd5b610108600480360381019061010391906140eb565b6102de565b005b610124600480360381019061011f91906140eb565b610839565b005b610140600480360381019061013b91906140eb565b610f7f565b005b61015c60048036038101906101579190614114565b611766565b6040516101699190614fb1565b60405180910390f35b61018c60048036038101906101879190613fcf565b61178b565b6040516101999190614fb1565b60405180910390f35b6101bc60048036038101906101b79190614150565b611f8a565b005b6101d860048036038101906101d391906140eb565b61281e565b6040516101e59190614c32565b60405180910390f35b610208600480360381019061020391906140eb565b612bb6565b6040516102159190614fb1565b60405180910390f35b610226612c73565b005b610230612dbf565b60405161023d9190614b2d565b60405180910390f35b610260600480360381019061025b91906140eb565b612de8565b60405161026d9190614fb1565b60405180910390f35b610290600480360381019061028b91906140eb565b612e5d565b005b6102ac60048036038101906102a79190613f7d565b613357565b005b6102c860048036038101906102c391906140eb565b613512565b6040516102d59190614f8f565b60405180910390f35b806003808111156102eb57fe5b6102f48261281e565b60038111156102ff57fe5b1461033f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161033690614caf565b60405180910390fd5b610347613d4b565b60026000848152602001908152602001600020604051806102200160405290816000820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001600182015481526020016002820154815260200160038201548152602001600482015481526020016005820154815260200160068201548152602001600782018054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156104915780601f1061046657610100808354040283529160200191610491565b820191906000526020600020905b81548152906001019060200180831161047457829003601f168201915b505050505081526020016008820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200160098201548152602001600a820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001600b820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001600c8201548152602001600d820160009054906101000a900460ff16151515158152602001600d820160019054906101000a900460ff16151515158152602001600d820160029054906101000a900460ff16151515158152602001600d820160039054906101000a900460ff16600381111561061f57fe5b600381111561062a57fe5b8152505090503373ffffffffffffffffffffffffffffffffffffffff16816000015173ffffffffffffffffffffffffffffffffffffffff16146106a2576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161069990614c6f565b60405180910390fd5b806101c00151156106e8576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016106df90614ecf565b60405180910390fd5b600081610140015173ffffffffffffffffffffffffffffffffffffffff1663a9059cbb83600001518461018001516040518363ffffffff1660e01b8152600401610733929190614c09565b602060405180830381600087803b15801561074d57600080fd5b505af1158015610761573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061078591906140c2565b9050806107c7576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016107be90614f6f565b60405180910390fd5b600160026000868152602001908152602001600020600d0160016101000a81548160ff0219169083151502179055507f83017964d41e2eb3369a74f93ce7024dc09d85d2bfa35ca86268234733b9659084836000015160405161082b929190614fcc565b60405180910390a150505050565b806002600381111561084757fe5b6108508261281e565b600381111561085b57fe5b1461089b576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161089290614d4f565b60405180910390fd5b6108a3613d4b565b60026000848152602001908152602001600020604051806102200160405290816000820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001600182015481526020016002820154815260200160038201548152602001600482015481526020016005820154815260200160068201548152602001600782018054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156109ed5780601f106109c2576101008083540402835291602001916109ed565b820191906000526020600020905b8154815290600101906020018083116109d057829003601f168201915b505050505081526020016008820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200160098201548152602001600a820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001600b820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001600c8201548152602001600d820160009054906101000a900460ff16151515158152602001600d820160019054906101000a900460ff16151515158152602001600d820160029054906101000a900460ff16151515158152602001600d820160039054906101000a900460ff166003811115610b7b57fe5b6003811115610b8657fe5b815250509050600081610140015173ffffffffffffffffffffffffffffffffffffffff166323b872dd333085604001516040518463ffffffff1660e01b8152600401610bd493929190614b48565b602060405180830381600087803b158015610bee57600080fd5b505af1158015610c02573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c2691906140c2565b905080610c68576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610c5f90614f6f565b60405180910390fd5b81610100015173ffffffffffffffffffffffffffffffffffffffff166323b872dd83600001518461016001518561012001516040518463ffffffff1660e01b8152600401610cb893929190614b7f565b600060405180830381600087803b158015610cd257600080fd5b505af1158015610ce6573d6000803e3d6000fd5b505050506001826101a00190151590811515815250506001826101e0019015159081151581525050816002600086815260200190815260200160002060008201518160000160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506020820151816001015560408201518160020155606082015181600301556080820151816004015560a0820151816005015560c0820151816006015560e0820151816007019080519060200190610dc1929190613e38565b506101008201518160080160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550610120820151816009015561014082015181600a0160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555061016082015181600b0160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555061018082015181600c01556101a082015181600d0160006101000a81548160ff0219169083151502179055506101c082015181600d0160016101000a81548160ff0219169083151502179055506101e082015181600d0160026101000a81548160ff02191690831515021790555061020082015181600d0160036101000a81548160ff02191690836003811115610f3857fe5b02179055509050507f937214d5c201b3ae02bfb8ff13db1b39b3f359d5b96d4520dff65f8f40e445148433604051610f71929190614ff5565b60405180910390a150505050565b3373ffffffffffffffffffffffffffffffffffffffff1660008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff161461100d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161100490614e2f565b60405180910390fd5b8060038081111561101a57fe5b6110238261281e565b600381111561102e57fe5b1461106e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161106590614caf565b60405180910390fd5b611076613d4b565b60026000848152602001908152602001600020604051806102200160405290816000820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001600182015481526020016002820154815260200160038201548152602001600482015481526020016005820154815260200160068201548152602001600782018054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156111c05780601f10611195576101008083540402835291602001916111c0565b820191906000526020600020905b8154815290600101906020018083116111a357829003601f168201915b505050505081526020016008820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200160098201548152602001600a820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001600b820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001600c8201548152602001600d820160009054906101000a900460ff16151515158152602001600d820160019054906101000a900460ff16151515158152602001600d820160029054906101000a900460ff16151515158152602001600d820160039054906101000a900460ff16600381111561134e57fe5b600381111561135957fe5b815250509050806101c0015161145957600081610140015173ffffffffffffffffffffffffffffffffffffffff166323b872dd333085604001516040518463ffffffff1660e01b81526004016113b193929190614b48565b602060405180830381600087803b1580156113cb57600080fd5b505af11580156113df573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061140391906140c2565b905080611445576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161143c90614f6f565b60405180910390fd5b6001826101c0019015159081151581525050505b806101e001516114f85780610100015173ffffffffffffffffffffffffffffffffffffffff166323b872dd82600001518361016001518461012001516040518463ffffffff1660e01b81526004016114b393929190614b7f565b600060405180830381600087803b1580156114cd57600080fd5b505af11580156114e1573d6000803e3d6000fd5b505050506001816101e00190151590811515815250505b806002600085815260200190815260200160002060008201518160000160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506020820151816001015560408201518160020155606082015181600301556080820151816004015560a0820151816005015560c0820151816006015560e08201518160070190805190602001906115ab929190613e38565b506101008201518160080160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550610120820151816009015561014082015181600a0160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555061016082015181600b0160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555061018082015181600c01556101a082015181600d0160006101000a81548160ff0219169083151502179055506101c082015181600d0160016101000a81548160ff0219169083151502179055506101e082015181600d0160026101000a81548160ff02191690831515021790555061020082015181600d0160036101000a81548160ff0219169083600381111561172257fe5b02179055509050507fac4a907ec29adcc56774b757ecb1e1b4d597374fc9386107d05e2670259df7d3836040516117599190614fb1565b60405180910390a1505050565b6003602052816000526040600020602052806000526040600020600091509150505481565b60006117ac8b73ffffffffffffffffffffffffffffffffffffffff1661386c565b6117eb576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016117e290614ccf565b60405180910390fd5b60008b90503373ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16636352211e8d6040518263ffffffff1660e01b81526004016118409190614fb1565b60206040518083038186803b15801561185857600080fd5b505afa15801561186c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906118909190613fa6565b73ffffffffffffffffffffffffffffffffffffffff16146118e6576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016118dd90614d2f565b60405180910390fd5b3073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1663081812fc8d6040518263ffffffff1660e01b81526004016119369190614fb1565b60206040518083038186803b15801561194e57600080fd5b505afa158015611962573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906119869190613fa6565b73ffffffffffffffffffffffffffffffffffffffff16146119dc576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016119d390614daf565b60405180910390fd5b6119fb8a73ffffffffffffffffffffffffffffffffffffffff1661386c565b611a3a576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611a3190614f0f565b60405180910390fd5b6000891415611a7e576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611a7590614e4f565b60405180910390fd5b88881015611ac1576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611ab890614e8f565b60405180910390fd5b428711611b03576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611afa90614f2f565b60405180910390fd5b6000861415611b47576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611b3e90614e6f565b60405180910390fd5b6000851415611b8b576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611b8290614dcf565b60405180910390fd5b836000108015611ba25750611b9e61387f565b8411155b611be1576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611bd890614d0f565b60405180910390fd5b611be9613d4b565b33816000019073ffffffffffffffffffffffffffffffffffffffff16908173ffffffffffffffffffffffffffffffffffffffff16815250508c81610100019073ffffffffffffffffffffffffffffffffffffffff16908173ffffffffffffffffffffffffffffffffffffffff16815250508b816101200181815250508a81610140019073ffffffffffffffffffffffffffffffffffffffff16908173ffffffffffffffffffffffffffffffffffffffff168152505089816020018181525050888160400181815250508781606001818152505086816080018181525050848160c0018181525050838160e0018190525060006001549050816002600083815260200190815260200160002060008201518160000160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506020820151816001015560408201518160020155606082015181600301556080820151816004015560a0820151816005015560c0820151816006015560e0820151816007019080519060200190611d93929190613e38565b506101008201518160080160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550610120820151816009015561014082015181600a0160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555061016082015181600b0160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555061018082015181600c01556101a082015181600d0160006101000a81548160ff0219169083151502179055506101c082015181600d0160016101000a81548160ff0219169083151502179055506101e082015181600d0160026101000a81548160ff02191690831515021790555061020082015181600d0160036101000a81548160ff02191690836003811115611f0a57fe5b02179055509050506001600081548092919060010191905055507f03bb6e669c5d9d2143afb3599bda2cc92f483158549e37b474a6dc117f848b68826000015183610100015184610120015185610140015185604051611f6e959493929190614bb6565b60405180910390a18093505050509a9950505050505050505050565b8160026003811115611f9857fe5b611fa18261281e565b6003811115611fac57fe5b14611fec576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611fe390614d4f565b60405180910390fd5b611ff583613893565b821015612037576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161202e90614d6f565b60405180910390fd5b61203f613d4b565b60026000858152602001908152602001600020604051806102200160405290816000820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001600182015481526020016002820154815260200160038201548152602001600482015481526020016005820154815260200160068201548152602001600782018054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156121895780601f1061215e57610100808354040283529160200191612189565b820191906000526020600020905b81548152906001019060200180831161216c57829003601f168201915b505050505081526020016008820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200160098201548152602001600a820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001600b820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001600c8201548152602001600d820160009054906101000a900460ff16151515158152602001600d820160019054906101000a900460ff16151515158152602001600d820160029054906101000a900460ff16151515158152602001600d820160039054906101000a900460ff16600381111561231757fe5b600381111561232257fe5b8152505090506000816101400151905060008173ffffffffffffffffffffffffffffffffffffffff166323b872dd3330886040518463ffffffff1660e01b815260040161237193929190614b48565b602060405180830381600087803b15801561238b57600080fd5b505af115801561239f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906123c391906140c2565b905080612405576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016123fc90614eef565b60405180910390fd5b6000836101800151146124ec578173ffffffffffffffffffffffffffffffffffffffff1663a9059cbb8461016001518561018001516040518363ffffffff1660e01b8152600401612457929190614c09565b602060405180830381600087803b15801561247157600080fd5b505af1158015612485573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906124a991906140c2565b9050806124eb576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016124e290614d8f565b60405180910390fd5b5b84836101800181815250503383610160019073ffffffffffffffffffffffffffffffffffffffff16908173ffffffffffffffffffffffffffffffffffffffff168152505061254b8360a001518460800151613bdb90919063ffffffff16565b836080018181525050826002600088815260200190815260200160002060008201518160000160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506020820151816001015560408201518160020155606082015181600301556080820151816004015560a0820151816005015560c0820151816006015560e0820151816007019080519060200190612607929190613e38565b506101008201518160080160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550610120820151816009015561014082015181600a0160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555061016082015181600b0160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555061018082015181600c01556101a082015181600d0160006101000a81548160ff0219169083151502179055506101c082015181600d0160016101000a81548160ff0219169083151502179055506101e082015181600d0160026101000a81548160ff02191690831515021790555061020082015181600d0160036101000a81548160ff0219169083600381111561277e57fe5b0217905550905050846003600088815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055507fb8d756f2d1da4663767eb4d559780ace84f2f65a421a60ddcb47e8b2e5d2fd2686338760405161280e9392919061501e565b60405180910390a1505050505050565b6000612828613d4b565b60026000848152602001908152602001600020604051806102200160405290816000820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001600182015481526020016002820154815260200160038201548152602001600482015481526020016005820154815260200160068201548152602001600782018054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156129725780601f1061294757610100808354040283529160200191612972565b820191906000526020600020905b81548152906001019060200180831161295557829003601f168201915b505050505081526020016008820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200160098201548152602001600a820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001600b820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001600c8201548152602001600d820160009054906101000a900460ff16151515158152602001600d820160019054906101000a900460ff16151515158152602001600d820160029054906101000a900460ff16151515158152602001600d820160039054906101000a900460ff166003811115612b0057fe5b6003811115612b0b57fe5b815250509050600073ffffffffffffffffffffffffffffffffffffffff16816000015173ffffffffffffffffffffffffffffffffffffffff161415612b54576000915050612bb1565b806101a0015115612b69576003915050612bb1565b8060600151421015612b7f576001915050612bb1565b612b9a81608001518260600151613bdb90919063ffffffff16565b421015612bab576002915050612bb1565b60039150505b919050565b60008160026003811115612bc657fe5b612bcf8261281e565b6003811115612bda57fe5b14612c1a576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612c1190614d4f565b60405180910390fd5b6003600084815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054915050919050565b3373ffffffffffffffffffffffffffffffffffffffff1660008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614612d01576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612cf890614e2f565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff1660008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a360008060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b60008160026003811115612df857fe5b612e018261281e565b6003811115612e0c57fe5b14612e4c576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612e4390614d4f565b60405180910390fd5b612e5583613893565b915050919050565b80600380811115612e6a57fe5b612e738261281e565b6003811115612e7e57fe5b14612ebe576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612eb590614caf565b60405180910390fd5b612ec6613d4b565b60026000848152602001908152602001600020604051806102200160405290816000820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001600182015481526020016002820154815260200160038201548152602001600482015481526020016005820154815260200160068201548152602001600782018054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156130105780601f10612fe557610100808354040283529160200191613010565b820191906000526020600020905b815481529060010190602001808311612ff357829003601f168201915b505050505081526020016008820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200160098201548152602001600a820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001600b820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001600c8201548152602001600d820160009054906101000a900460ff16151515158152602001600d820160019054906101000a900460ff16151515158152602001600d820160029054906101000a900460ff16151515158152602001600d820160039054906101000a900460ff16600381111561319e57fe5b60038111156131a957fe5b8152505090503373ffffffffffffffffffffffffffffffffffffffff1681610160015173ffffffffffffffffffffffffffffffffffffffff1614613222576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161321990614eaf565b60405180910390fd5b806101e0015115613268576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161325f90614f4f565b60405180910390fd5b80610100015173ffffffffffffffffffffffffffffffffffffffff166323b872dd82600001518361016001518461012001516040518463ffffffff1660e01b81526004016132b893929190614b7f565b600060405180830381600087803b1580156132d257600080fd5b505af11580156132e6573d6000803e3d6000fd5b50505050600160026000858152602001908152602001600020600d0160026101000a81548160ff0219169083151502179055507f937214d5c201b3ae02bfb8ff13db1b39b3f359d5b96d4520dff65f8f40e44514833360405161334a929190614ff5565b60405180910390a1505050565b3373ffffffffffffffffffffffffffffffffffffffff1660008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16146133e5576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016133dc90614e2f565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161415613455576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161344c90614c8f565b60405180910390fd5b8073ffffffffffffffffffffffffffffffffffffffff1660008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a3806000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b61351a613d4b565b816000600381111561352857fe5b6135318261281e565b600381111561353c57fe5b141561357d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161357490614def565b60405180910390fd5b60026000848152602001908152602001600020604051806102200160405290816000820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001600182015481526020016002820154815260200160038201548152602001600482015481526020016005820154815260200160068201548152602001600782018054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156136c75780601f1061369c576101008083540402835291602001916136c7565b820191906000526020600020905b8154815290600101906020018083116136aa57829003601f168201915b505050505081526020016008820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200160098201548152602001600a820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001600b820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001600c8201548152602001600d820160009054906101000a900460ff16151515158152602001600d820160019054906101000a900460ff16151515158152602001600d820160029054906101000a900460ff16151515158152602001600d820160039054906101000a900460ff16600381111561385557fe5b600381111561386057fe5b81525050915050919050565b600080823b905060008111915050919050565b60006b033b2e3c9fd0803ce8000000905090565b600061389d613d4b565b60026000848152602001908152602001600020604051806102200160405290816000820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001600182015481526020016002820154815260200160038201548152602001600482015481526020016005820154815260200160068201548152602001600782018054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156139e75780601f106139bc576101008083540402835291602001916139e7565b820191906000526020600020905b8154815290600101906020018083116139ca57829003601f168201915b505050505081526020016008820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200160098201548152602001600a820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001600b820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001600c8201548152602001600d820160009054906101000a900460ff16151515158152602001600d820160019054906101000a900460ff16151515158152602001600d820160029054906101000a900460ff16151515158152602001600d820160039054906101000a900460ff166003811115613b7557fe5b6003811115613b8057fe5b81525050905060008161018001519050613bd281613bc4613b9f61387f565b613bb68660c0015186613c3090919063ffffffff16565b613ca090919063ffffffff16565b613bdb90919063ffffffff16565b92505050919050565b600080828401905083811015613c26576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401613c1d90614cef565b60405180910390fd5b8091505092915050565b600080831415613c435760009050613c9a565b6000828402905082848281613c5457fe5b0414613c95576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401613c8c90614e0f565b60405180910390fd5b809150505b92915050565b6000613ce283836040518060400160405280601a81526020017f536166654d6174683a206469766973696f6e206279207a65726f000000000000815250613cea565b905092915050565b60008083118290613d31576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401613d289190614c4d565b60405180910390fd5b506000838581613d3d57fe5b049050809150509392505050565b604051806102200160405280600073ffffffffffffffffffffffffffffffffffffffff16815260200160008152602001600081526020016000815260200160008152602001600081526020016000815260200160608152602001600073ffffffffffffffffffffffffffffffffffffffff16815260200160008152602001600073ffffffffffffffffffffffffffffffffffffffff168152602001600073ffffffffffffffffffffffffffffffffffffffff1681526020016000815260200160001515815260200160001515815260200160001515815260200160006003811115613e3257fe5b81525090565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f10613e7957805160ff1916838001178555613ea7565b82800160010185558215613ea7579182015b82811115613ea6578251825591602001919060010190613e8b565b5b509050613eb49190613eb8565b5090565b5b80821115613ed1576000816000905550600101613eb9565b5090565b600081359050613ee4816151ef565b92915050565b600081519050613ef9816151ef565b92915050565b600081519050613f0e81615206565b92915050565b600082601f830112613f2557600080fd5b8135613f38613f3382615086565b615055565b91508082526020830160208301858383011115613f5457600080fd5b613f5f838284615186565b50505092915050565b600081359050613f778161521d565b92915050565b600060208284031215613f8f57600080fd5b6000613f9d84828501613ed5565b91505092915050565b600060208284031215613fb857600080fd5b6000613fc684828501613eea565b91505092915050565b6000806000806000806000806000806101408b8d031215613fef57600080fd5b6000613ffd8d828e01613ed5565b9a5050602061400e8d828e01613f68565b995050604061401f8d828e01613ed5565b98505060606140308d828e01613f68565b97505060806140418d828e01613f68565b96505060a06140528d828e01613f68565b95505060c06140638d828e01613f68565b94505060e06140748d828e01613f68565b9350506101006140868d828e01613f68565b9250506101208b013567ffffffffffffffff8111156140a457600080fd5b6140b08d828e01613f14565b9150509295989b9194979a5092959850565b6000602082840312156140d457600080fd5b60006140e284828501613eff565b91505092915050565b6000602082840312156140fd57600080fd5b600061410b84828501613f68565b91505092915050565b6000806040838503121561412757600080fd5b600061413585828601613f68565b925050602061414685828601613ed5565b9150509250929050565b6000806040838503121561416357600080fd5b600061417185828601613f68565b925050602061418285828601613f68565b9150509250929050565b6141958161513e565b82525050565b6141a4816150e3565b82525050565b6141b3816150e3565b82525050565b6141c2816150f5565b82525050565b6141d181615150565b82525050565b6141e081615150565b82525050565b60006141f1826150b6565b6141fb81856150c1565b935061420b818560208601615195565b614214816151ca565b840191505092915050565b600061422a826150b6565b61423481856150d2565b9350614244818560208601615195565b61424d816151ca565b840191505092915050565b6000614265601b836150d2565b91507f53656e646572206973206e6f742061756374696f6e206f776e657200000000006000830152602082019050919050565b60006142a56026836150d2565b91507f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160008301527f64647265737300000000000000000000000000000000000000000000000000006020830152604082019050919050565b600061430b6017836150d2565b91507f41756374696f6e206973206e6f742066696e69736865640000000000000000006000830152602082019050919050565b600061434b601d836150d2565b91507f476976656e206173736574206973206e6f74206120636f6e74726163740000006000830152602082019050919050565b600061438b601b836150d2565b91507f536166654d6174683a206164646974696f6e206f766572666c6f7700000000006000830152602082019050919050565b60006143cb6015836150d2565b91507f496e76616c69642062696420696e6372656d656e7400000000000000000000006000830152602082019050919050565b600061440b6015836150d2565b91507f4973206e6f74206f776e6572206f6620617373657400000000000000000000006000830152602082019050919050565b600061444b6015836150d2565b91507f41756374696f6e206973206e6f742061637469766500000000000000000000006000830152602082019050919050565b600061448b6053836150d2565b91507f42696420616d6f756e74206d757374206578636565642074686520686967686560008301527f73742062696420627920746865206d696e696d756d20696e6372656d656e742060208301527f70657263656e74616765206f72206d6f72652e000000000000000000000000006040830152606082019050919050565b60006145176012836150d2565b91507f4661696c656420746f20706179206261636b00000000000000000000000000006000830152602082019050919050565b60006145576015836150d2565b91507f4173736574206973206e6f7420617070726f76656400000000000000000000006000830152602082019050919050565b60006145976019836150d2565b91507f496e76616c69642061756374696f6e20696e6372656d656e74000000000000006000830152602082019050919050565b60006145d76016836150d2565b91507f41756374696f6e20646f6573206e6f74206578697374000000000000000000006000830152602082019050919050565b60006146176021836150d2565b91507f536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f60008301527f77000000000000000000000000000000000000000000000000000000000000006020830152604082019050919050565b600061467d6020836150d2565b91507f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726000830152602082019050919050565b60006146bd6013836150d2565b91507f496e76616c6964207374617274207072696365000000000000000000000000006000830152602082019050919050565b60006146fd6018836150d2565b91507f496e76616c69642061756374696f6e206475726174696f6e00000000000000006000830152602082019050919050565b600061473d6033836150d2565b91507f427579206e6f772070726963652073686f756c6420686967686572206f72206560008301527f7175616c20746f207374617274207072696365000000000000000000000000006020830152604082019050919050565b60006147a36014836150d2565b91507f53656e646572206973206e6f742077696e6e65720000000000000000000000006000830152602082019050919050565b60006147e3602a836150d2565b91507f5468652072657061796d656e742068617320616c7265616479206265656e207460008301527f72616e73666572726564000000000000000000000000000000000000000000006020830152604082019050919050565b60006148496020836150d2565b91507f4661696c656420746f207472616e7366657220746f6b656e7320746f206269646000830152602082019050919050565b6000614889601d836150d2565b91507f476976656e20746f6b656e206973206e6f74206120636f6e74726163740000006000830152602082019050919050565b60006148c9601d836150d2565b91507f496e76616c69642073746172742074696d65206f662061756374696f6e0000006000830152602082019050919050565b60006149096024836150d2565b91507f546865206c6f742068617320616c7265616479206265656e207472616e73666560008301527f72726564000000000000000000000000000000000000000000000000000000006020830152604082019050919050565b600061496f6020836150d2565b91507f4661696c656420746f207472616e73666572207468652072657061796d656e746000830152602082019050919050565b6000610220830160008301516149bb600086018261419b565b5060208301516149ce6020860182614b0f565b5060408301516149e16040860182614b0f565b5060608301516149f46060860182614b0f565b506080830151614a076080860182614b0f565b5060a0830151614a1a60a0860182614b0f565b5060c0830151614a2d60c0860182614b0f565b5060e083015184820360e0860152614a4582826141e6565b915050610100830151614a5c61010086018261419b565b50610120830151614a71610120860182614b0f565b50610140830151614a8661014086018261419b565b50610160830151614a9b61016086018261419b565b50610180830151614ab0610180860182614b0f565b506101a0830151614ac56101a08601826141b9565b506101c0830151614ada6101c08601826141b9565b506101e0830151614aef6101e08601826141b9565b50610200830151614b046102008601826141c8565b508091505092915050565b614b1881615134565b82525050565b614b2781615134565b82525050565b6000602082019050614b4260008301846141aa565b92915050565b6000606082019050614b5d600083018661418c565b614b6a60208301856141aa565b614b776040830184614b1e565b949350505050565b6000606082019050614b9460008301866141aa565b614ba160208301856141aa565b614bae6040830184614b1e565b949350505050565b600060a082019050614bcb60008301886141aa565b614bd860208301876141aa565b614be56040830186614b1e565b614bf260608301856141aa565b614bff6080830184614b1e565b9695505050505050565b6000604082019050614c1e60008301856141aa565b614c2b6020830184614b1e565b9392505050565b6000602082019050614c4760008301846141d7565b92915050565b60006020820190508181036000830152614c67818461421f565b905092915050565b60006020820190508181036000830152614c8881614258565b9050919050565b60006020820190508181036000830152614ca881614298565b9050919050565b60006020820190508181036000830152614cc8816142fe565b9050919050565b60006020820190508181036000830152614ce88161433e565b9050919050565b60006020820190508181036000830152614d088161437e565b9050919050565b60006020820190508181036000830152614d28816143be565b9050919050565b60006020820190508181036000830152614d48816143fe565b9050919050565b60006020820190508181036000830152614d688161443e565b9050919050565b60006020820190508181036000830152614d888161447e565b9050919050565b60006020820190508181036000830152614da88161450a565b9050919050565b60006020820190508181036000830152614dc88161454a565b9050919050565b60006020820190508181036000830152614de88161458a565b9050919050565b60006020820190508181036000830152614e08816145ca565b9050919050565b60006020820190508181036000830152614e288161460a565b9050919050565b60006020820190508181036000830152614e4881614670565b9050919050565b60006020820190508181036000830152614e68816146b0565b9050919050565b60006020820190508181036000830152614e88816146f0565b9050919050565b60006020820190508181036000830152614ea881614730565b9050919050565b60006020820190508181036000830152614ec881614796565b9050919050565b60006020820190508181036000830152614ee8816147d6565b9050919050565b60006020820190508181036000830152614f088161483c565b9050919050565b60006020820190508181036000830152614f288161487c565b9050919050565b60006020820190508181036000830152614f48816148bc565b9050919050565b60006020820190508181036000830152614f68816148fc565b9050919050565b60006020820190508181036000830152614f8881614962565b9050919050565b60006020820190508181036000830152614fa981846149a2565b905092915050565b6000602082019050614fc66000830184614b1e565b92915050565b6000604082019050614fe16000830185614b1e565b614fee60208301846141aa565b9392505050565b600060408201905061500a6000830185614b1e565b615017602083018461418c565b9392505050565b60006060820190506150336000830186614b1e565b615040602083018561418c565b61504d6040830184614b1e565b949350505050565b6000604051905081810181811067ffffffffffffffff8211171561507c5761507b6151c8565b5b8060405250919050565b600067ffffffffffffffff8211156150a1576150a06151c8565b5b601f19601f8301169050602081019050919050565b600081519050919050565b600082825260208201905092915050565b600082825260208201905092915050565b60006150ee82615114565b9050919050565b60008115159050919050565b600081905061510f826151db565b919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b600061514982615162565b9050919050565b600061515b82615101565b9050919050565b600061516d82615174565b9050919050565b600061517f82615114565b9050919050565b82818337600083830152505050565b60005b838110156151b3578082015181840152602081019050615198565b838111156151c2576000848401525b50505050565bfe5b6000601f19601f8301169050919050565b600481106151ec576151eb6151c8565b5b50565b6151f8816150e3565b811461520357600080fd5b50565b61520f816150f5565b811461521a57600080fd5b50565b61522681615134565b811461523157600080fd5b5056fea2646970667358221220035e53171f3916e3238e9817d3c335f360b96737ed9ec66dfa5db033049ad0bb64736f6c63430007020033"

// DeployAuction deploys a new Ethereum contract, binding an instance of Auction to it.
func DeployAuction(auth *bind.TransactOpts, backend bind.ContractBackend) (common.Address, *types.Transaction, *Auction, error) {
	parsed, err := abi.JSON(strings.NewReader(AuctionABI))
	if err != nil {
		return common.Address{}, nil, nil, err
	}

	address, tx, contract, err := bind.DeployContract(auth, parsed, common.FromHex(AuctionBin), backend)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &Auction{AuctionCaller: AuctionCaller{contract: contract}, AuctionTransactor: AuctionTransactor{contract: contract}, AuctionFilterer: AuctionFilterer{contract: contract}}, nil
}

// Auction is an auto generated Go binding around an Ethereum contract.
type Auction struct {
	AuctionCaller     // Read-only binding to the contract
	AuctionTransactor // Write-only binding to the contract
	AuctionFilterer   // Log filterer for contract events
}

// AuctionCaller is an auto generated read-only Go binding around an Ethereum contract.
type AuctionCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// AuctionTransactor is an auto generated write-only Go binding around an Ethereum contract.
type AuctionTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// AuctionFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type AuctionFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// AuctionSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type AuctionSession struct {
	Contract     *Auction          // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// AuctionCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type AuctionCallerSession struct {
	Contract *AuctionCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts  // Call options to use throughout this session
}

// AuctionTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type AuctionTransactorSession struct {
	Contract     *AuctionTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts  // Transaction auth options to use throughout this session
}

// AuctionRaw is an auto generated low-level Go binding around an Ethereum contract.
type AuctionRaw struct {
	Contract *Auction // Generic contract binding to access the raw methods on
}

// AuctionCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type AuctionCallerRaw struct {
	Contract *AuctionCaller // Generic read-only contract binding to access the raw methods on
}

// AuctionTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type AuctionTransactorRaw struct {
	Contract *AuctionTransactor // Generic write-only contract binding to access the raw methods on
}

// NewAuction creates a new instance of Auction, bound to a specific deployed contract.
func NewAuction(address common.Address, backend bind.ContractBackend) (*Auction, error) {
	contract, err := bindAuction(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &Auction{AuctionCaller: AuctionCaller{contract: contract}, AuctionTransactor: AuctionTransactor{contract: contract}, AuctionFilterer: AuctionFilterer{contract: contract}}, nil
}

// NewAuctionCaller creates a new read-only instance of Auction, bound to a specific deployed contract.
func NewAuctionCaller(address common.Address, caller bind.ContractCaller) (*AuctionCaller, error) {
	contract, err := bindAuction(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &AuctionCaller{contract: contract}, nil
}

// NewAuctionTransactor creates a new write-only instance of Auction, bound to a specific deployed contract.
func NewAuctionTransactor(address common.Address, transactor bind.ContractTransactor) (*AuctionTransactor, error) {
	contract, err := bindAuction(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &AuctionTransactor{contract: contract}, nil
}

// NewAuctionFilterer creates a new log filterer instance of Auction, bound to a specific deployed contract.
func NewAuctionFilterer(address common.Address, filterer bind.ContractFilterer) (*AuctionFilterer, error) {
	contract, err := bindAuction(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &AuctionFilterer{contract: contract}, nil
}

// bindAuction binds a generic wrapper to an already deployed contract.
func bindAuction(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := abi.JSON(strings.NewReader(AuctionABI))
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_Auction *AuctionRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _Auction.Contract.AuctionCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_Auction *AuctionRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Auction.Contract.AuctionTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_Auction *AuctionRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _Auction.Contract.AuctionTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_Auction *AuctionCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _Auction.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_Auction *AuctionTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Auction.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_Auction *AuctionTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _Auction.Contract.contract.Transact(opts, method, params...)
}

// GetAuctionInfo is a free data retrieval call binding the contract method 0xfc3fc4ed.
//
// Solidity: function getAuctionInfo(uint256 _auctionId) view returns((address,uint256,uint256,uint256,uint256,uint256,uint256,string,address,uint256,address,address,uint256,bool,bool,bool,uint8))
func (_Auction *AuctionCaller) GetAuctionInfo(opts *bind.CallOpts, _auctionId *big.Int) (AuctionAuctionInfo, error) {
	var out []interface{}
	err := _Auction.contract.Call(opts, &out, "getAuctionInfo", _auctionId)

	if err != nil {
		return *new(AuctionAuctionInfo), err
	}

	out0 := *abi.ConvertType(out[0], new(AuctionAuctionInfo)).(*AuctionAuctionInfo)

	return out0, err

}

// GetAuctionInfo is a free data retrieval call binding the contract method 0xfc3fc4ed.
//
// Solidity: function getAuctionInfo(uint256 _auctionId) view returns((address,uint256,uint256,uint256,uint256,uint256,uint256,string,address,uint256,address,address,uint256,bool,bool,bool,uint8))
func (_Auction *AuctionSession) GetAuctionInfo(_auctionId *big.Int) (AuctionAuctionInfo, error) {
	return _Auction.Contract.GetAuctionInfo(&_Auction.CallOpts, _auctionId)
}

// GetAuctionInfo is a free data retrieval call binding the contract method 0xfc3fc4ed.
//
// Solidity: function getAuctionInfo(uint256 _auctionId) view returns((address,uint256,uint256,uint256,uint256,uint256,uint256,string,address,uint256,address,address,uint256,bool,bool,bool,uint8))
func (_Auction *AuctionCallerSession) GetAuctionInfo(_auctionId *big.Int) (AuctionAuctionInfo, error) {
	return _Auction.Contract.GetAuctionInfo(&_Auction.CallOpts, _auctionId)
}

// GetRaisingBid is a free data retrieval call binding the contract method 0xa2165920.
//
// Solidity: function getRaisingBid(uint256 _auctionId) view returns(uint256)
func (_Auction *AuctionCaller) GetRaisingBid(opts *bind.CallOpts, _auctionId *big.Int) (*big.Int, error) {
	var out []interface{}
	err := _Auction.contract.Call(opts, &out, "getRaisingBid", _auctionId)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// GetRaisingBid is a free data retrieval call binding the contract method 0xa2165920.
//
// Solidity: function getRaisingBid(uint256 _auctionId) view returns(uint256)
func (_Auction *AuctionSession) GetRaisingBid(_auctionId *big.Int) (*big.Int, error) {
	return _Auction.Contract.GetRaisingBid(&_Auction.CallOpts, _auctionId)
}

// GetRaisingBid is a free data retrieval call binding the contract method 0xa2165920.
//
// Solidity: function getRaisingBid(uint256 _auctionId) view returns(uint256)
func (_Auction *AuctionCallerSession) GetRaisingBid(_auctionId *big.Int) (*big.Int, error) {
	return _Auction.Contract.GetRaisingBid(&_Auction.CallOpts, _auctionId)
}

// GetStatus is a free data retrieval call binding the contract method 0x5c622a0e.
//
// Solidity: function getStatus(uint256 _auctionId) view returns(uint8)
func (_Auction *AuctionCaller) GetStatus(opts *bind.CallOpts, _auctionId *big.Int) (uint8, error) {
	var out []interface{}
	err := _Auction.contract.Call(opts, &out, "getStatus", _auctionId)

	if err != nil {
		return *new(uint8), err
	}

	out0 := *abi.ConvertType(out[0], new(uint8)).(*uint8)

	return out0, err

}

// GetStatus is a free data retrieval call binding the contract method 0x5c622a0e.
//
// Solidity: function getStatus(uint256 _auctionId) view returns(uint8)
func (_Auction *AuctionSession) GetStatus(_auctionId *big.Int) (uint8, error) {
	return _Auction.Contract.GetStatus(&_Auction.CallOpts, _auctionId)
}

// GetStatus is a free data retrieval call binding the contract method 0x5c622a0e.
//
// Solidity: function getStatus(uint256 _auctionId) view returns(uint8)
func (_Auction *AuctionCallerSession) GetStatus(_auctionId *big.Int) (uint8, error) {
	return _Auction.Contract.GetStatus(&_Auction.CallOpts, _auctionId)
}

// GetUserLatestBid is a free data retrieval call binding the contract method 0x6f1a9abb.
//
// Solidity: function getUserLatestBid(uint256 _auctionId) view returns(uint256)
func (_Auction *AuctionCaller) GetUserLatestBid(opts *bind.CallOpts, _auctionId *big.Int) (*big.Int, error) {
	var out []interface{}
	err := _Auction.contract.Call(opts, &out, "getUserLatestBid", _auctionId)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// GetUserLatestBid is a free data retrieval call binding the contract method 0x6f1a9abb.
//
// Solidity: function getUserLatestBid(uint256 _auctionId) view returns(uint256)
func (_Auction *AuctionSession) GetUserLatestBid(_auctionId *big.Int) (*big.Int, error) {
	return _Auction.Contract.GetUserLatestBid(&_Auction.CallOpts, _auctionId)
}

// GetUserLatestBid is a free data retrieval call binding the contract method 0x6f1a9abb.
//
// Solidity: function getUserLatestBid(uint256 _auctionId) view returns(uint256)
func (_Auction *AuctionCallerSession) GetUserLatestBid(_auctionId *big.Int) (*big.Int, error) {
	return _Auction.Contract.GetUserLatestBid(&_Auction.CallOpts, _auctionId)
}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() view returns(address)
func (_Auction *AuctionCaller) Owner(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _Auction.contract.Call(opts, &out, "owner")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() view returns(address)
func (_Auction *AuctionSession) Owner() (common.Address, error) {
	return _Auction.Contract.Owner(&_Auction.CallOpts)
}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() view returns(address)
func (_Auction *AuctionCallerSession) Owner() (common.Address, error) {
	return _Auction.Contract.Owner(&_Auction.CallOpts)
}

// UserBids is a free data retrieval call binding the contract method 0x2b76708b.
//
// Solidity: function userBids(uint256 , address ) view returns(uint256)
func (_Auction *AuctionCaller) UserBids(opts *bind.CallOpts, arg0 *big.Int, arg1 common.Address) (*big.Int, error) {
	var out []interface{}
	err := _Auction.contract.Call(opts, &out, "userBids", arg0, arg1)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// UserBids is a free data retrieval call binding the contract method 0x2b76708b.
//
// Solidity: function userBids(uint256 , address ) view returns(uint256)
func (_Auction *AuctionSession) UserBids(arg0 *big.Int, arg1 common.Address) (*big.Int, error) {
	return _Auction.Contract.UserBids(&_Auction.CallOpts, arg0, arg1)
}

// UserBids is a free data retrieval call binding the contract method 0x2b76708b.
//
// Solidity: function userBids(uint256 , address ) view returns(uint256)
func (_Auction *AuctionCallerSession) UserBids(arg0 *big.Int, arg1 common.Address) (*big.Int, error) {
	return _Auction.Contract.UserBids(&_Auction.CallOpts, arg0, arg1)
}

// Bid is a paid mutator transaction binding the contract method 0x598647f8.
//
// Solidity: function bid(uint256 _auctionId, uint256 _amount) returns()
func (_Auction *AuctionTransactor) Bid(opts *bind.TransactOpts, _auctionId *big.Int, _amount *big.Int) (*types.Transaction, error) {
	return _Auction.contract.Transact(opts, "bid", _auctionId, _amount)
}

// Bid is a paid mutator transaction binding the contract method 0x598647f8.
//
// Solidity: function bid(uint256 _auctionId, uint256 _amount) returns()
func (_Auction *AuctionSession) Bid(_auctionId *big.Int, _amount *big.Int) (*types.Transaction, error) {
	return _Auction.Contract.Bid(&_Auction.TransactOpts, _auctionId, _amount)
}

// Bid is a paid mutator transaction binding the contract method 0x598647f8.
//
// Solidity: function bid(uint256 _auctionId, uint256 _amount) returns()
func (_Auction *AuctionTransactorSession) Bid(_auctionId *big.Int, _amount *big.Int) (*types.Transaction, error) {
	return _Auction.Contract.Bid(&_Auction.TransactOpts, _auctionId, _amount)
}

// BuyNow is a paid mutator transaction binding the contract method 0x08a0f32f.
//
// Solidity: function buyNow(uint256 _auctionId) returns()
func (_Auction *AuctionTransactor) BuyNow(opts *bind.TransactOpts, _auctionId *big.Int) (*types.Transaction, error) {
	return _Auction.contract.Transact(opts, "buyNow", _auctionId)
}

// BuyNow is a paid mutator transaction binding the contract method 0x08a0f32f.
//
// Solidity: function buyNow(uint256 _auctionId) returns()
func (_Auction *AuctionSession) BuyNow(_auctionId *big.Int) (*types.Transaction, error) {
	return _Auction.Contract.BuyNow(&_Auction.TransactOpts, _auctionId)
}

// BuyNow is a paid mutator transaction binding the contract method 0x08a0f32f.
//
// Solidity: function buyNow(uint256 _auctionId) returns()
func (_Auction *AuctionTransactorSession) BuyNow(_auctionId *big.Int) (*types.Transaction, error) {
	return _Auction.Contract.BuyNow(&_Auction.TransactOpts, _auctionId)
}

// ClaimLot is a paid mutator transaction binding the contract method 0xf2da0664.
//
// Solidity: function claimLot(uint256 _auctionId) returns()
func (_Auction *AuctionTransactor) ClaimLot(opts *bind.TransactOpts, _auctionId *big.Int) (*types.Transaction, error) {
	return _Auction.contract.Transact(opts, "claimLot", _auctionId)
}

// ClaimLot is a paid mutator transaction binding the contract method 0xf2da0664.
//
// Solidity: function claimLot(uint256 _auctionId) returns()
func (_Auction *AuctionSession) ClaimLot(_auctionId *big.Int) (*types.Transaction, error) {
	return _Auction.Contract.ClaimLot(&_Auction.TransactOpts, _auctionId)
}

// ClaimLot is a paid mutator transaction binding the contract method 0xf2da0664.
//
// Solidity: function claimLot(uint256 _auctionId) returns()
func (_Auction *AuctionTransactorSession) ClaimLot(_auctionId *big.Int) (*types.Transaction, error) {
	return _Auction.Contract.ClaimLot(&_Auction.TransactOpts, _auctionId)
}

// ClaimRepayment is a paid mutator transaction binding the contract method 0x00d878e8.
//
// Solidity: function claimRepayment(uint256 _auctionId) returns()
func (_Auction *AuctionTransactor) ClaimRepayment(opts *bind.TransactOpts, _auctionId *big.Int) (*types.Transaction, error) {
	return _Auction.contract.Transact(opts, "claimRepayment", _auctionId)
}

// ClaimRepayment is a paid mutator transaction binding the contract method 0x00d878e8.
//
// Solidity: function claimRepayment(uint256 _auctionId) returns()
func (_Auction *AuctionSession) ClaimRepayment(_auctionId *big.Int) (*types.Transaction, error) {
	return _Auction.Contract.ClaimRepayment(&_Auction.TransactOpts, _auctionId)
}

// ClaimRepayment is a paid mutator transaction binding the contract method 0x00d878e8.
//
// Solidity: function claimRepayment(uint256 _auctionId) returns()
func (_Auction *AuctionTransactorSession) ClaimRepayment(_auctionId *big.Int) (*types.Transaction, error) {
	return _Auction.Contract.ClaimRepayment(&_Auction.TransactOpts, _auctionId)
}

// CloseAuction is a paid mutator transaction binding the contract method 0x236ed8f3.
//
// Solidity: function closeAuction(uint256 _auctionId) returns()
func (_Auction *AuctionTransactor) CloseAuction(opts *bind.TransactOpts, _auctionId *big.Int) (*types.Transaction, error) {
	return _Auction.contract.Transact(opts, "closeAuction", _auctionId)
}

// CloseAuction is a paid mutator transaction binding the contract method 0x236ed8f3.
//
// Solidity: function closeAuction(uint256 _auctionId) returns()
func (_Auction *AuctionSession) CloseAuction(_auctionId *big.Int) (*types.Transaction, error) {
	return _Auction.Contract.CloseAuction(&_Auction.TransactOpts, _auctionId)
}

// CloseAuction is a paid mutator transaction binding the contract method 0x236ed8f3.
//
// Solidity: function closeAuction(uint256 _auctionId) returns()
func (_Auction *AuctionTransactorSession) CloseAuction(_auctionId *big.Int) (*types.Transaction, error) {
	return _Auction.Contract.CloseAuction(&_Auction.TransactOpts, _auctionId)
}

// CreateAuction is a paid mutator transaction binding the contract method 0x4bc28ede.
//
// Solidity: function createAuction(address _assetAddress, uint256 _assetId, address _currencyAddress, uint256 _startPrice, uint256 _buyNowPrice, uint256 _startTime, uint256 _duration, uint256 _durationIncrement, uint256 _bidIncrement, string _description) returns(uint256)
func (_Auction *AuctionTransactor) CreateAuction(opts *bind.TransactOpts, _assetAddress common.Address, _assetId *big.Int, _currencyAddress common.Address, _startPrice *big.Int, _buyNowPrice *big.Int, _startTime *big.Int, _duration *big.Int, _durationIncrement *big.Int, _bidIncrement *big.Int, _description string) (*types.Transaction, error) {
	return _Auction.contract.Transact(opts, "createAuction", _assetAddress, _assetId, _currencyAddress, _startPrice, _buyNowPrice, _startTime, _duration, _durationIncrement, _bidIncrement, _description)
}

// CreateAuction is a paid mutator transaction binding the contract method 0x4bc28ede.
//
// Solidity: function createAuction(address _assetAddress, uint256 _assetId, address _currencyAddress, uint256 _startPrice, uint256 _buyNowPrice, uint256 _startTime, uint256 _duration, uint256 _durationIncrement, uint256 _bidIncrement, string _description) returns(uint256)
func (_Auction *AuctionSession) CreateAuction(_assetAddress common.Address, _assetId *big.Int, _currencyAddress common.Address, _startPrice *big.Int, _buyNowPrice *big.Int, _startTime *big.Int, _duration *big.Int, _durationIncrement *big.Int, _bidIncrement *big.Int, _description string) (*types.Transaction, error) {
	return _Auction.Contract.CreateAuction(&_Auction.TransactOpts, _assetAddress, _assetId, _currencyAddress, _startPrice, _buyNowPrice, _startTime, _duration, _durationIncrement, _bidIncrement, _description)
}

// CreateAuction is a paid mutator transaction binding the contract method 0x4bc28ede.
//
// Solidity: function createAuction(address _assetAddress, uint256 _assetId, address _currencyAddress, uint256 _startPrice, uint256 _buyNowPrice, uint256 _startTime, uint256 _duration, uint256 _durationIncrement, uint256 _bidIncrement, string _description) returns(uint256)
func (_Auction *AuctionTransactorSession) CreateAuction(_assetAddress common.Address, _assetId *big.Int, _currencyAddress common.Address, _startPrice *big.Int, _buyNowPrice *big.Int, _startTime *big.Int, _duration *big.Int, _durationIncrement *big.Int, _bidIncrement *big.Int, _description string) (*types.Transaction, error) {
	return _Auction.Contract.CreateAuction(&_Auction.TransactOpts, _assetAddress, _assetId, _currencyAddress, _startPrice, _buyNowPrice, _startTime, _duration, _durationIncrement, _bidIncrement, _description)
}

// RenounceOwnership is a paid mutator transaction binding the contract method 0x715018a6.
//
// Solidity: function renounceOwnership() returns()
func (_Auction *AuctionTransactor) RenounceOwnership(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Auction.contract.Transact(opts, "renounceOwnership")
}

// RenounceOwnership is a paid mutator transaction binding the contract method 0x715018a6.
//
// Solidity: function renounceOwnership() returns()
func (_Auction *AuctionSession) RenounceOwnership() (*types.Transaction, error) {
	return _Auction.Contract.RenounceOwnership(&_Auction.TransactOpts)
}

// RenounceOwnership is a paid mutator transaction binding the contract method 0x715018a6.
//
// Solidity: function renounceOwnership() returns()
func (_Auction *AuctionTransactorSession) RenounceOwnership() (*types.Transaction, error) {
	return _Auction.Contract.RenounceOwnership(&_Auction.TransactOpts)
}

// TransferOwnership is a paid mutator transaction binding the contract method 0xf2fde38b.
//
// Solidity: function transferOwnership(address _newOwner) returns()
func (_Auction *AuctionTransactor) TransferOwnership(opts *bind.TransactOpts, _newOwner common.Address) (*types.Transaction, error) {
	return _Auction.contract.Transact(opts, "transferOwnership", _newOwner)
}

// TransferOwnership is a paid mutator transaction binding the contract method 0xf2fde38b.
//
// Solidity: function transferOwnership(address _newOwner) returns()
func (_Auction *AuctionSession) TransferOwnership(_newOwner common.Address) (*types.Transaction, error) {
	return _Auction.Contract.TransferOwnership(&_Auction.TransactOpts, _newOwner)
}

// TransferOwnership is a paid mutator transaction binding the contract method 0xf2fde38b.
//
// Solidity: function transferOwnership(address _newOwner) returns()
func (_Auction *AuctionTransactorSession) TransferOwnership(_newOwner common.Address) (*types.Transaction, error) {
	return _Auction.Contract.TransferOwnership(&_Auction.TransactOpts, _newOwner)
}

// AuctionAssetClaimedIterator is returned from FilterAssetClaimed and is used to iterate over the raw logs and unpacked data for AssetClaimed events raised by the Auction contract.
type AuctionAssetClaimedIterator struct {
	Event *AuctionAssetClaimed // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *AuctionAssetClaimedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(AuctionAssetClaimed)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(AuctionAssetClaimed)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *AuctionAssetClaimedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *AuctionAssetClaimedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// AuctionAssetClaimed represents a AssetClaimed event raised by the Auction contract.
type AuctionAssetClaimed struct {
	AuctionId *big.Int
	Winner    common.Address
	Raw       types.Log // Blockchain specific contextual infos
}

// FilterAssetClaimed is a free log retrieval operation binding the contract event 0x937214d5c201b3ae02bfb8ff13db1b39b3f359d5b96d4520dff65f8f40e44514.
//
// Solidity: event AssetClaimed(uint256 _auctionId, address _winner)
func (_Auction *AuctionFilterer) FilterAssetClaimed(opts *bind.FilterOpts) (*AuctionAssetClaimedIterator, error) {

	logs, sub, err := _Auction.contract.FilterLogs(opts, "AssetClaimed")
	if err != nil {
		return nil, err
	}
	return &AuctionAssetClaimedIterator{contract: _Auction.contract, event: "AssetClaimed", logs: logs, sub: sub}, nil
}

// WatchAssetClaimed is a free log subscription operation binding the contract event 0x937214d5c201b3ae02bfb8ff13db1b39b3f359d5b96d4520dff65f8f40e44514.
//
// Solidity: event AssetClaimed(uint256 _auctionId, address _winner)
func (_Auction *AuctionFilterer) WatchAssetClaimed(opts *bind.WatchOpts, sink chan<- *AuctionAssetClaimed) (event.Subscription, error) {

	logs, sub, err := _Auction.contract.WatchLogs(opts, "AssetClaimed")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(AuctionAssetClaimed)
				if err := _Auction.contract.UnpackLog(event, "AssetClaimed", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseAssetClaimed is a log parse operation binding the contract event 0x937214d5c201b3ae02bfb8ff13db1b39b3f359d5b96d4520dff65f8f40e44514.
//
// Solidity: event AssetClaimed(uint256 _auctionId, address _winner)
func (_Auction *AuctionFilterer) ParseAssetClaimed(log types.Log) (*AuctionAssetClaimed, error) {
	event := new(AuctionAssetClaimed)
	if err := _Auction.contract.UnpackLog(event, "AssetClaimed", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// AuctionAuctionBidIterator is returned from FilterAuctionBid and is used to iterate over the raw logs and unpacked data for AuctionBid events raised by the Auction contract.
type AuctionAuctionBidIterator struct {
	Event *AuctionAuctionBid // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *AuctionAuctionBidIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(AuctionAuctionBid)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(AuctionAuctionBid)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *AuctionAuctionBidIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *AuctionAuctionBidIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// AuctionAuctionBid represents a AuctionBid event raised by the Auction contract.
type AuctionAuctionBid struct {
	AuctionId *big.Int
	Bidder    common.Address
	Amount    *big.Int
	Raw       types.Log // Blockchain specific contextual infos
}

// FilterAuctionBid is a free log retrieval operation binding the contract event 0xb8d756f2d1da4663767eb4d559780ace84f2f65a421a60ddcb47e8b2e5d2fd26.
//
// Solidity: event AuctionBid(uint256 _auctionId, address _bidder, uint256 _amount)
func (_Auction *AuctionFilterer) FilterAuctionBid(opts *bind.FilterOpts) (*AuctionAuctionBidIterator, error) {

	logs, sub, err := _Auction.contract.FilterLogs(opts, "AuctionBid")
	if err != nil {
		return nil, err
	}
	return &AuctionAuctionBidIterator{contract: _Auction.contract, event: "AuctionBid", logs: logs, sub: sub}, nil
}

// WatchAuctionBid is a free log subscription operation binding the contract event 0xb8d756f2d1da4663767eb4d559780ace84f2f65a421a60ddcb47e8b2e5d2fd26.
//
// Solidity: event AuctionBid(uint256 _auctionId, address _bidder, uint256 _amount)
func (_Auction *AuctionFilterer) WatchAuctionBid(opts *bind.WatchOpts, sink chan<- *AuctionAuctionBid) (event.Subscription, error) {

	logs, sub, err := _Auction.contract.WatchLogs(opts, "AuctionBid")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(AuctionAuctionBid)
				if err := _Auction.contract.UnpackLog(event, "AuctionBid", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseAuctionBid is a log parse operation binding the contract event 0xb8d756f2d1da4663767eb4d559780ace84f2f65a421a60ddcb47e8b2e5d2fd26.
//
// Solidity: event AuctionBid(uint256 _auctionId, address _bidder, uint256 _amount)
func (_Auction *AuctionFilterer) ParseAuctionBid(log types.Log) (*AuctionAuctionBid, error) {
	event := new(AuctionAuctionBid)
	if err := _Auction.contract.UnpackLog(event, "AuctionBid", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// AuctionAuctionClosedIterator is returned from FilterAuctionClosed and is used to iterate over the raw logs and unpacked data for AuctionClosed events raised by the Auction contract.
type AuctionAuctionClosedIterator struct {
	Event *AuctionAuctionClosed // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *AuctionAuctionClosedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(AuctionAuctionClosed)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(AuctionAuctionClosed)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *AuctionAuctionClosedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *AuctionAuctionClosedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// AuctionAuctionClosed represents a AuctionClosed event raised by the Auction contract.
type AuctionAuctionClosed struct {
	AuctionId *big.Int
	Raw       types.Log // Blockchain specific contextual infos
}

// FilterAuctionClosed is a free log retrieval operation binding the contract event 0xac4a907ec29adcc56774b757ecb1e1b4d597374fc9386107d05e2670259df7d3.
//
// Solidity: event AuctionClosed(uint256 _auctionId)
func (_Auction *AuctionFilterer) FilterAuctionClosed(opts *bind.FilterOpts) (*AuctionAuctionClosedIterator, error) {

	logs, sub, err := _Auction.contract.FilterLogs(opts, "AuctionClosed")
	if err != nil {
		return nil, err
	}
	return &AuctionAuctionClosedIterator{contract: _Auction.contract, event: "AuctionClosed", logs: logs, sub: sub}, nil
}

// WatchAuctionClosed is a free log subscription operation binding the contract event 0xac4a907ec29adcc56774b757ecb1e1b4d597374fc9386107d05e2670259df7d3.
//
// Solidity: event AuctionClosed(uint256 _auctionId)
func (_Auction *AuctionFilterer) WatchAuctionClosed(opts *bind.WatchOpts, sink chan<- *AuctionAuctionClosed) (event.Subscription, error) {

	logs, sub, err := _Auction.contract.WatchLogs(opts, "AuctionClosed")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(AuctionAuctionClosed)
				if err := _Auction.contract.UnpackLog(event, "AuctionClosed", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseAuctionClosed is a log parse operation binding the contract event 0xac4a907ec29adcc56774b757ecb1e1b4d597374fc9386107d05e2670259df7d3.
//
// Solidity: event AuctionClosed(uint256 _auctionId)
func (_Auction *AuctionFilterer) ParseAuctionClosed(log types.Log) (*AuctionAuctionClosed, error) {
	event := new(AuctionAuctionClosed)
	if err := _Auction.contract.UnpackLog(event, "AuctionClosed", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// AuctionAuctionCreatedIterator is returned from FilterAuctionCreated and is used to iterate over the raw logs and unpacked data for AuctionCreated events raised by the Auction contract.
type AuctionAuctionCreatedIterator struct {
	Event *AuctionAuctionCreated // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *AuctionAuctionCreatedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(AuctionAuctionCreated)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(AuctionAuctionCreated)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *AuctionAuctionCreatedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *AuctionAuctionCreatedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// AuctionAuctionCreated represents a AuctionCreated event raised by the Auction contract.
type AuctionAuctionCreated struct {
	Creator   common.Address
	Asset     common.Address
	AssetId   *big.Int
	Token     common.Address
	AuctionId *big.Int
	Raw       types.Log // Blockchain specific contextual infos
}

// FilterAuctionCreated is a free log retrieval operation binding the contract event 0x03bb6e669c5d9d2143afb3599bda2cc92f483158549e37b474a6dc117f848b68.
//
// Solidity: event AuctionCreated(address _creator, address _asset, uint256 assetId, address _token, uint256 _auctionId)
func (_Auction *AuctionFilterer) FilterAuctionCreated(opts *bind.FilterOpts) (*AuctionAuctionCreatedIterator, error) {

	logs, sub, err := _Auction.contract.FilterLogs(opts, "AuctionCreated")
	if err != nil {
		return nil, err
	}
	return &AuctionAuctionCreatedIterator{contract: _Auction.contract, event: "AuctionCreated", logs: logs, sub: sub}, nil
}

// WatchAuctionCreated is a free log subscription operation binding the contract event 0x03bb6e669c5d9d2143afb3599bda2cc92f483158549e37b474a6dc117f848b68.
//
// Solidity: event AuctionCreated(address _creator, address _asset, uint256 assetId, address _token, uint256 _auctionId)
func (_Auction *AuctionFilterer) WatchAuctionCreated(opts *bind.WatchOpts, sink chan<- *AuctionAuctionCreated) (event.Subscription, error) {

	logs, sub, err := _Auction.contract.WatchLogs(opts, "AuctionCreated")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(AuctionAuctionCreated)
				if err := _Auction.contract.UnpackLog(event, "AuctionCreated", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseAuctionCreated is a log parse operation binding the contract event 0x03bb6e669c5d9d2143afb3599bda2cc92f483158549e37b474a6dc117f848b68.
//
// Solidity: event AuctionCreated(address _creator, address _asset, uint256 assetId, address _token, uint256 _auctionId)
func (_Auction *AuctionFilterer) ParseAuctionCreated(log types.Log) (*AuctionAuctionCreated, error) {
	event := new(AuctionAuctionCreated)
	if err := _Auction.contract.UnpackLog(event, "AuctionCreated", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// AuctionOwnershipTransferredIterator is returned from FilterOwnershipTransferred and is used to iterate over the raw logs and unpacked data for OwnershipTransferred events raised by the Auction contract.
type AuctionOwnershipTransferredIterator struct {
	Event *AuctionOwnershipTransferred // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *AuctionOwnershipTransferredIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(AuctionOwnershipTransferred)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(AuctionOwnershipTransferred)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *AuctionOwnershipTransferredIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *AuctionOwnershipTransferredIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// AuctionOwnershipTransferred represents a OwnershipTransferred event raised by the Auction contract.
type AuctionOwnershipTransferred struct {
	PreviousOwner common.Address
	NewOwner      common.Address
	Raw           types.Log // Blockchain specific contextual infos
}

// FilterOwnershipTransferred is a free log retrieval operation binding the contract event 0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0.
//
// Solidity: event OwnershipTransferred(address indexed _previousOwner, address indexed _newOwner)
func (_Auction *AuctionFilterer) FilterOwnershipTransferred(opts *bind.FilterOpts, _previousOwner []common.Address, _newOwner []common.Address) (*AuctionOwnershipTransferredIterator, error) {

	var _previousOwnerRule []interface{}
	for _, _previousOwnerItem := range _previousOwner {
		_previousOwnerRule = append(_previousOwnerRule, _previousOwnerItem)
	}
	var _newOwnerRule []interface{}
	for _, _newOwnerItem := range _newOwner {
		_newOwnerRule = append(_newOwnerRule, _newOwnerItem)
	}

	logs, sub, err := _Auction.contract.FilterLogs(opts, "OwnershipTransferred", _previousOwnerRule, _newOwnerRule)
	if err != nil {
		return nil, err
	}
	return &AuctionOwnershipTransferredIterator{contract: _Auction.contract, event: "OwnershipTransferred", logs: logs, sub: sub}, nil
}

// WatchOwnershipTransferred is a free log subscription operation binding the contract event 0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0.
//
// Solidity: event OwnershipTransferred(address indexed _previousOwner, address indexed _newOwner)
func (_Auction *AuctionFilterer) WatchOwnershipTransferred(opts *bind.WatchOpts, sink chan<- *AuctionOwnershipTransferred, _previousOwner []common.Address, _newOwner []common.Address) (event.Subscription, error) {

	var _previousOwnerRule []interface{}
	for _, _previousOwnerItem := range _previousOwner {
		_previousOwnerRule = append(_previousOwnerRule, _previousOwnerItem)
	}
	var _newOwnerRule []interface{}
	for _, _newOwnerItem := range _newOwner {
		_newOwnerRule = append(_newOwnerRule, _newOwnerItem)
	}

	logs, sub, err := _Auction.contract.WatchLogs(opts, "OwnershipTransferred", _previousOwnerRule, _newOwnerRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(AuctionOwnershipTransferred)
				if err := _Auction.contract.UnpackLog(event, "OwnershipTransferred", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseOwnershipTransferred is a log parse operation binding the contract event 0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0.
//
// Solidity: event OwnershipTransferred(address indexed _previousOwner, address indexed _newOwner)
func (_Auction *AuctionFilterer) ParseOwnershipTransferred(log types.Log) (*AuctionOwnershipTransferred, error) {
	event := new(AuctionOwnershipTransferred)
	if err := _Auction.contract.UnpackLog(event, "OwnershipTransferred", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// AuctionTokensClaimedIterator is returned from FilterTokensClaimed and is used to iterate over the raw logs and unpacked data for TokensClaimed events raised by the Auction contract.
type AuctionTokensClaimedIterator struct {
	Event *AuctionTokensClaimed // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *AuctionTokensClaimedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(AuctionTokensClaimed)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(AuctionTokensClaimed)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *AuctionTokensClaimedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *AuctionTokensClaimedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// AuctionTokensClaimed represents a TokensClaimed event raised by the Auction contract.
type AuctionTokensClaimed struct {
	AuctionId *big.Int
	Creator   common.Address
	Raw       types.Log // Blockchain specific contextual infos
}

// FilterTokensClaimed is a free log retrieval operation binding the contract event 0x83017964d41e2eb3369a74f93ce7024dc09d85d2bfa35ca86268234733b96590.
//
// Solidity: event TokensClaimed(uint256 _auctionId, address _creator)
func (_Auction *AuctionFilterer) FilterTokensClaimed(opts *bind.FilterOpts) (*AuctionTokensClaimedIterator, error) {

	logs, sub, err := _Auction.contract.FilterLogs(opts, "TokensClaimed")
	if err != nil {
		return nil, err
	}
	return &AuctionTokensClaimedIterator{contract: _Auction.contract, event: "TokensClaimed", logs: logs, sub: sub}, nil
}

// WatchTokensClaimed is a free log subscription operation binding the contract event 0x83017964d41e2eb3369a74f93ce7024dc09d85d2bfa35ca86268234733b96590.
//
// Solidity: event TokensClaimed(uint256 _auctionId, address _creator)
func (_Auction *AuctionFilterer) WatchTokensClaimed(opts *bind.WatchOpts, sink chan<- *AuctionTokensClaimed) (event.Subscription, error) {

	logs, sub, err := _Auction.contract.WatchLogs(opts, "TokensClaimed")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(AuctionTokensClaimed)
				if err := _Auction.contract.UnpackLog(event, "TokensClaimed", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseTokensClaimed is a log parse operation binding the contract event 0x83017964d41e2eb3369a74f93ce7024dc09d85d2bfa35ca86268234733b96590.
//
// Solidity: event TokensClaimed(uint256 _auctionId, address _creator)
func (_Auction *AuctionFilterer) ParseTokensClaimed(log types.Log) (*AuctionTokensClaimed, error) {
	event := new(AuctionTokensClaimed)
	if err := _Auction.contract.UnpackLog(event, "TokensClaimed", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// Code generated - DO NOT EDIT.
// This file is a generated binding and any manual changes will be lost.

package generated

import (
	"math/big"
	"strings"

	ethereum "github.com/ethereum/go-ethereum"
	"github.com/ethereum/go-ethereum/accounts/abi"
	"github.com/ethereum/go-ethereum/accounts/abi/bind"
	"github.com/ethereum/go-ethereum/common"
	"github.com/ethereum/go-ethereum/core/types"
	"github.com/ethereum/go-ethereum/event"
)

// Reference imports to suppress errors if they are not otherwise used.
var (
	_ = big.NewInt
	_ = strings.NewReader
	_ = ethereum.NotFound
	_ = bind.Bind
	_ = common.Big1
	_ = types.BloomLookup
	_ = event.NewSubscription
)

// AuctionAuctionInfo is an auto generated low-level Go binding around an user-defined struct.
type AuctionAuctionInfo struct {
	Creator              common.Address
	StartPrice           *big.Int
	BuyNowPrice          *big.Int
	StartTime            *big.Int
	Duration             *big.Int
	DurationIncrement    *big.Int
	BidIncrement         *big.Int
	Description          string
	TokenAddress         common.Address
	TokenId              *big.Int
	CurrencyAddress      common.Address
	CurrentBidder        common.Address
	HighestBid           *big.Int
	LotBought            bool
	RepaymentTransferred bool
	LotTransferred       bool
}

// AuctionABI is the input ABI used to generate the binding from.
const AuctionABI = "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_auctionId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_bidder\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"AuctionBid\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_auctionId\",\"type\":\"uint256\"}],\"name\":\"AuctionClosed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_creator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_tokenAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_currencyAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_auctionId\",\"type\":\"uint256\"}],\"name\":\"AuctionCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_auctionId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_winner\",\"type\":\"address\"}],\"name\":\"LotTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_auctionId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_creator\",\"type\":\"address\"}],\"name\":\"RepaymentTransferred\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_auctionId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"bid\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_auctionId\",\"type\":\"uint256\"}],\"name\":\"buyNow\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_auctionId\",\"type\":\"uint256\"}],\"name\":\"claimLot\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_auctionId\",\"type\":\"uint256\"}],\"name\":\"claimRepayment\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_auctionId\",\"type\":\"uint256\"}],\"name\":\"closeAuction\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"countOfAuctions\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_tokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_currencyAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_startPrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_buyNowPrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_startTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_duration\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_durationIncrement\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_bidIncrement\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"_description\",\"type\":\"string\"}],\"name\":\"createAuction\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_auctionId\",\"type\":\"uint256\"}],\"name\":\"getAuctionInfo\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"creator\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"startPrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"buyNowPrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"startTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"duration\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"durationIncrement\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"bidIncrement\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"description\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"currencyAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"currentBidder\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"highestBid\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"lotBought\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"repaymentTransferred\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"lotTransferred\",\"type\":\"bool\"}],\"internalType\":\"structAuction.AuctionInfo\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_auctionId\",\"type\":\"uint256\"}],\"name\":\"getRaisingBid\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_auctionId\",\"type\":\"uint256\"}],\"name\":\"getStatus\",\"outputs\":[{\"internalType\":\"enumAuction.AuctionStatus\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_auctionId\",\"type\":\"uint256\"}],\"name\":\"regainLot\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]"

// AuctionBin is the compiled bytecode used for deploying new contracts.
var AuctionBin = "0x60806040523480156200001157600080fd5b50600062000024620000c860201b60201c565b9050806000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508073ffffffffffffffffffffffffffffffffffffffff16600073ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a350620000d0565b600033905090565b6158c880620000e06000396000f3fe608060405234801561001057600080fd5b50600436106100e95760003560e01c80635c622a0e1161008c578063a216592011610066578063a216592014610220578063f2da066414610250578063f2fde38b1461026c578063fc3fc4ed14610288576100e9565b80635c622a0e146101c8578063715018a6146101f85780638da5cb5b14610202576100e9565b806322a0119b116100c857806322a0119b14610142578063236ed8f3146101605780634bc28ede1461017c578063598647f8146101ac576100e9565b8062d878e8146100ee57806308a0f32f1461010a5780631080f5c914610126575b600080fd5b610108600480360381019061010391906144fe565b6102b8565b005b610124600480360381019061011f91906144fe565b61082b565b005b610140600480360381019061013b91906144fe565b610f55565b005b61014a611664565b6040516101579190614ea1565b60405180910390f35b61017a600480360381019061017591906144fe565b61166a565b005b610196600480360381019061019191906143e2565b611e2c565b6040516101a39190614ea1565b60405180910390f35b6101c660048036038101906101c19190614527565b61267a565b005b6101e260048036038101906101dd91906144fe565b612de9565b6040516101ef9190614b64565b60405180910390f35b610200613160565b005b61020a61329a565b6040516102179190614a96565b60405180910390f35b61023a600480360381019061023591906144fe565b6132c3565b6040516102479190614ea1565b60405180910390f35b61026a600480360381019061026591906144fe565b6136a1565b005b61028660048036038101906102819190614390565b613baf565b005b6102a2600480360381019061029d91906144fe565b613d58565b6040516102af9190614e7f565b60405180910390f35b80600360048111156102f3577f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b6102fc82612de9565b6004811115610334577f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b14610374576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161036b90614bbf565b60405180910390fd5b600060026000848152602001908152602001600020604051806102000160405290816000820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200160018201548152602001600282015481526020016003820154815260200160048201548152602001600582015481526020016006820154815260200160078201805461043790615163565b80601f016020809104026020016040519081016040528092919081815260200182805461046390615163565b80156104b05780601f10610485576101008083540402835291602001916104b0565b820191906000526020600020905b81548152906001019060200180831161049357829003601f168201915b505050505081526020016008820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200160098201548152602001600a820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001600b820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001600c8201548152602001600d820160009054906101000a900460ff16151515158152602001600d820160019054906101000a900460ff16151515158152602001600d820160029054906101000a900460ff16151515158152505090503373ffffffffffffffffffffffffffffffffffffffff16816000015173ffffffffffffffffffffffffffffffffffffffff1614610694576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161068b90614dff565b60405180910390fd5b806101c00151156106da576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016106d190614d7f565b60405180910390fd5b600081610140015173ffffffffffffffffffffffffffffffffffffffff1663a9059cbb83600001518461018001516040518363ffffffff1660e01b8152600401610725929190614b3b565b602060405180830381600087803b15801561073f57600080fd5b505af1158015610753573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061077791906144d5565b9050806107b9576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016107b090614e5f565b60405180910390fd5b600160026000868152602001908152602001600020600d0160016101000a81548160ff0219169083151502179055507fcede1e8bc44e44a1be509c46755459a8fef702efbee4649158b5376942bc14b984836000015160405161081d929190614ebc565b60405180910390a150505050565b8060026004811115610866577f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b61086f82612de9565b60048111156108a7577f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b146108e7576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016108de90614c1f565b60405180910390fd5b600060026000848152602001908152602001600020604051806102000160405290816000820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020016001820154815260200160028201548152602001600382015481526020016004820154815260200160058201548152602001600682015481526020016007820180546109aa90615163565b80601f01602080910402602001604051908101604052809291908181526020018280546109d690615163565b8015610a235780601f106109f857610100808354040283529160200191610a23565b820191906000526020600020905b815481529060010190602001808311610a0657829003601f168201915b505050505081526020016008820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200160098201548152602001600a820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001600b820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001600c8201548152602001600d820160009054906101000a900460ff16151515158152602001600d820160019054906101000a900460ff16151515158152602001600d820160029054906101000a900460ff1615151515815250509050600081610140015173ffffffffffffffffffffffffffffffffffffffff166323b872dd333085604001516040518463ffffffff1660e01b8152600401610bdd93929190614ab1565b602060405180830381600087803b158015610bf757600080fd5b505af1158015610c0b573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c2f91906144d5565b905080610c71576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610c6890614e5f565b60405180910390fd5b81610100015173ffffffffffffffffffffffffffffffffffffffff166323b872dd30338561012001516040518463ffffffff1660e01b8152600401610cb893929190614ab1565b600060405180830381600087803b158015610cd257600080fd5b505af1158015610ce6573d6000803e3d6000fd5b505050506001826101a00190151590811515815250506001826101e0019015159081151581525050816002600086815260200190815260200160002060008201518160000160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506020820151816001015560408201518160020155606082015181600301556080820151816004015560a0820151816005015560c0820151816006015560e0820151816007019080519060200190610dc1929190614156565b506101008201518160080160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550610120820151816009015561014082015181600a0160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555061016082015181600b0160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555061018082015181600c01556101a082015181600d0160006101000a81548160ff0219169083151502179055506101c082015181600d0160016101000a81548160ff0219169083151502179055506101e082015181600d0160026101000a81548160ff0219169083151502179055509050507f0e60401031695311e5192456b98ba458c20ba883eb86b101645de6252c6e9dd38433604051610f47929190614ebc565b60405180910390a150505050565b8060036004811115610f90577f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b610f9982612de9565b6004811115610fd1577f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b14611011576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161100890614bbf565b60405180910390fd5b600060026000848152602001908152602001600020604051806102000160405290816000820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020016001820154815260200160028201548152602001600382015481526020016004820154815260200160058201548152602001600682015481526020016007820180546110d490615163565b80601f016020809104026020016040519081016040528092919081815260200182805461110090615163565b801561114d5780601f106111225761010080835404028352916020019161114d565b820191906000526020600020905b81548152906001019060200180831161113057829003601f168201915b505050505081526020016008820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200160098201548152602001600a820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001600b820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001600c8201548152602001600d820160009054906101000a900460ff16151515158152602001600d820160019054906101000a900460ff16151515158152602001600d820160029054906101000a900460ff1615151515815250509050806000015173ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614611331576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161132890614dbf565b60405180910390fd5b600081610180015114611379576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161137090614cbf565b60405180910390fd5b80610100015173ffffffffffffffffffffffffffffffffffffffff166323b872dd3083600001518461012001516040518463ffffffff1660e01b81526004016113c493929190614ab1565b600060405180830381600087803b1580156113de57600080fd5b505af11580156113f2573d6000803e3d6000fd5b505050506001816101c00190151590811515815250506001816101e0019015159081151581525050806002600085815260200190815260200160002060008201518160000160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506020820151816001015560408201518160020155606082015181600301556080820151816004015560a0820151816005015560c0820151816006015560e08201518160070190805190602001906114cd929190614156565b506101008201518160080160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550610120820151816009015561014082015181600a0160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555061016082015181600b0160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555061018082015181600c01556101a082015181600d0160006101000a81548160ff0219169083151502179055506101c082015181600d0160016101000a81548160ff0219169083151502179055506101e082015181600d0160026101000a81548160ff0219169083151502179055509050507f0e60401031695311e5192456b98ba458c20ba883eb86b101645de6252c6e9dd3838260000151604051611657929190614ebc565b60405180910390a1505050565b60015481565b6116726140cf565b73ffffffffffffffffffffffffffffffffffffffff1661169061329a565b73ffffffffffffffffffffffffffffffffffffffff16146116e6576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016116dd90614cdf565b60405180910390fd5b8060036004811115611721577f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b61172a82612de9565b6004811115611762577f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b146117a2576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161179990614bbf565b60405180910390fd5b600060026000848152602001908152602001600020604051806102000160405290816000820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200160018201548152602001600282015481526020016003820154815260200160048201548152602001600582015481526020016006820154815260200160078201805461186590615163565b80601f016020809104026020016040519081016040528092919081815260200182805461189190615163565b80156118de5780601f106118b3576101008083540402835291602001916118de565b820191906000526020600020905b8154815290600101906020018083116118c157829003601f168201915b505050505081526020016008820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200160098201548152602001600a820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001600b820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001600c8201548152602001600d820160009054906101000a900460ff16151515158152602001600d820160019054906101000a900460ff16151515158152602001600d820160029054906101000a900460ff1615151515815250509050806101c00151611b4d57600081610140015173ffffffffffffffffffffffffffffffffffffffff1663a9059cbb83600001518461018001516040518363ffffffff1660e01b8152600401611aa5929190614b3b565b602060405180830381600087803b158015611abf57600080fd5b505af1158015611ad3573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611af791906144d5565b905080611b39576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611b3090614e5f565b60405180910390fd5b6001826101c0019015159081151581525050505b806101e00151611be85780610100015173ffffffffffffffffffffffffffffffffffffffff166323b872dd308361016001518461012001516040518463ffffffff1660e01b8152600401611ba393929190614ab1565b600060405180830381600087803b158015611bbd57600080fd5b505af1158015611bd1573d6000803e3d6000fd5b505050506001816101e00190151590811515815250505b806002600085815260200190815260200160002060008201518160000160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506020820151816001015560408201518160020155606082015181600301556080820151816004015560a0820151816005015560c0820151816006015560e0820151816007019080519060200190611c9b929190614156565b506101008201518160080160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550610120820151816009015561014082015181600a0160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555061016082015181600b0160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555061018082015181600c01556101a082015181600d0160006101000a81548160ff0219169083151502179055506101c082015181600d0160016101000a81548160ff0219169083151502179055506101e082015181600d0160026101000a81548160ff0219169083151502179055509050507fac4a907ec29adcc56774b757ecb1e1b4d597374fc9386107d05e2670259df7d383604051611e1f9190614ea1565b60405180910390a1505050565b6000611e4d8b73ffffffffffffffffffffffffffffffffffffffff166140d7565b611e8c576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611e8390614ddf565b60405180910390fd5b60008b90503373ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16636352211e8d6040518263ffffffff1660e01b8152600401611ee19190614ea1565b60206040518083038186803b158015611ef957600080fd5b505afa158015611f0d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611f3191906143b9565b73ffffffffffffffffffffffffffffffffffffffff1614611f87576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611f7e90614bff565b60405180910390fd5b3073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1663081812fc8d6040518263ffffffff1660e01b8152600401611fd79190614ea1565b60206040518083038186803b158015611fef57600080fd5b505afa158015612003573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061202791906143b9565b73ffffffffffffffffffffffffffffffffffffffff161461207d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161207490614d5f565b60405180910390fd5b61209c8a73ffffffffffffffffffffffffffffffffffffffff166140d7565b6120db576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016120d290614b9f565b60405180910390fd5b600089141561211f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161211690614cff565b60405180910390fd5b88881015612162576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161215990614d3f565b60405180910390fd5b60008614156121a6576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161219d90614d1f565b60405180910390fd5b60008514156121ea576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016121e190614c7f565b60405180910390fd5b83600010801561220157506121fd6140ea565b8411155b612240576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161223790614bdf565b60405180910390fd5b8073ffffffffffffffffffffffffffffffffffffffff166323b872dd33308e6040518463ffffffff1660e01b815260040161227d93929190614ab1565b600060405180830381600087803b15801561229757600080fd5b505af11580156122ab573d6000803e3d6000fd5b505050506122b76141dc565b428810156122fc57428160600181815250506122ee6122df89426140fe90919063ffffffff16565b886140fe90919063ffffffff16565b816080018181525050612311565b87816060018181525050868160800181815250505b33816000019073ffffffffffffffffffffffffffffffffffffffff16908173ffffffffffffffffffffffffffffffffffffffff16815250508c81610100019073ffffffffffffffffffffffffffffffffffffffff16908173ffffffffffffffffffffffffffffffffffffffff16815250508b816101200181815250508a81610140019073ffffffffffffffffffffffffffffffffffffffff16908173ffffffffffffffffffffffffffffffffffffffff16815250508981602001818152505088816040018181525050848160c0018181525050838160e0018190525060006001549050816002600083815260200190815260200160002060008201518160000160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506020820151816001015560408201518160020155606082015181600301556080820151816004015560a0820151816005015560c0820151816006015560e08201518160070190805190602001906124a7929190614156565b506101008201518160080160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550610120820151816009015561014082015181600a0160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555061016082015181600b0160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555061018082015181600c01556101a082015181600d0160006101000a81548160ff0219169083151502179055506101c082015181600d0160016101000a81548160ff0219169083151502179055506101e082015181600d0160026101000a81548160ff0219169083151502179055509050506001600081548092919061260f906151c6565b91905055507f03bb6e669c5d9d2143afb3599bda2cc92f483158549e37b474a6dc117f848b6882600001518361010001518461012001518561014001518560405161265e959493929190614ae8565b60405180910390a18093505050509a9950505050505050505050565b612683826132c3565b8110156126c5576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016126bc90614c3f565b60405180910390fd5b600060026000848152602001908152602001600020604051806102000160405290816000820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200160018201548152602001600282015481526020016003820154815260200160048201548152602001600582015481526020016006820154815260200160078201805461278890615163565b80601f01602080910402602001604051908101604052809291908181526020018280546127b490615163565b80156128015780601f106127d657610100808354040283529160200191612801565b820191906000526020600020905b8154815290600101906020018083116127e457829003601f168201915b505050505081526020016008820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200160098201548152602001600a820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001600b820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001600c8201548152602001600d820160009054906101000a900460ff16151515158152602001600d820160019054906101000a900460ff16151515158152602001600d820160029054906101000a900460ff16151515158152505090506000816101400151905060008173ffffffffffffffffffffffffffffffffffffffff166323b872dd3330876040518463ffffffff1660e01b81526004016129bc93929190614ab1565b602060405180830381600087803b1580156129d657600080fd5b505af11580156129ea573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612a0e91906144d5565b905080612a50576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612a4790614d9f565b60405180910390fd5b600083610180015114612b37578173ffffffffffffffffffffffffffffffffffffffff1663a9059cbb8461016001518561018001516040518363ffffffff1660e01b8152600401612aa2929190614b3b565b602060405180830381600087803b158015612abc57600080fd5b505af1158015612ad0573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612af491906144d5565b905080612b36576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612b2d90614c5f565b60405180910390fd5b5b83836101800181815250503383610160019073ffffffffffffffffffffffffffffffffffffffff16908173ffffffffffffffffffffffffffffffffffffffff1681525050612b968360a00151846080015161411490919063ffffffff16565b836080018181525050826002600087815260200190815260200160002060008201518160000160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506020820151816001015560408201518160020155606082015181600301556080820151816004015560a0820151816005015560c0820151816006015560e0820151816007019080519060200190612c52929190614156565b506101008201518160080160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550610120820151816009015561014082015181600a0160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555061016082015181600b0160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555061018082015181600c01556101a082015181600d0160006101000a81548160ff0219169083151502179055506101c082015181600d0160016101000a81548160ff0219169083151502179055506101e082015181600d0160026101000a81548160ff0219169083151502179055509050507fb8d756f2d1da4663767eb4d559780ace84f2f65a421a60ddcb47e8b2e5d2fd26853386604051612dda93929190614ee5565b60405180910390a15050505050565b60008060026000848152602001908152602001600020604051806102000160405290816000820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001600182015481526020016002820154815260200160038201548152602001600482015481526020016005820154815260200160068201548152602001600782018054612ead90615163565b80601f0160208091040260200160405190810160405280929190818152602001828054612ed990615163565b8015612f265780601f10612efb57610100808354040283529160200191612f26565b820191906000526020600020905b815481529060010190602001808311612f0957829003601f168201915b505050505081526020016008820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200160098201548152602001600a820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001600b820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001600c8201548152602001600d820160009054906101000a900460ff16151515158152602001600d820160019054906101000a900460ff16151515158152602001600d820160029054906101000a900460ff1615151515815250509050600073ffffffffffffffffffffffffffffffffffffffff16816000015173ffffffffffffffffffffffffffffffffffffffff1614156130db57600091505061315b565b806101c0015180156130ef5750806101e001515b156130fe57600491505061315b565b806101a001511561311357600391505061315b565b806060015142101561312957600191505061315b565b6131448160800151826060015161411490919063ffffffff16565b42101561315557600291505061315b565b60039150505b919050565b6131686140cf565b73ffffffffffffffffffffffffffffffffffffffff1661318661329a565b73ffffffffffffffffffffffffffffffffffffffff16146131dc576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016131d390614cdf565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff1660008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a360008060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b60008160026004811115613300577f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b61330982612de9565b6004811115613341577f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b14613381576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161337890614c1f565b60405180910390fd5b600060026000858152602001908152602001600020604051806102000160405290816000820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200160018201548152602001600282015481526020016003820154815260200160048201548152602001600582015481526020016006820154815260200160078201805461344490615163565b80601f016020809104026020016040519081016040528092919081815260200182805461347090615163565b80156134bd5780601f10613492576101008083540402835291602001916134bd565b820191906000526020600020905b8154815290600101906020018083116134a057829003601f168201915b505050505081526020016008820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200160098201548152602001600a820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001600b820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001600c8201548152602001600d820160009054906101000a900460ff16151515158152602001600d820160019054906101000a900460ff16151515158152602001600d820160029054906101000a900460ff16151515158152505090506000816101800151141561364a57806020015192505061369b565b60008161018001519050613696816136886136636140ea565b61367a8660c001518661412a90919063ffffffff16565b61414090919063ffffffff16565b61411490919063ffffffff16565b935050505b50919050565b80600360048111156136dc577f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b6136e582612de9565b600481111561371d577f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b1461375d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161375490614bbf565b60405180910390fd5b600060026000848152602001908152602001600020604051806102000160405290816000820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200160018201548152602001600282015481526020016003820154815260200160048201548152602001600582015481526020016006820154815260200160078201805461382090615163565b80601f016020809104026020016040519081016040528092919081815260200182805461384c90615163565b80156138995780601f1061386e57610100808354040283529160200191613899565b820191906000526020600020905b81548152906001019060200180831161387c57829003601f168201915b505050505081526020016008820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200160098201548152602001600a820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001600b820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001600c8201548152602001600d820160009054906101000a900460ff16151515158152602001600d820160019054906101000a900460ff16151515158152602001600d820160029054906101000a900460ff16151515158152505090503373ffffffffffffffffffffffffffffffffffffffff1681610160015173ffffffffffffffffffffffffffffffffffffffff1614613a7e576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401613a7590614e3f565b60405180910390fd5b806101e0015115613ac4576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401613abb90614e1f565b60405180910390fd5b80610100015173ffffffffffffffffffffffffffffffffffffffff166323b872dd308361016001518461012001516040518463ffffffff1660e01b8152600401613b1093929190614ab1565b600060405180830381600087803b158015613b2a57600080fd5b505af1158015613b3e573d6000803e3d6000fd5b50505050600160026000858152602001908152602001600020600d0160026101000a81548160ff0219169083151502179055507f0e60401031695311e5192456b98ba458c20ba883eb86b101645de6252c6e9dd38333604051613ba2929190614ebc565b60405180910390a1505050565b613bb76140cf565b73ffffffffffffffffffffffffffffffffffffffff16613bd561329a565b73ffffffffffffffffffffffffffffffffffffffff1614613c2b576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401613c2290614cdf565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161415613c9b576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401613c9290614b7f565b60405180910390fd5b8073ffffffffffffffffffffffffffffffffffffffff1660008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a3806000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b613d606141dc565b8160006004811115613d9b577f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b613da482612de9565b6004811115613ddc577f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b1415613e1d576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401613e1490614c9f565b60405180910390fd5b60026000848152602001908152602001600020604051806102000160405290816000820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001600182015481526020016002820154815260200160038201548152602001600482015481526020016005820154815260200160068201548152602001600782018054613ede90615163565b80601f0160208091040260200160405190810160405280929190818152602001828054613f0a90615163565b8015613f575780601f10613f2c57610100808354040283529160200191613f57565b820191906000526020600020905b815481529060010190602001808311613f3a57829003601f168201915b505050505081526020016008820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200160098201548152602001600a820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001600b820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001600c8201548152602001600d820160009054906101000a900460ff16151515158152602001600d820160019054906101000a900460ff16151515158152602001600d820160029054906101000a900460ff161515151581525050915050919050565b600033905090565b600080823b905060008111915050919050565b60006b033b2e3c9fd0803ce8000000905090565b6000818361410c9190615080565b905092915050565b600081836141229190614f9f565b905092915050565b600081836141389190615026565b905092915050565b6000818361414e9190614ff5565b905092915050565b82805461416290615163565b90600052602060002090601f01602090048101928261418457600085556141cb565b82601f1061419d57805160ff19168380011785556141cb565b828001600101855582156141cb579182015b828111156141ca5782518255916020019190600101906141af565b5b5090506141d891906142b7565b5090565b604051806102000160405280600073ffffffffffffffffffffffffffffffffffffffff16815260200160008152602001600081526020016000815260200160008152602001600081526020016000815260200160608152602001600073ffffffffffffffffffffffffffffffffffffffff16815260200160008152602001600073ffffffffffffffffffffffffffffffffffffffff168152602001600073ffffffffffffffffffffffffffffffffffffffff168152602001600081526020016000151581526020016000151581526020016000151581525090565b5b808211156142d05760008160009055506001016142b8565b5090565b60006142e76142e284614f41565b614f1c565b9050828152602081018484840111156142ff57600080fd5b61430a848285615121565b509392505050565b6000813590506143218161584d565b92915050565b6000815190506143368161584d565b92915050565b60008151905061434b81615864565b92915050565b600082601f83011261436257600080fd5b81356143728482602086016142d4565b91505092915050565b60008135905061438a8161587b565b92915050565b6000602082840312156143a257600080fd5b60006143b084828501614312565b91505092915050565b6000602082840312156143cb57600080fd5b60006143d984828501614327565b91505092915050565b6000806000806000806000806000806101408b8d03121561440257600080fd5b60006144108d828e01614312565b9a505060206144218d828e0161437b565b99505060406144328d828e01614312565b98505060606144438d828e0161437b565b97505060806144548d828e0161437b565b96505060a06144658d828e0161437b565b95505060c06144768d828e0161437b565b94505060e06144878d828e0161437b565b9350506101006144998d828e0161437b565b9250506101208b013567ffffffffffffffff8111156144b757600080fd5b6144c38d828e01614351565b9150509295989b9194979a5092959850565b6000602082840312156144e757600080fd5b60006144f58482850161433c565b91505092915050565b60006020828403121561451057600080fd5b600061451e8482850161437b565b91505092915050565b6000806040838503121561453a57600080fd5b60006145488582860161437b565b92505060206145598582860161437b565b9150509250929050565b61456c816150b4565b82525050565b61457b816150b4565b82525050565b61458a816150c6565b82525050565b6145998161510f565b82525050565b60006145aa82614f72565b6145b48185614f7d565b93506145c4818560208601615130565b6145cd816152fa565b840191505092915050565b60006145e5602683614f8e565b91506145f08261530b565b604082019050919050565b6000614608602083614f8e565b91506146138261535a565b602082019050919050565b600061462b601783614f8e565b915061463682615383565b602082019050919050565b600061464e601583614f8e565b9150614659826153ac565b602082019050919050565b6000614671601583614f8e565b915061467c826153d5565b602082019050919050565b6000614694601583614f8e565b915061469f826153fe565b602082019050919050565b60006146b7605383614f8e565b91506146c282615427565b606082019050919050565b60006146da601283614f8e565b91506146e58261549c565b602082019050919050565b60006146fd601983614f8e565b9150614708826154c5565b602082019050919050565b6000614720601683614f8e565b915061472b826154ee565b602082019050919050565b6000614743602c83614f8e565b915061474e82615517565b604082019050919050565b6000614766602083614f8e565b915061477182615566565b602082019050919050565b6000614789601383614f8e565b91506147948261558f565b602082019050919050565b60006147ac601883614f8e565b91506147b7826155b8565b602082019050919050565b60006147cf603383614f8e565b91506147da826155e1565b604082019050919050565b60006147f2601383614f8e565b91506147fd82615630565b602082019050919050565b6000614815602a83614f8e565b915061482082615659565b604082019050919050565b6000614838602083614f8e565b9150614843826156a8565b602082019050919050565b600061485b602483614f8e565b9150614866826156d1565b604082019050919050565b600061487e601d83614f8e565b915061488982615720565b602082019050919050565b60006148a1602383614f8e565b91506148ac82615749565b604082019050919050565b60006148c4602483614f8e565b91506148cf82615798565b604082019050919050565b60006148e7601a83614f8e565b91506148f2826157e7565b602082019050919050565b600061490a602083614f8e565b915061491582615810565b602082019050919050565b6000610200830160008301516149396000860182614563565b50602083015161494c6020860182614a78565b50604083015161495f6040860182614a78565b5060608301516149726060860182614a78565b5060808301516149856080860182614a78565b5060a083015161499860a0860182614a78565b5060c08301516149ab60c0860182614a78565b5060e083015184820360e08601526149c3828261459f565b9150506101008301516149da610100860182614563565b506101208301516149ef610120860182614a78565b50610140830151614a04610140860182614563565b50610160830151614a19610160860182614563565b50610180830151614a2e610180860182614a78565b506101a0830151614a436101a0860182614581565b506101c0830151614a586101c0860182614581565b506101e0830151614a6d6101e0860182614581565b508091505092915050565b614a8181615105565b82525050565b614a9081615105565b82525050565b6000602082019050614aab6000830184614572565b92915050565b6000606082019050614ac66000830186614572565b614ad36020830185614572565b614ae06040830184614a87565b949350505050565b600060a082019050614afd6000830188614572565b614b0a6020830187614572565b614b176040830186614a87565b614b246060830185614572565b614b316080830184614a87565b9695505050505050565b6000604082019050614b506000830185614572565b614b5d6020830184614a87565b9392505050565b6000602082019050614b796000830184614590565b92915050565b60006020820190508181036000830152614b98816145d8565b9050919050565b60006020820190508181036000830152614bb8816145fb565b9050919050565b60006020820190508181036000830152614bd88161461e565b9050919050565b60006020820190508181036000830152614bf881614641565b9050919050565b60006020820190508181036000830152614c1881614664565b9050919050565b60006020820190508181036000830152614c3881614687565b9050919050565b60006020820190508181036000830152614c58816146aa565b9050919050565b60006020820190508181036000830152614c78816146cd565b9050919050565b60006020820190508181036000830152614c98816146f0565b9050919050565b60006020820190508181036000830152614cb881614713565b9050919050565b60006020820190508181036000830152614cd881614736565b9050919050565b60006020820190508181036000830152614cf881614759565b9050919050565b60006020820190508181036000830152614d188161477c565b9050919050565b60006020820190508181036000830152614d388161479f565b9050919050565b60006020820190508181036000830152614d58816147c2565b9050919050565b60006020820190508181036000830152614d78816147e5565b9050919050565b60006020820190508181036000830152614d9881614808565b9050919050565b60006020820190508181036000830152614db88161482b565b9050919050565b60006020820190508181036000830152614dd88161484e565b9050919050565b60006020820190508181036000830152614df881614871565b9050919050565b60006020820190508181036000830152614e1881614894565b9050919050565b60006020820190508181036000830152614e38816148b7565b9050919050565b60006020820190508181036000830152614e58816148da565b9050919050565b60006020820190508181036000830152614e78816148fd565b9050919050565b60006020820190508181036000830152614e998184614920565b905092915050565b6000602082019050614eb66000830184614a87565b92915050565b6000604082019050614ed16000830185614a87565b614ede6020830184614572565b9392505050565b6000606082019050614efa6000830186614a87565b614f076020830185614572565b614f146040830184614a87565b949350505050565b6000614f26614f37565b9050614f328282615195565b919050565b6000604051905090565b600067ffffffffffffffff821115614f5c57614f5b6152cb565b5b614f65826152fa565b9050602081019050919050565b600081519050919050565b600082825260208201905092915050565b600082825260208201905092915050565b6000614faa82615105565b9150614fb583615105565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff03821115614fea57614fe961520f565b5b828201905092915050565b600061500082615105565b915061500b83615105565b92508261501b5761501a61523e565b5b828204905092915050565b600061503182615105565b915061503c83615105565b9250817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff04831182151516156150755761507461520f565b5b828202905092915050565b600061508b82615105565b915061509683615105565b9250828210156150a9576150a861520f565b5b828203905092915050565b60006150bf826150e5565b9050919050565b60008115159050919050565b60008190506150e082615839565b919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b600061511a826150d2565b9050919050565b82818337600083830152505050565b60005b8381101561514e578082015181840152602081019050615133565b8381111561515d576000848401525b50505050565b6000600282049050600182168061517b57607f821691505b6020821081141561518f5761518e61529c565b5b50919050565b61519e826152fa565b810181811067ffffffffffffffff821117156151bd576151bc6152cb565b5b80604052505050565b60006151d182615105565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8214156152045761520361520f565b5b600182019050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6000601f19601f8301169050919050565b7f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160008201527f6464726573730000000000000000000000000000000000000000000000000000602082015250565b7f476976656e2063757272656e6379206973206e6f74206120636f6e7472616374600082015250565b7f41756374696f6e206973206e6f742066696e6973686564000000000000000000600082015250565b7f496e76616c69642062696420696e6372656d656e740000000000000000000000600082015250565b7f4973206e6f74206f776e6572206f662061737365740000000000000000000000600082015250565b7f41756374696f6e206973206e6f74206163746976650000000000000000000000600082015250565b7f42696420616d6f756e74206d757374206578636565642074686520686967686560008201527f73742062696420627920746865206d696e696d756d20696e6372656d656e742060208201527f70657263656e74616765206f72206d6f72652e00000000000000000000000000604082015250565b7f4661696c656420746f20706179206261636b0000000000000000000000000000600082015250565b7f496e76616c69642061756374696f6e20696e6372656d656e7400000000000000600082015250565b7f41756374696f6e20646f6573206e6f7420657869737400000000000000000000600082015250565b7f546865206c6f742062656c6f6e677320746f207468652077696e6e6572206f6660008201527f207468652061756374696f6e0000000000000000000000000000000000000000602082015250565b7f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572600082015250565b7f496e76616c696420737461727420707269636500000000000000000000000000600082015250565b7f496e76616c69642061756374696f6e206475726174696f6e0000000000000000600082015250565b7f427579206e6f772070726963652073686f756c6420686967686572206f72206560008201527f7175616c20746f20737461727420707269636500000000000000000000000000602082015250565b7f4c6f74206973206e6f7420617070726f76656400000000000000000000000000600082015250565b7f5468652072657061796d656e742068617320616c7265616479206265656e207460008201527f72616e7366657272656400000000000000000000000000000000000000000000602082015250565b7f4661696c656420746f207472616e7366657220746f6b656e7320746f20626964600082015250565b7f5468652073656e646572206973206e6f7420616e2061756374696f6e2063726560008201527f61746f7200000000000000000000000000000000000000000000000000000000602082015250565b7f476976656e20746f6b656e206973206e6f74206120636f6e7472616374000000600082015250565b7f5468652053656e646572206973206e6f7420612061756374696f6e206372656160008201527f746f720000000000000000000000000000000000000000000000000000000000602082015250565b7f546865206c6f742068617320616c7265616479206265656e207472616e73666560008201527f7272656400000000000000000000000000000000000000000000000000000000602082015250565b7f5468652073656e646572206973206e6f7420612077696e6e6572000000000000600082015250565b7f4661696c656420746f207472616e73666572207468652072657061796d656e74600082015250565b6005811061584a5761584961526d565b5b50565b615856816150b4565b811461586157600080fd5b50565b61586d816150c6565b811461587857600080fd5b50565b61588481615105565b811461588f57600080fd5b5056fea264697066735822122015a7f8d1c9c2c5a1f55a5328171fff429414f9582ee36a7d1d4311c016f152a464736f6c63430008030033"

// DeployAuction deploys a new Ethereum contract, binding an instance of Auction to it.
func DeployAuction(auth *bind.TransactOpts, backend bind.ContractBackend) (common.Address, *types.Transaction, *Auction, error) {
	parsed, err := abi.JSON(strings.NewReader(AuctionABI))
	if err != nil {
		return common.Address{}, nil, nil, err
	}

	address, tx, contract, err := bind.DeployContract(auth, parsed, common.FromHex(AuctionBin), backend)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &Auction{AuctionCaller: AuctionCaller{contract: contract}, AuctionTransactor: AuctionTransactor{contract: contract}, AuctionFilterer: AuctionFilterer{contract: contract}}, nil
}

// Auction is an auto generated Go binding around an Ethereum contract.
type Auction struct {
	AuctionCaller     // Read-only binding to the contract
	AuctionTransactor // Write-only binding to the contract
	AuctionFilterer   // Log filterer for contract events
}

// AuctionCaller is an auto generated read-only Go binding around an Ethereum contract.
type AuctionCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// AuctionTransactor is an auto generated write-only Go binding around an Ethereum contract.
type AuctionTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// AuctionFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type AuctionFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// AuctionSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type AuctionSession struct {
	Contract     *Auction          // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// AuctionCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type AuctionCallerSession struct {
	Contract *AuctionCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts  // Call options to use throughout this session
}

// AuctionTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type AuctionTransactorSession struct {
	Contract     *AuctionTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts  // Transaction auth options to use throughout this session
}

// AuctionRaw is an auto generated low-level Go binding around an Ethereum contract.
type AuctionRaw struct {
	Contract *Auction // Generic contract binding to access the raw methods on
}

// AuctionCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type AuctionCallerRaw struct {
	Contract *AuctionCaller // Generic read-only contract binding to access the raw methods on
}

// AuctionTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type AuctionTransactorRaw struct {
	Contract *AuctionTransactor // Generic write-only contract binding to access the raw methods on
}

// NewAuction creates a new instance of Auction, bound to a specific deployed contract.
func NewAuction(address common.Address, backend bind.ContractBackend) (*Auction, error) {
	contract, err := bindAuction(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &Auction{AuctionCaller: AuctionCaller{contract: contract}, AuctionTransactor: AuctionTransactor{contract: contract}, AuctionFilterer: AuctionFilterer{contract: contract}}, nil
}

// NewAuctionCaller creates a new read-only instance of Auction, bound to a specific deployed contract.
func NewAuctionCaller(address common.Address, caller bind.ContractCaller) (*AuctionCaller, error) {
	contract, err := bindAuction(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &AuctionCaller{contract: contract}, nil
}

// NewAuctionTransactor creates a new write-only instance of Auction, bound to a specific deployed contract.
func NewAuctionTransactor(address common.Address, transactor bind.ContractTransactor) (*AuctionTransactor, error) {
	contract, err := bindAuction(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &AuctionTransactor{contract: contract}, nil
}

// NewAuctionFilterer creates a new log filterer instance of Auction, bound to a specific deployed contract.
func NewAuctionFilterer(address common.Address, filterer bind.ContractFilterer) (*AuctionFilterer, error) {
	contract, err := bindAuction(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &AuctionFilterer{contract: contract}, nil
}

// bindAuction binds a generic wrapper to an already deployed contract.
func bindAuction(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := abi.JSON(strings.NewReader(AuctionABI))
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_Auction *AuctionRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _Auction.Contract.AuctionCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_Auction *AuctionRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Auction.Contract.AuctionTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_Auction *AuctionRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _Auction.Contract.AuctionTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_Auction *AuctionCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _Auction.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_Auction *AuctionTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Auction.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_Auction *AuctionTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _Auction.Contract.contract.Transact(opts, method, params...)
}

// CountOfAuctions is a free data retrieval call binding the contract method 0x22a0119b.
//
// Solidity: function countOfAuctions() view returns(uint256)
func (_Auction *AuctionCaller) CountOfAuctions(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _Auction.contract.Call(opts, &out, "countOfAuctions")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// CountOfAuctions is a free data retrieval call binding the contract method 0x22a0119b.
//
// Solidity: function countOfAuctions() view returns(uint256)
func (_Auction *AuctionSession) CountOfAuctions() (*big.Int, error) {
	return _Auction.Contract.CountOfAuctions(&_Auction.CallOpts)
}

// CountOfAuctions is a free data retrieval call binding the contract method 0x22a0119b.
//
// Solidity: function countOfAuctions() view returns(uint256)
func (_Auction *AuctionCallerSession) CountOfAuctions() (*big.Int, error) {
	return _Auction.Contract.CountOfAuctions(&_Auction.CallOpts)
}

// GetAuctionInfo is a free data retrieval call binding the contract method 0xfc3fc4ed.
//
// Solidity: function getAuctionInfo(uint256 _auctionId) view returns((address,uint256,uint256,uint256,uint256,uint256,uint256,string,address,uint256,address,address,uint256,bool,bool,bool))
func (_Auction *AuctionCaller) GetAuctionInfo(opts *bind.CallOpts, _auctionId *big.Int) (AuctionAuctionInfo, error) {
	var out []interface{}
	err := _Auction.contract.Call(opts, &out, "getAuctionInfo", _auctionId)

	if err != nil {
		return *new(AuctionAuctionInfo), err
	}

	out0 := *abi.ConvertType(out[0], new(AuctionAuctionInfo)).(*AuctionAuctionInfo)

	return out0, err

}

// GetAuctionInfo is a free data retrieval call binding the contract method 0xfc3fc4ed.
//
// Solidity: function getAuctionInfo(uint256 _auctionId) view returns((address,uint256,uint256,uint256,uint256,uint256,uint256,string,address,uint256,address,address,uint256,bool,bool,bool))
func (_Auction *AuctionSession) GetAuctionInfo(_auctionId *big.Int) (AuctionAuctionInfo, error) {
	return _Auction.Contract.GetAuctionInfo(&_Auction.CallOpts, _auctionId)
}

// GetAuctionInfo is a free data retrieval call binding the contract method 0xfc3fc4ed.
//
// Solidity: function getAuctionInfo(uint256 _auctionId) view returns((address,uint256,uint256,uint256,uint256,uint256,uint256,string,address,uint256,address,address,uint256,bool,bool,bool))
func (_Auction *AuctionCallerSession) GetAuctionInfo(_auctionId *big.Int) (AuctionAuctionInfo, error) {
	return _Auction.Contract.GetAuctionInfo(&_Auction.CallOpts, _auctionId)
}

// GetRaisingBid is a free data retrieval call binding the contract method 0xa2165920.
//
// Solidity: function getRaisingBid(uint256 _auctionId) view returns(uint256)
func (_Auction *AuctionCaller) GetRaisingBid(opts *bind.CallOpts, _auctionId *big.Int) (*big.Int, error) {
	var out []interface{}
	err := _Auction.contract.Call(opts, &out, "getRaisingBid", _auctionId)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// GetRaisingBid is a free data retrieval call binding the contract method 0xa2165920.
//
// Solidity: function getRaisingBid(uint256 _auctionId) view returns(uint256)
func (_Auction *AuctionSession) GetRaisingBid(_auctionId *big.Int) (*big.Int, error) {
	return _Auction.Contract.GetRaisingBid(&_Auction.CallOpts, _auctionId)
}

// GetRaisingBid is a free data retrieval call binding the contract method 0xa2165920.
//
// Solidity: function getRaisingBid(uint256 _auctionId) view returns(uint256)
func (_Auction *AuctionCallerSession) GetRaisingBid(_auctionId *big.Int) (*big.Int, error) {
	return _Auction.Contract.GetRaisingBid(&_Auction.CallOpts, _auctionId)
}

// GetStatus is a free data retrieval call binding the contract method 0x5c622a0e.
//
// Solidity: function getStatus(uint256 _auctionId) view returns(uint8)
func (_Auction *AuctionCaller) GetStatus(opts *bind.CallOpts, _auctionId *big.Int) (uint8, error) {
	var out []interface{}
	err := _Auction.contract.Call(opts, &out, "getStatus", _auctionId)

	if err != nil {
		return *new(uint8), err
	}

	out0 := *abi.ConvertType(out[0], new(uint8)).(*uint8)

	return out0, err

}

// GetStatus is a free data retrieval call binding the contract method 0x5c622a0e.
//
// Solidity: function getStatus(uint256 _auctionId) view returns(uint8)
func (_Auction *AuctionSession) GetStatus(_auctionId *big.Int) (uint8, error) {
	return _Auction.Contract.GetStatus(&_Auction.CallOpts, _auctionId)
}

// GetStatus is a free data retrieval call binding the contract method 0x5c622a0e.
//
// Solidity: function getStatus(uint256 _auctionId) view returns(uint8)
func (_Auction *AuctionCallerSession) GetStatus(_auctionId *big.Int) (uint8, error) {
	return _Auction.Contract.GetStatus(&_Auction.CallOpts, _auctionId)
}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() view returns(address)
func (_Auction *AuctionCaller) Owner(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _Auction.contract.Call(opts, &out, "owner")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() view returns(address)
func (_Auction *AuctionSession) Owner() (common.Address, error) {
	return _Auction.Contract.Owner(&_Auction.CallOpts)
}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() view returns(address)
func (_Auction *AuctionCallerSession) Owner() (common.Address, error) {
	return _Auction.Contract.Owner(&_Auction.CallOpts)
}

// Bid is a paid mutator transaction binding the contract method 0x598647f8.
//
// Solidity: function bid(uint256 _auctionId, uint256 _amount) returns()
func (_Auction *AuctionTransactor) Bid(opts *bind.TransactOpts, _auctionId *big.Int, _amount *big.Int) (*types.Transaction, error) {
	return _Auction.contract.Transact(opts, "bid", _auctionId, _amount)
}

// Bid is a paid mutator transaction binding the contract method 0x598647f8.
//
// Solidity: function bid(uint256 _auctionId, uint256 _amount) returns()
func (_Auction *AuctionSession) Bid(_auctionId *big.Int, _amount *big.Int) (*types.Transaction, error) {
	return _Auction.Contract.Bid(&_Auction.TransactOpts, _auctionId, _amount)
}

// Bid is a paid mutator transaction binding the contract method 0x598647f8.
//
// Solidity: function bid(uint256 _auctionId, uint256 _amount) returns()
func (_Auction *AuctionTransactorSession) Bid(_auctionId *big.Int, _amount *big.Int) (*types.Transaction, error) {
	return _Auction.Contract.Bid(&_Auction.TransactOpts, _auctionId, _amount)
}

// BuyNow is a paid mutator transaction binding the contract method 0x08a0f32f.
//
// Solidity: function buyNow(uint256 _auctionId) returns()
func (_Auction *AuctionTransactor) BuyNow(opts *bind.TransactOpts, _auctionId *big.Int) (*types.Transaction, error) {
	return _Auction.contract.Transact(opts, "buyNow", _auctionId)
}

// BuyNow is a paid mutator transaction binding the contract method 0x08a0f32f.
//
// Solidity: function buyNow(uint256 _auctionId) returns()
func (_Auction *AuctionSession) BuyNow(_auctionId *big.Int) (*types.Transaction, error) {
	return _Auction.Contract.BuyNow(&_Auction.TransactOpts, _auctionId)
}

// BuyNow is a paid mutator transaction binding the contract method 0x08a0f32f.
//
// Solidity: function buyNow(uint256 _auctionId) returns()
func (_Auction *AuctionTransactorSession) BuyNow(_auctionId *big.Int) (*types.Transaction, error) {
	return _Auction.Contract.BuyNow(&_Auction.TransactOpts, _auctionId)
}

// ClaimLot is a paid mutator transaction binding the contract method 0xf2da0664.
//
// Solidity: function claimLot(uint256 _auctionId) returns()
func (_Auction *AuctionTransactor) ClaimLot(opts *bind.TransactOpts, _auctionId *big.Int) (*types.Transaction, error) {
	return _Auction.contract.Transact(opts, "claimLot", _auctionId)
}

// ClaimLot is a paid mutator transaction binding the contract method 0xf2da0664.
//
// Solidity: function claimLot(uint256 _auctionId) returns()
func (_Auction *AuctionSession) ClaimLot(_auctionId *big.Int) (*types.Transaction, error) {
	return _Auction.Contract.ClaimLot(&_Auction.TransactOpts, _auctionId)
}

// ClaimLot is a paid mutator transaction binding the contract method 0xf2da0664.
//
// Solidity: function claimLot(uint256 _auctionId) returns()
func (_Auction *AuctionTransactorSession) ClaimLot(_auctionId *big.Int) (*types.Transaction, error) {
	return _Auction.Contract.ClaimLot(&_Auction.TransactOpts, _auctionId)
}

// ClaimRepayment is a paid mutator transaction binding the contract method 0x00d878e8.
//
// Solidity: function claimRepayment(uint256 _auctionId) returns()
func (_Auction *AuctionTransactor) ClaimRepayment(opts *bind.TransactOpts, _auctionId *big.Int) (*types.Transaction, error) {
	return _Auction.contract.Transact(opts, "claimRepayment", _auctionId)
}

// ClaimRepayment is a paid mutator transaction binding the contract method 0x00d878e8.
//
// Solidity: function claimRepayment(uint256 _auctionId) returns()
func (_Auction *AuctionSession) ClaimRepayment(_auctionId *big.Int) (*types.Transaction, error) {
	return _Auction.Contract.ClaimRepayment(&_Auction.TransactOpts, _auctionId)
}

// ClaimRepayment is a paid mutator transaction binding the contract method 0x00d878e8.
//
// Solidity: function claimRepayment(uint256 _auctionId) returns()
func (_Auction *AuctionTransactorSession) ClaimRepayment(_auctionId *big.Int) (*types.Transaction, error) {
	return _Auction.Contract.ClaimRepayment(&_Auction.TransactOpts, _auctionId)
}

// CloseAuction is a paid mutator transaction binding the contract method 0x236ed8f3.
//
// Solidity: function closeAuction(uint256 _auctionId) returns()
func (_Auction *AuctionTransactor) CloseAuction(opts *bind.TransactOpts, _auctionId *big.Int) (*types.Transaction, error) {
	return _Auction.contract.Transact(opts, "closeAuction", _auctionId)
}

// CloseAuction is a paid mutator transaction binding the contract method 0x236ed8f3.
//
// Solidity: function closeAuction(uint256 _auctionId) returns()
func (_Auction *AuctionSession) CloseAuction(_auctionId *big.Int) (*types.Transaction, error) {
	return _Auction.Contract.CloseAuction(&_Auction.TransactOpts, _auctionId)
}

// CloseAuction is a paid mutator transaction binding the contract method 0x236ed8f3.
//
// Solidity: function closeAuction(uint256 _auctionId) returns()
func (_Auction *AuctionTransactorSession) CloseAuction(_auctionId *big.Int) (*types.Transaction, error) {
	return _Auction.Contract.CloseAuction(&_Auction.TransactOpts, _auctionId)
}

// CreateAuction is a paid mutator transaction binding the contract method 0x4bc28ede.
//
// Solidity: function createAuction(address _tokenAddress, uint256 _tokenId, address _currencyAddress, uint256 _startPrice, uint256 _buyNowPrice, uint256 _startTime, uint256 _duration, uint256 _durationIncrement, uint256 _bidIncrement, string _description) returns(uint256)
func (_Auction *AuctionTransactor) CreateAuction(opts *bind.TransactOpts, _tokenAddress common.Address, _tokenId *big.Int, _currencyAddress common.Address, _startPrice *big.Int, _buyNowPrice *big.Int, _startTime *big.Int, _duration *big.Int, _durationIncrement *big.Int, _bidIncrement *big.Int, _description string) (*types.Transaction, error) {
	return _Auction.contract.Transact(opts, "createAuction", _tokenAddress, _tokenId, _currencyAddress, _startPrice, _buyNowPrice, _startTime, _duration, _durationIncrement, _bidIncrement, _description)
}

// CreateAuction is a paid mutator transaction binding the contract method 0x4bc28ede.
//
// Solidity: function createAuction(address _tokenAddress, uint256 _tokenId, address _currencyAddress, uint256 _startPrice, uint256 _buyNowPrice, uint256 _startTime, uint256 _duration, uint256 _durationIncrement, uint256 _bidIncrement, string _description) returns(uint256)
func (_Auction *AuctionSession) CreateAuction(_tokenAddress common.Address, _tokenId *big.Int, _currencyAddress common.Address, _startPrice *big.Int, _buyNowPrice *big.Int, _startTime *big.Int, _duration *big.Int, _durationIncrement *big.Int, _bidIncrement *big.Int, _description string) (*types.Transaction, error) {
	return _Auction.Contract.CreateAuction(&_Auction.TransactOpts, _tokenAddress, _tokenId, _currencyAddress, _startPrice, _buyNowPrice, _startTime, _duration, _durationIncrement, _bidIncrement, _description)
}

// CreateAuction is a paid mutator transaction binding the contract method 0x4bc28ede.
//
// Solidity: function createAuction(address _tokenAddress, uint256 _tokenId, address _currencyAddress, uint256 _startPrice, uint256 _buyNowPrice, uint256 _startTime, uint256 _duration, uint256 _durationIncrement, uint256 _bidIncrement, string _description) returns(uint256)
func (_Auction *AuctionTransactorSession) CreateAuction(_tokenAddress common.Address, _tokenId *big.Int, _currencyAddress common.Address, _startPrice *big.Int, _buyNowPrice *big.Int, _startTime *big.Int, _duration *big.Int, _durationIncrement *big.Int, _bidIncrement *big.Int, _description string) (*types.Transaction, error) {
	return _Auction.Contract.CreateAuction(&_Auction.TransactOpts, _tokenAddress, _tokenId, _currencyAddress, _startPrice, _buyNowPrice, _startTime, _duration, _durationIncrement, _bidIncrement, _description)
}

// RegainLot is a paid mutator transaction binding the contract method 0x1080f5c9.
//
// Solidity: function regainLot(uint256 _auctionId) returns()
func (_Auction *AuctionTransactor) RegainLot(opts *bind.TransactOpts, _auctionId *big.Int) (*types.Transaction, error) {
	return _Auction.contract.Transact(opts, "regainLot", _auctionId)
}

// RegainLot is a paid mutator transaction binding the contract method 0x1080f5c9.
//
// Solidity: function regainLot(uint256 _auctionId) returns()
func (_Auction *AuctionSession) RegainLot(_auctionId *big.Int) (*types.Transaction, error) {
	return _Auction.Contract.RegainLot(&_Auction.TransactOpts, _auctionId)
}

// RegainLot is a paid mutator transaction binding the contract method 0x1080f5c9.
//
// Solidity: function regainLot(uint256 _auctionId) returns()
func (_Auction *AuctionTransactorSession) RegainLot(_auctionId *big.Int) (*types.Transaction, error) {
	return _Auction.Contract.RegainLot(&_Auction.TransactOpts, _auctionId)
}

// RenounceOwnership is a paid mutator transaction binding the contract method 0x715018a6.
//
// Solidity: function renounceOwnership() returns()
func (_Auction *AuctionTransactor) RenounceOwnership(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Auction.contract.Transact(opts, "renounceOwnership")
}

// RenounceOwnership is a paid mutator transaction binding the contract method 0x715018a6.
//
// Solidity: function renounceOwnership() returns()
func (_Auction *AuctionSession) RenounceOwnership() (*types.Transaction, error) {
	return _Auction.Contract.RenounceOwnership(&_Auction.TransactOpts)
}

// RenounceOwnership is a paid mutator transaction binding the contract method 0x715018a6.
//
// Solidity: function renounceOwnership() returns()
func (_Auction *AuctionTransactorSession) RenounceOwnership() (*types.Transaction, error) {
	return _Auction.Contract.RenounceOwnership(&_Auction.TransactOpts)
}

// TransferOwnership is a paid mutator transaction binding the contract method 0xf2fde38b.
//
// Solidity: function transferOwnership(address newOwner) returns()
func (_Auction *AuctionTransactor) TransferOwnership(opts *bind.TransactOpts, newOwner common.Address) (*types.Transaction, error) {
	return _Auction.contract.Transact(opts, "transferOwnership", newOwner)
}

// TransferOwnership is a paid mutator transaction binding the contract method 0xf2fde38b.
//
// Solidity: function transferOwnership(address newOwner) returns()
func (_Auction *AuctionSession) TransferOwnership(newOwner common.Address) (*types.Transaction, error) {
	return _Auction.Contract.TransferOwnership(&_Auction.TransactOpts, newOwner)
}

// TransferOwnership is a paid mutator transaction binding the contract method 0xf2fde38b.
//
// Solidity: function transferOwnership(address newOwner) returns()
func (_Auction *AuctionTransactorSession) TransferOwnership(newOwner common.Address) (*types.Transaction, error) {
	return _Auction.Contract.TransferOwnership(&_Auction.TransactOpts, newOwner)
}

// AuctionAuctionBidIterator is returned from FilterAuctionBid and is used to iterate over the raw logs and unpacked data for AuctionBid events raised by the Auction contract.
type AuctionAuctionBidIterator struct {
	Event *AuctionAuctionBid // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *AuctionAuctionBidIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(AuctionAuctionBid)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(AuctionAuctionBid)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *AuctionAuctionBidIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *AuctionAuctionBidIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// AuctionAuctionBid represents a AuctionBid event raised by the Auction contract.
type AuctionAuctionBid struct {
	AuctionId *big.Int
	Bidder    common.Address
	Amount    *big.Int
	Raw       types.Log // Blockchain specific contextual infos
}

// FilterAuctionBid is a free log retrieval operation binding the contract event 0xb8d756f2d1da4663767eb4d559780ace84f2f65a421a60ddcb47e8b2e5d2fd26.
//
// Solidity: event AuctionBid(uint256 _auctionId, address _bidder, uint256 _amount)
func (_Auction *AuctionFilterer) FilterAuctionBid(opts *bind.FilterOpts) (*AuctionAuctionBidIterator, error) {

	logs, sub, err := _Auction.contract.FilterLogs(opts, "AuctionBid")
	if err != nil {
		return nil, err
	}
	return &AuctionAuctionBidIterator{contract: _Auction.contract, event: "AuctionBid", logs: logs, sub: sub}, nil
}

// WatchAuctionBid is a free log subscription operation binding the contract event 0xb8d756f2d1da4663767eb4d559780ace84f2f65a421a60ddcb47e8b2e5d2fd26.
//
// Solidity: event AuctionBid(uint256 _auctionId, address _bidder, uint256 _amount)
func (_Auction *AuctionFilterer) WatchAuctionBid(opts *bind.WatchOpts, sink chan<- *AuctionAuctionBid) (event.Subscription, error) {

	logs, sub, err := _Auction.contract.WatchLogs(opts, "AuctionBid")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(AuctionAuctionBid)
				if err := _Auction.contract.UnpackLog(event, "AuctionBid", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseAuctionBid is a log parse operation binding the contract event 0xb8d756f2d1da4663767eb4d559780ace84f2f65a421a60ddcb47e8b2e5d2fd26.
//
// Solidity: event AuctionBid(uint256 _auctionId, address _bidder, uint256 _amount)
func (_Auction *AuctionFilterer) ParseAuctionBid(log types.Log) (*AuctionAuctionBid, error) {
	event := new(AuctionAuctionBid)
	if err := _Auction.contract.UnpackLog(event, "AuctionBid", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// AuctionAuctionClosedIterator is returned from FilterAuctionClosed and is used to iterate over the raw logs and unpacked data for AuctionClosed events raised by the Auction contract.
type AuctionAuctionClosedIterator struct {
	Event *AuctionAuctionClosed // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *AuctionAuctionClosedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(AuctionAuctionClosed)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(AuctionAuctionClosed)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *AuctionAuctionClosedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *AuctionAuctionClosedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// AuctionAuctionClosed represents a AuctionClosed event raised by the Auction contract.
type AuctionAuctionClosed struct {
	AuctionId *big.Int
	Raw       types.Log // Blockchain specific contextual infos
}

// FilterAuctionClosed is a free log retrieval operation binding the contract event 0xac4a907ec29adcc56774b757ecb1e1b4d597374fc9386107d05e2670259df7d3.
//
// Solidity: event AuctionClosed(uint256 _auctionId)
func (_Auction *AuctionFilterer) FilterAuctionClosed(opts *bind.FilterOpts) (*AuctionAuctionClosedIterator, error) {

	logs, sub, err := _Auction.contract.FilterLogs(opts, "AuctionClosed")
	if err != nil {
		return nil, err
	}
	return &AuctionAuctionClosedIterator{contract: _Auction.contract, event: "AuctionClosed", logs: logs, sub: sub}, nil
}

// WatchAuctionClosed is a free log subscription operation binding the contract event 0xac4a907ec29adcc56774b757ecb1e1b4d597374fc9386107d05e2670259df7d3.
//
// Solidity: event AuctionClosed(uint256 _auctionId)
func (_Auction *AuctionFilterer) WatchAuctionClosed(opts *bind.WatchOpts, sink chan<- *AuctionAuctionClosed) (event.Subscription, error) {

	logs, sub, err := _Auction.contract.WatchLogs(opts, "AuctionClosed")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(AuctionAuctionClosed)
				if err := _Auction.contract.UnpackLog(event, "AuctionClosed", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseAuctionClosed is a log parse operation binding the contract event 0xac4a907ec29adcc56774b757ecb1e1b4d597374fc9386107d05e2670259df7d3.
//
// Solidity: event AuctionClosed(uint256 _auctionId)
func (_Auction *AuctionFilterer) ParseAuctionClosed(log types.Log) (*AuctionAuctionClosed, error) {
	event := new(AuctionAuctionClosed)
	if err := _Auction.contract.UnpackLog(event, "AuctionClosed", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// AuctionAuctionCreatedIterator is returned from FilterAuctionCreated and is used to iterate over the raw logs and unpacked data for AuctionCreated events raised by the Auction contract.
type AuctionAuctionCreatedIterator struct {
	Event *AuctionAuctionCreated // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *AuctionAuctionCreatedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(AuctionAuctionCreated)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(AuctionAuctionCreated)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *AuctionAuctionCreatedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *AuctionAuctionCreatedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// AuctionAuctionCreated represents a AuctionCreated event raised by the Auction contract.
type AuctionAuctionCreated struct {
	Creator         common.Address
	TokenAddress    common.Address
	TokenId         *big.Int
	CurrencyAddress common.Address
	AuctionId       *big.Int
	Raw             types.Log // Blockchain specific contextual infos
}

// FilterAuctionCreated is a free log retrieval operation binding the contract event 0x03bb6e669c5d9d2143afb3599bda2cc92f483158549e37b474a6dc117f848b68.
//
// Solidity: event AuctionCreated(address _creator, address _tokenAddress, uint256 _tokenId, address _currencyAddress, uint256 _auctionId)
func (_Auction *AuctionFilterer) FilterAuctionCreated(opts *bind.FilterOpts) (*AuctionAuctionCreatedIterator, error) {

	logs, sub, err := _Auction.contract.FilterLogs(opts, "AuctionCreated")
	if err != nil {
		return nil, err
	}
	return &AuctionAuctionCreatedIterator{contract: _Auction.contract, event: "AuctionCreated", logs: logs, sub: sub}, nil
}

// WatchAuctionCreated is a free log subscription operation binding the contract event 0x03bb6e669c5d9d2143afb3599bda2cc92f483158549e37b474a6dc117f848b68.
//
// Solidity: event AuctionCreated(address _creator, address _tokenAddress, uint256 _tokenId, address _currencyAddress, uint256 _auctionId)
func (_Auction *AuctionFilterer) WatchAuctionCreated(opts *bind.WatchOpts, sink chan<- *AuctionAuctionCreated) (event.Subscription, error) {

	logs, sub, err := _Auction.contract.WatchLogs(opts, "AuctionCreated")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(AuctionAuctionCreated)
				if err := _Auction.contract.UnpackLog(event, "AuctionCreated", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseAuctionCreated is a log parse operation binding the contract event 0x03bb6e669c5d9d2143afb3599bda2cc92f483158549e37b474a6dc117f848b68.
//
// Solidity: event AuctionCreated(address _creator, address _tokenAddress, uint256 _tokenId, address _currencyAddress, uint256 _auctionId)
func (_Auction *AuctionFilterer) ParseAuctionCreated(log types.Log) (*AuctionAuctionCreated, error) {
	event := new(AuctionAuctionCreated)
	if err := _Auction.contract.UnpackLog(event, "AuctionCreated", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// AuctionLotTransferredIterator is returned from FilterLotTransferred and is used to iterate over the raw logs and unpacked data for LotTransferred events raised by the Auction contract.
type AuctionLotTransferredIterator struct {
	Event *AuctionLotTransferred // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *AuctionLotTransferredIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(AuctionLotTransferred)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(AuctionLotTransferred)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *AuctionLotTransferredIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *AuctionLotTransferredIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// AuctionLotTransferred represents a LotTransferred event raised by the Auction contract.
type AuctionLotTransferred struct {
	AuctionId *big.Int
	Winner    common.Address
	Raw       types.Log // Blockchain specific contextual infos
}

// FilterLotTransferred is a free log retrieval operation binding the contract event 0x0e60401031695311e5192456b98ba458c20ba883eb86b101645de6252c6e9dd3.
//
// Solidity: event LotTransferred(uint256 _auctionId, address _winner)
func (_Auction *AuctionFilterer) FilterLotTransferred(opts *bind.FilterOpts) (*AuctionLotTransferredIterator, error) {

	logs, sub, err := _Auction.contract.FilterLogs(opts, "LotTransferred")
	if err != nil {
		return nil, err
	}
	return &AuctionLotTransferredIterator{contract: _Auction.contract, event: "LotTransferred", logs: logs, sub: sub}, nil
}

// WatchLotTransferred is a free log subscription operation binding the contract event 0x0e60401031695311e5192456b98ba458c20ba883eb86b101645de6252c6e9dd3.
//
// Solidity: event LotTransferred(uint256 _auctionId, address _winner)
func (_Auction *AuctionFilterer) WatchLotTransferred(opts *bind.WatchOpts, sink chan<- *AuctionLotTransferred) (event.Subscription, error) {

	logs, sub, err := _Auction.contract.WatchLogs(opts, "LotTransferred")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(AuctionLotTransferred)
				if err := _Auction.contract.UnpackLog(event, "LotTransferred", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseLotTransferred is a log parse operation binding the contract event 0x0e60401031695311e5192456b98ba458c20ba883eb86b101645de6252c6e9dd3.
//
// Solidity: event LotTransferred(uint256 _auctionId, address _winner)
func (_Auction *AuctionFilterer) ParseLotTransferred(log types.Log) (*AuctionLotTransferred, error) {
	event := new(AuctionLotTransferred)
	if err := _Auction.contract.UnpackLog(event, "LotTransferred", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// AuctionOwnershipTransferredIterator is returned from FilterOwnershipTransferred and is used to iterate over the raw logs and unpacked data for OwnershipTransferred events raised by the Auction contract.
type AuctionOwnershipTransferredIterator struct {
	Event *AuctionOwnershipTransferred // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *AuctionOwnershipTransferredIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(AuctionOwnershipTransferred)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(AuctionOwnershipTransferred)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *AuctionOwnershipTransferredIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *AuctionOwnershipTransferredIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// AuctionOwnershipTransferred represents a OwnershipTransferred event raised by the Auction contract.
type AuctionOwnershipTransferred struct {
	PreviousOwner common.Address
	NewOwner      common.Address
	Raw           types.Log // Blockchain specific contextual infos
}

// FilterOwnershipTransferred is a free log retrieval operation binding the contract event 0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0.
//
// Solidity: event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)
func (_Auction *AuctionFilterer) FilterOwnershipTransferred(opts *bind.FilterOpts, previousOwner []common.Address, newOwner []common.Address) (*AuctionOwnershipTransferredIterator, error) {

	var previousOwnerRule []interface{}
	for _, previousOwnerItem := range previousOwner {
		previousOwnerRule = append(previousOwnerRule, previousOwnerItem)
	}
	var newOwnerRule []interface{}
	for _, newOwnerItem := range newOwner {
		newOwnerRule = append(newOwnerRule, newOwnerItem)
	}

	logs, sub, err := _Auction.contract.FilterLogs(opts, "OwnershipTransferred", previousOwnerRule, newOwnerRule)
	if err != nil {
		return nil, err
	}
	return &AuctionOwnershipTransferredIterator{contract: _Auction.contract, event: "OwnershipTransferred", logs: logs, sub: sub}, nil
}

// WatchOwnershipTransferred is a free log subscription operation binding the contract event 0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0.
//
// Solidity: event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)
func (_Auction *AuctionFilterer) WatchOwnershipTransferred(opts *bind.WatchOpts, sink chan<- *AuctionOwnershipTransferred, previousOwner []common.Address, newOwner []common.Address) (event.Subscription, error) {

	var previousOwnerRule []interface{}
	for _, previousOwnerItem := range previousOwner {
		previousOwnerRule = append(previousOwnerRule, previousOwnerItem)
	}
	var newOwnerRule []interface{}
	for _, newOwnerItem := range newOwner {
		newOwnerRule = append(newOwnerRule, newOwnerItem)
	}

	logs, sub, err := _Auction.contract.WatchLogs(opts, "OwnershipTransferred", previousOwnerRule, newOwnerRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(AuctionOwnershipTransferred)
				if err := _Auction.contract.UnpackLog(event, "OwnershipTransferred", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseOwnershipTransferred is a log parse operation binding the contract event 0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0.
//
// Solidity: event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)
func (_Auction *AuctionFilterer) ParseOwnershipTransferred(log types.Log) (*AuctionOwnershipTransferred, error) {
	event := new(AuctionOwnershipTransferred)
	if err := _Auction.contract.UnpackLog(event, "OwnershipTransferred", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// AuctionRepaymentTransferredIterator is returned from FilterRepaymentTransferred and is used to iterate over the raw logs and unpacked data for RepaymentTransferred events raised by the Auction contract.
type AuctionRepaymentTransferredIterator struct {
	Event *AuctionRepaymentTransferred // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *AuctionRepaymentTransferredIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(AuctionRepaymentTransferred)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(AuctionRepaymentTransferred)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *AuctionRepaymentTransferredIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *AuctionRepaymentTransferredIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// AuctionRepaymentTransferred represents a RepaymentTransferred event raised by the Auction contract.
type AuctionRepaymentTransferred struct {
	AuctionId *big.Int
	Creator   common.Address
	Raw       types.Log // Blockchain specific contextual infos
}

// FilterRepaymentTransferred is a free log retrieval operation binding the contract event 0xcede1e8bc44e44a1be509c46755459a8fef702efbee4649158b5376942bc14b9.
//
// Solidity: event RepaymentTransferred(uint256 _auctionId, address _creator)
func (_Auction *AuctionFilterer) FilterRepaymentTransferred(opts *bind.FilterOpts) (*AuctionRepaymentTransferredIterator, error) {

	logs, sub, err := _Auction.contract.FilterLogs(opts, "RepaymentTransferred")
	if err != nil {
		return nil, err
	}
	return &AuctionRepaymentTransferredIterator{contract: _Auction.contract, event: "RepaymentTransferred", logs: logs, sub: sub}, nil
}

// WatchRepaymentTransferred is a free log subscription operation binding the contract event 0xcede1e8bc44e44a1be509c46755459a8fef702efbee4649158b5376942bc14b9.
//
// Solidity: event RepaymentTransferred(uint256 _auctionId, address _creator)
func (_Auction *AuctionFilterer) WatchRepaymentTransferred(opts *bind.WatchOpts, sink chan<- *AuctionRepaymentTransferred) (event.Subscription, error) {

	logs, sub, err := _Auction.contract.WatchLogs(opts, "RepaymentTransferred")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(AuctionRepaymentTransferred)
				if err := _Auction.contract.UnpackLog(event, "RepaymentTransferred", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseRepaymentTransferred is a log parse operation binding the contract event 0xcede1e8bc44e44a1be509c46755459a8fef702efbee4649158b5376942bc14b9.
//
// Solidity: event RepaymentTransferred(uint256 _auctionId, address _creator)
func (_Auction *AuctionFilterer) ParseRepaymentTransferred(log types.Log) (*AuctionRepaymentTransferred, error) {
	event := new(AuctionRepaymentTransferred)
	if err := _Auction.contract.UnpackLog(event, "RepaymentTransferred", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

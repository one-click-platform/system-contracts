// Code generated - DO NOT EDIT.
// This file is a generated binding and any manual changes will be lost.

package generated

import (
	"math/big"
	"strings"

	ethereum "github.com/ethereum/go-ethereum"
	"github.com/ethereum/go-ethereum/accounts/abi"
	"github.com/ethereum/go-ethereum/accounts/abi/bind"
	"github.com/ethereum/go-ethereum/common"
	"github.com/ethereum/go-ethereum/core/types"
	"github.com/ethereum/go-ethereum/event"
)

// Reference imports to suppress errors if they are not otherwise used.
var (
	_ = big.NewInt
	_ = strings.NewReader
	_ = ethereum.NotFound
	_ = bind.Bind
	_ = common.Big1
	_ = types.BloomLookup
	_ = event.NewSubscription
)

// AuctionAuctionInfo is an auto generated low-level Go binding around an user-defined struct.
type AuctionAuctionInfo struct {
	Creator              common.Address
	StartPrice           *big.Int
	BuyNowPrice          *big.Int
	StartTime            *big.Int
	Duration             *big.Int
	DurationIncrement    *big.Int
	BidIncrement         *big.Int
	Description          string
	AssetAddress         common.Address
	AssetId              *big.Int
	CurrencyAddress      common.Address
	CurrentBidder        common.Address
	HighestBid           *big.Int
	LotBought            bool
	RepaymentTransferred bool
	LotTransferred       bool
	Status               uint8
}

// AuctionABI is the input ABI used to generate the binding from.
const AuctionABI = "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_auctionId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_winner\",\"type\":\"address\"}],\"name\":\"AssetClaimed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_auctionId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_bidder\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"AuctionBid\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_creator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_asset\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"assetId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_auctionId\",\"type\":\"uint256\"}],\"name\":\"AuctionCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_auctionId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_creator\",\"type\":\"address\"}],\"name\":\"TokensClaimed\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_auctionId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"bid\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_auctionId\",\"type\":\"uint256\"}],\"name\":\"buyNow\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_auctionId\",\"type\":\"uint256\"}],\"name\":\"claimLot\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_auctionId\",\"type\":\"uint256\"}],\"name\":\"claimRepayment\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_assetAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_assetId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_currencyAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_startPrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_buyNowPrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_startTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_duration\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_durationIncrement\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_bidIncrement\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"_description\",\"type\":\"string\"}],\"name\":\"createAuction\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_auctionId\",\"type\":\"uint256\"}],\"name\":\"getAuctionInfo\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"creator\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"startPrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"buyNowPrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"startTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"duration\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"durationIncrement\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"bidIncrement\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"description\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"assetAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"assetId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"currencyAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"currentBidder\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"highestBid\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"lotBought\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"repaymentTransferred\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"lotTransferred\",\"type\":\"bool\"},{\"internalType\":\"enumAuction.AuctionStatus\",\"name\":\"status\",\"type\":\"uint8\"}],\"internalType\":\"structAuction.AuctionInfo\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_auctionId\",\"type\":\"uint256\"}],\"name\":\"getRaisingBid\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_auctionId\",\"type\":\"uint256\"}],\"name\":\"getStatus\",\"outputs\":[{\"internalType\":\"enumAuction.AuctionStatus\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_auctionId\",\"type\":\"uint256\"}],\"name\":\"getUserLatestBid\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"userBids\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]"

// AuctionBin is the compiled bytecode used for deploying new contracts.
var AuctionBin = "0x608060405234801561001057600080fd5b5061454b806100206000396000f3fe608060405234801561001057600080fd5b506004361061009d5760003560e01c80635c622a0e116100665780635c622a0e146101565780636f1a9abb14610186578063a2165920146101b6578063f2da0664146101e6578063fc3fc4ed146102025761009d565b8062d878e8146100a257806308a0f32f146100be5780632b76708b146100da5780634bc28ede1461010a578063598647f81461013a575b600080fd5b6100bc60048036038101906100b791906134cd565b610232565b005b6100d860048036038101906100d391906134cd565b61078c565b005b6100f460048036038101906100ef91906134f6565b610ed2565b6040516101019190614292565b60405180910390f35b610124600480360381019061011f91906133b1565b610ef7565b6040516101319190614292565b60405180910390f35b610154600480360381019061014f9190613532565b6116f4565b005b610170600480360381019061016b91906134cd565b611f88565b60405161017d9190613f53565b60405180910390f35b6101a0600480360381019061019b91906134cd565b612320565b6040516101ad9190614292565b60405180910390f35b6101d060048036038101906101cb91906134cd565b6123dd565b6040516101dd9190614292565b60405180910390f35b61020060048036038101906101fb91906134cd565b612452565b005b61021c600480360381019061021791906134cd565b61291d565b6040516102299190614270565b60405180910390f35b8060038081111561023f57fe5b61024882611f88565b600381111561025357fe5b14610293576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161028a90613fb0565b60405180910390fd5b61029b613156565b60016000848152602001908152602001600020604051806102200160405290816000820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001600182015481526020016002820154815260200160038201548152602001600482015481526020016005820154815260200160068201548152602001600782018054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156103e55780601f106103ba576101008083540402835291602001916103e5565b820191906000526020600020905b8154815290600101906020018083116103c857829003601f168201915b505050505081526020016008820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200160098201548152602001600a820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001600b820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001600c8201548152602001600d820160009054906101000a900460ff16151515158152602001600d820160019054906101000a900460ff16151515158152602001600d820160029054906101000a900460ff16151515158152602001600d820160039054906101000a900460ff16600381111561057357fe5b600381111561057e57fe5b8152505090503373ffffffffffffffffffffffffffffffffffffffff16816000015173ffffffffffffffffffffffffffffffffffffffff16146105f6576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016105ed90613f90565b60405180910390fd5b806101c001511561063c576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610633906141b0565b60405180910390fd5b600081610140015173ffffffffffffffffffffffffffffffffffffffff1663a9059cbb83600001518461018001516040518363ffffffff1660e01b8152600401610687929190613f2a565b602060405180830381600087803b1580156106a157600080fd5b505af11580156106b5573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106d991906134a4565b90508061071b576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161071290614250565b60405180910390fd5b6001806000868152602001908152602001600020600d0160016101000a81548160ff0219169083151502179055507f83017964d41e2eb3369a74f93ce7024dc09d85d2bfa35ca86268234733b9659084836000015160405161077e9291906142ad565b60405180910390a150505050565b806002600381111561079a57fe5b6107a382611f88565b60038111156107ae57fe5b146107ee576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016107e590614050565b60405180910390fd5b6107f6613156565b60016000848152602001908152602001600020604051806102200160405290816000820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001600182015481526020016002820154815260200160038201548152602001600482015481526020016005820154815260200160068201548152602001600782018054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156109405780601f1061091557610100808354040283529160200191610940565b820191906000526020600020905b81548152906001019060200180831161092357829003601f168201915b505050505081526020016008820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200160098201548152602001600a820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001600b820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001600c8201548152602001600d820160009054906101000a900460ff16151515158152602001600d820160019054906101000a900460ff16151515158152602001600d820160029054906101000a900460ff16151515158152602001600d820160039054906101000a900460ff166003811115610ace57fe5b6003811115610ad957fe5b815250509050600081610140015173ffffffffffffffffffffffffffffffffffffffff166323b872dd333085604001516040518463ffffffff1660e01b8152600401610b2793929190613e69565b602060405180830381600087803b158015610b4157600080fd5b505af1158015610b55573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b7991906134a4565b905080610bbb576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610bb290614250565b60405180910390fd5b81610100015173ffffffffffffffffffffffffffffffffffffffff166323b872dd83600001518461016001518561012001516040518463ffffffff1660e01b8152600401610c0b93929190613ea0565b600060405180830381600087803b158015610c2557600080fd5b505af1158015610c39573d6000803e3d6000fd5b505050506001826101a00190151590811515815250506001826101e0019015159081151581525050816001600086815260200190815260200160002060008201518160000160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506020820151816001015560408201518160020155606082015181600301556080820151816004015560a0820151816005015560c0820151816006015560e0820151816007019080519060200190610d14929190613243565b506101008201518160080160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550610120820151816009015561014082015181600a0160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555061016082015181600b0160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555061018082015181600c01556101a082015181600d0160006101000a81548160ff0219169083151502179055506101c082015181600d0160016101000a81548160ff0219169083151502179055506101e082015181600d0160026101000a81548160ff02191690831515021790555061020082015181600d0160036101000a81548160ff02191690836003811115610e8b57fe5b02179055509050507f937214d5c201b3ae02bfb8ff13db1b39b3f359d5b96d4520dff65f8f40e445148433604051610ec49291906142d6565b60405180910390a150505050565b6002602052816000526040600020602052806000526040600020600091509150505481565b6000610f188b73ffffffffffffffffffffffffffffffffffffffff16612c77565b610f57576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610f4e90613fd0565b60405180910390fd5b60008b90503373ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16636352211e8d6040518263ffffffff1660e01b8152600401610fac9190614292565b60206040518083038186803b158015610fc457600080fd5b505afa158015610fd8573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ffc9190613388565b73ffffffffffffffffffffffffffffffffffffffff1614611052576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161104990614030565b60405180910390fd5b3073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1663081812fc8d6040518263ffffffff1660e01b81526004016110a29190614292565b60206040518083038186803b1580156110ba57600080fd5b505afa1580156110ce573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906110f29190613388565b73ffffffffffffffffffffffffffffffffffffffff1614611148576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161113f906140b0565b60405180910390fd5b6111678a73ffffffffffffffffffffffffffffffffffffffff16612c77565b6111a6576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161119d906141f0565b60405180910390fd5b60008914156111ea576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016111e190614130565b60405180910390fd5b8888101561122d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161122490614170565b60405180910390fd5b42871161126f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161126690614210565b60405180910390fd5b60008614156112b3576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016112aa90614150565b60405180910390fd5b60008514156112f7576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016112ee906140d0565b60405180910390fd5b83600010801561130e575061130a612c8a565b8411155b61134d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161134490614010565b60405180910390fd5b611355613156565b33816000019073ffffffffffffffffffffffffffffffffffffffff16908173ffffffffffffffffffffffffffffffffffffffff16815250508c81610100019073ffffffffffffffffffffffffffffffffffffffff16908173ffffffffffffffffffffffffffffffffffffffff16815250508b816101200181815250508a81610140019073ffffffffffffffffffffffffffffffffffffffff16908173ffffffffffffffffffffffffffffffffffffffff168152505089816020018181525050888160400181815250508781606001818152505086816080018181525050848160c0018181525050838160e00181905250600080549050816001600083815260200190815260200160002060008201518160000160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506020820151816001015560408201518160020155606082015181600301556080820151816004015560a0820151816005015560c0820151816006015560e08201518160070190805190602001906114fe929190613243565b506101008201518160080160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550610120820151816009015561014082015181600a0160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555061016082015181600b0160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555061018082015181600c01556101a082015181600d0160006101000a81548160ff0219169083151502179055506101c082015181600d0160016101000a81548160ff0219169083151502179055506101e082015181600d0160026101000a81548160ff02191690831515021790555061020082015181600d0160036101000a81548160ff0219169083600381111561167557fe5b021790555090505060008081548092919060010191905055507f03bb6e669c5d9d2143afb3599bda2cc92f483158549e37b474a6dc117f848b688260000151836101000151846101200151856101400151856040516116d8959493929190613ed7565b60405180910390a18093505050509a9950505050505050505050565b816002600381111561170257fe5b61170b82611f88565b600381111561171657fe5b14611756576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161174d90614050565b60405180910390fd5b61175f83612c9e565b8210156117a1576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161179890614070565b60405180910390fd5b6117a9613156565b60016000858152602001908152602001600020604051806102200160405290816000820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001600182015481526020016002820154815260200160038201548152602001600482015481526020016005820154815260200160068201548152602001600782018054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156118f35780601f106118c8576101008083540402835291602001916118f3565b820191906000526020600020905b8154815290600101906020018083116118d657829003601f168201915b505050505081526020016008820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200160098201548152602001600a820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001600b820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001600c8201548152602001600d820160009054906101000a900460ff16151515158152602001600d820160019054906101000a900460ff16151515158152602001600d820160029054906101000a900460ff16151515158152602001600d820160039054906101000a900460ff166003811115611a8157fe5b6003811115611a8c57fe5b8152505090506000816101400151905060008173ffffffffffffffffffffffffffffffffffffffff166323b872dd3330886040518463ffffffff1660e01b8152600401611adb93929190613e69565b602060405180830381600087803b158015611af557600080fd5b505af1158015611b09573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611b2d91906134a4565b905080611b6f576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611b66906141d0565b60405180910390fd5b600083610180015114611c56578173ffffffffffffffffffffffffffffffffffffffff1663a9059cbb8461016001518561018001516040518363ffffffff1660e01b8152600401611bc1929190613f2a565b602060405180830381600087803b158015611bdb57600080fd5b505af1158015611bef573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611c1391906134a4565b905080611c55576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611c4c90614090565b60405180910390fd5b5b84836101800181815250503383610160019073ffffffffffffffffffffffffffffffffffffffff16908173ffffffffffffffffffffffffffffffffffffffff1681525050611cb58360a001518460800151612fe690919063ffffffff16565b836080018181525050826001600088815260200190815260200160002060008201518160000160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506020820151816001015560408201518160020155606082015181600301556080820151816004015560a0820151816005015560c0820151816006015560e0820151816007019080519060200190611d71929190613243565b506101008201518160080160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550610120820151816009015561014082015181600a0160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555061016082015181600b0160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555061018082015181600c01556101a082015181600d0160006101000a81548160ff0219169083151502179055506101c082015181600d0160016101000a81548160ff0219169083151502179055506101e082015181600d0160026101000a81548160ff02191690831515021790555061020082015181600d0160036101000a81548160ff02191690836003811115611ee857fe5b0217905550905050846002600088815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055507fb8d756f2d1da4663767eb4d559780ace84f2f65a421a60ddcb47e8b2e5d2fd26863387604051611f78939291906142ff565b60405180910390a1505050505050565b6000611f92613156565b60016000848152602001908152602001600020604051806102200160405290816000820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001600182015481526020016002820154815260200160038201548152602001600482015481526020016005820154815260200160068201548152602001600782018054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156120dc5780601f106120b1576101008083540402835291602001916120dc565b820191906000526020600020905b8154815290600101906020018083116120bf57829003601f168201915b505050505081526020016008820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200160098201548152602001600a820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001600b820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001600c8201548152602001600d820160009054906101000a900460ff16151515158152602001600d820160019054906101000a900460ff16151515158152602001600d820160029054906101000a900460ff16151515158152602001600d820160039054906101000a900460ff16600381111561226a57fe5b600381111561227557fe5b815250509050600073ffffffffffffffffffffffffffffffffffffffff16816000015173ffffffffffffffffffffffffffffffffffffffff1614156122be57600091505061231b565b806101a00151156122d357600391505061231b565b80606001514210156122e957600191505061231b565b61230481608001518260600151612fe690919063ffffffff16565b42101561231557600291505061231b565b60039150505b919050565b6000816002600381111561233057fe5b61233982611f88565b600381111561234457fe5b14612384576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161237b90614050565b60405180910390fd5b6002600084815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054915050919050565b600081600260038111156123ed57fe5b6123f682611f88565b600381111561240157fe5b14612441576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161243890614050565b60405180910390fd5b61244a83612c9e565b915050919050565b8060038081111561245f57fe5b61246882611f88565b600381111561247357fe5b146124b3576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016124aa90613fb0565b60405180910390fd5b6124bb613156565b60016000848152602001908152602001600020604051806102200160405290816000820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001600182015481526020016002820154815260200160038201548152602001600482015481526020016005820154815260200160068201548152602001600782018054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156126055780601f106125da57610100808354040283529160200191612605565b820191906000526020600020905b8154815290600101906020018083116125e857829003601f168201915b505050505081526020016008820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200160098201548152602001600a820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001600b820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001600c8201548152602001600d820160009054906101000a900460ff16151515158152602001600d820160019054906101000a900460ff16151515158152602001600d820160029054906101000a900460ff16151515158152602001600d820160039054906101000a900460ff16600381111561279357fe5b600381111561279e57fe5b8152505090503373ffffffffffffffffffffffffffffffffffffffff1681610160015173ffffffffffffffffffffffffffffffffffffffff1614612817576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161280e90614190565b60405180910390fd5b806101e001511561285d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161285490614230565b60405180910390fd5b80610100015173ffffffffffffffffffffffffffffffffffffffff166323b872dd82600001518361016001518461012001516040518463ffffffff1660e01b81526004016128ad93929190613ea0565b600060405180830381600087803b1580156128c757600080fd5b505af11580156128db573d6000803e3d6000fd5b505050507f937214d5c201b3ae02bfb8ff13db1b39b3f359d5b96d4520dff65f8f40e4451483336040516129109291906142d6565b60405180910390a1505050565b612925613156565b816000600381111561293357fe5b61293c82611f88565b600381111561294757fe5b1415612988576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161297f906140f0565b60405180910390fd5b60016000848152602001908152602001600020604051806102200160405290816000820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001600182015481526020016002820154815260200160038201548152602001600482015481526020016005820154815260200160068201548152602001600782018054600181600116156101000203166002900480601f016020809104026020016040519081016040528092919081815260200182805460018160011615610100020316600290048015612ad25780601f10612aa757610100808354040283529160200191612ad2565b820191906000526020600020905b815481529060010190602001808311612ab557829003601f168201915b505050505081526020016008820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200160098201548152602001600a820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001600b820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001600c8201548152602001600d820160009054906101000a900460ff16151515158152602001600d820160019054906101000a900460ff16151515158152602001600d820160029054906101000a900460ff16151515158152602001600d820160039054906101000a900460ff166003811115612c6057fe5b6003811115612c6b57fe5b81525050915050919050565b600080823b905060008111915050919050565b60006b033b2e3c9fd0803ce8000000905090565b6000612ca8613156565b60016000848152602001908152602001600020604051806102200160405290816000820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001600182015481526020016002820154815260200160038201548152602001600482015481526020016005820154815260200160068201548152602001600782018054600181600116156101000203166002900480601f016020809104026020016040519081016040528092919081815260200182805460018160011615610100020316600290048015612df25780601f10612dc757610100808354040283529160200191612df2565b820191906000526020600020905b815481529060010190602001808311612dd557829003601f168201915b505050505081526020016008820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200160098201548152602001600a820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001600b820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001600c8201548152602001600d820160009054906101000a900460ff16151515158152602001600d820160019054906101000a900460ff16151515158152602001600d820160029054906101000a900460ff16151515158152602001600d820160039054906101000a900460ff166003811115612f8057fe5b6003811115612f8b57fe5b81525050905060008161018001519050612fdd81612fcf612faa612c8a565b612fc18660c001518661303b90919063ffffffff16565b6130ab90919063ffffffff16565b612fe690919063ffffffff16565b92505050919050565b600080828401905083811015613031576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161302890613ff0565b60405180910390fd5b8091505092915050565b60008083141561304e57600090506130a5565b600082840290508284828161305f57fe5b04146130a0576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161309790614110565b60405180910390fd5b809150505b92915050565b60006130ed83836040518060400160405280601a81526020017f536166654d6174683a206469766973696f6e206279207a65726f0000000000008152506130f5565b905092915050565b6000808311829061313c576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016131339190613f6e565b60405180910390fd5b50600083858161314857fe5b049050809150509392505050565b604051806102200160405280600073ffffffffffffffffffffffffffffffffffffffff16815260200160008152602001600081526020016000815260200160008152602001600081526020016000815260200160608152602001600073ffffffffffffffffffffffffffffffffffffffff16815260200160008152602001600073ffffffffffffffffffffffffffffffffffffffff168152602001600073ffffffffffffffffffffffffffffffffffffffff168152602001600081526020016000151581526020016000151581526020016000151581526020016000600381111561323d57fe5b81525090565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f1061328457805160ff19168380011785556132b2565b828001600101855582156132b2579182015b828111156132b1578251825591602001919060010190613296565b5b5090506132bf91906132c3565b5090565b5b808211156132dc5760008160009055506001016132c4565b5090565b6000813590506132ef816144d0565b92915050565b600081519050613304816144d0565b92915050565b600081519050613319816144e7565b92915050565b600082601f83011261333057600080fd5b813561334361333e82614367565b614336565b9150808252602083016020830185838301111561335f57600080fd5b61336a838284614467565b50505092915050565b600081359050613382816144fe565b92915050565b60006020828403121561339a57600080fd5b60006133a8848285016132f5565b91505092915050565b6000806000806000806000806000806101408b8d0312156133d157600080fd5b60006133df8d828e016132e0565b9a505060206133f08d828e01613373565b99505060406134018d828e016132e0565b98505060606134128d828e01613373565b97505060806134238d828e01613373565b96505060a06134348d828e01613373565b95505060c06134458d828e01613373565b94505060e06134568d828e01613373565b9350506101006134688d828e01613373565b9250506101208b013567ffffffffffffffff81111561348657600080fd5b6134928d828e0161331f565b9150509295989b9194979a5092959850565b6000602082840312156134b657600080fd5b60006134c48482850161330a565b91505092915050565b6000602082840312156134df57600080fd5b60006134ed84828501613373565b91505092915050565b6000806040838503121561350957600080fd5b600061351785828601613373565b9250506020613528858286016132e0565b9150509250929050565b6000806040838503121561354557600080fd5b600061355385828601613373565b925050602061356485828601613373565b9150509250929050565b6135778161441f565b82525050565b613586816143c4565b82525050565b613595816143c4565b82525050565b6135a4816143d6565b82525050565b6135b381614431565b82525050565b6135c281614431565b82525050565b60006135d382614397565b6135dd81856143a2565b93506135ed818560208601614476565b6135f6816144ab565b840191505092915050565b600061360c82614397565b61361681856143b3565b9350613626818560208601614476565b61362f816144ab565b840191505092915050565b6000613647601b836143b3565b91507f53656e646572206973206e6f742061756374696f6e206f776e657200000000006000830152602082019050919050565b60006136876017836143b3565b91507f41756374696f6e206973206e6f742066696e69736865640000000000000000006000830152602082019050919050565b60006136c7601d836143b3565b91507f476976656e206173736574206973206e6f74206120636f6e74726163740000006000830152602082019050919050565b6000613707601b836143b3565b91507f536166654d6174683a206164646974696f6e206f766572666c6f7700000000006000830152602082019050919050565b60006137476015836143b3565b91507f496e76616c69642062696420696e6372656d656e7400000000000000000000006000830152602082019050919050565b60006137876015836143b3565b91507f4973206e6f74206f776e6572206f6620617373657400000000000000000000006000830152602082019050919050565b60006137c76015836143b3565b91507f41756374696f6e206973206e6f742061637469766500000000000000000000006000830152602082019050919050565b60006138076053836143b3565b91507f42696420616d6f756e74206d757374206578636565642074686520686967686560008301527f73742062696420627920746865206d696e696d756d20696e6372656d656e742060208301527f70657263656e74616765206f72206d6f72652e000000000000000000000000006040830152606082019050919050565b60006138936012836143b3565b91507f4661696c656420746f20706179206261636b00000000000000000000000000006000830152602082019050919050565b60006138d36015836143b3565b91507f4173736574206973206e6f7420617070726f76656400000000000000000000006000830152602082019050919050565b60006139136019836143b3565b91507f496e76616c69642061756374696f6e20696e6372656d656e74000000000000006000830152602082019050919050565b60006139536016836143b3565b91507f41756374696f6e20646f6573206e6f74206578697374000000000000000000006000830152602082019050919050565b60006139936021836143b3565b91507f536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f60008301527f77000000000000000000000000000000000000000000000000000000000000006020830152604082019050919050565b60006139f96013836143b3565b91507f496e76616c6964207374617274207072696365000000000000000000000000006000830152602082019050919050565b6000613a396018836143b3565b91507f496e76616c69642061756374696f6e206475726174696f6e00000000000000006000830152602082019050919050565b6000613a796033836143b3565b91507f427579206e6f772070726963652073686f756c6420686967686572206f72206560008301527f7175616c20746f207374617274207072696365000000000000000000000000006020830152604082019050919050565b6000613adf6014836143b3565b91507f53656e646572206973206e6f742077696e6e65720000000000000000000000006000830152602082019050919050565b6000613b1f602a836143b3565b91507f5468652072657061796d656e742068617320616c7265616479206265656e207460008301527f72616e73666572726564000000000000000000000000000000000000000000006020830152604082019050919050565b6000613b856020836143b3565b91507f4661696c656420746f207472616e7366657220746f6b656e7320746f206269646000830152602082019050919050565b6000613bc5601d836143b3565b91507f476976656e20746f6b656e206973206e6f74206120636f6e74726163740000006000830152602082019050919050565b6000613c05601d836143b3565b91507f496e76616c69642073746172742074696d65206f662061756374696f6e0000006000830152602082019050919050565b6000613c456024836143b3565b91507f546865206c6f742068617320616c7265616479206265656e207472616e73666560008301527f72726564000000000000000000000000000000000000000000000000000000006020830152604082019050919050565b6000613cab6020836143b3565b91507f4661696c656420746f207472616e73666572207468652072657061796d656e746000830152602082019050919050565b600061022083016000830151613cf7600086018261357d565b506020830151613d0a6020860182613e4b565b506040830151613d1d6040860182613e4b565b506060830151613d306060860182613e4b565b506080830151613d436080860182613e4b565b5060a0830151613d5660a0860182613e4b565b5060c0830151613d6960c0860182613e4b565b5060e083015184820360e0860152613d8182826135c8565b915050610100830151613d9861010086018261357d565b50610120830151613dad610120860182613e4b565b50610140830151613dc261014086018261357d565b50610160830151613dd761016086018261357d565b50610180830151613dec610180860182613e4b565b506101a0830151613e016101a086018261359b565b506101c0830151613e166101c086018261359b565b506101e0830151613e2b6101e086018261359b565b50610200830151613e406102008601826135aa565b508091505092915050565b613e5481614415565b82525050565b613e6381614415565b82525050565b6000606082019050613e7e600083018661356e565b613e8b602083018561358c565b613e986040830184613e5a565b949350505050565b6000606082019050613eb5600083018661358c565b613ec2602083018561358c565b613ecf6040830184613e5a565b949350505050565b600060a082019050613eec600083018861358c565b613ef9602083018761358c565b613f066040830186613e5a565b613f13606083018561358c565b613f206080830184613e5a565b9695505050505050565b6000604082019050613f3f600083018561358c565b613f4c6020830184613e5a565b9392505050565b6000602082019050613f6860008301846135b9565b92915050565b60006020820190508181036000830152613f888184613601565b905092915050565b60006020820190508181036000830152613fa98161363a565b9050919050565b60006020820190508181036000830152613fc98161367a565b9050919050565b60006020820190508181036000830152613fe9816136ba565b9050919050565b60006020820190508181036000830152614009816136fa565b9050919050565b600060208201905081810360008301526140298161373a565b9050919050565b600060208201905081810360008301526140498161377a565b9050919050565b60006020820190508181036000830152614069816137ba565b9050919050565b60006020820190508181036000830152614089816137fa565b9050919050565b600060208201905081810360008301526140a981613886565b9050919050565b600060208201905081810360008301526140c9816138c6565b9050919050565b600060208201905081810360008301526140e981613906565b9050919050565b6000602082019050818103600083015261410981613946565b9050919050565b6000602082019050818103600083015261412981613986565b9050919050565b60006020820190508181036000830152614149816139ec565b9050919050565b6000602082019050818103600083015261416981613a2c565b9050919050565b6000602082019050818103600083015261418981613a6c565b9050919050565b600060208201905081810360008301526141a981613ad2565b9050919050565b600060208201905081810360008301526141c981613b12565b9050919050565b600060208201905081810360008301526141e981613b78565b9050919050565b6000602082019050818103600083015261420981613bb8565b9050919050565b6000602082019050818103600083015261422981613bf8565b9050919050565b6000602082019050818103600083015261424981613c38565b9050919050565b6000602082019050818103600083015261426981613c9e565b9050919050565b6000602082019050818103600083015261428a8184613cde565b905092915050565b60006020820190506142a76000830184613e5a565b92915050565b60006040820190506142c26000830185613e5a565b6142cf602083018461358c565b9392505050565b60006040820190506142eb6000830185613e5a565b6142f8602083018461356e565b9392505050565b60006060820190506143146000830186613e5a565b614321602083018561356e565b61432e6040830184613e5a565b949350505050565b6000604051905081810181811067ffffffffffffffff8211171561435d5761435c6144a9565b5b8060405250919050565b600067ffffffffffffffff821115614382576143816144a9565b5b601f19601f8301169050602081019050919050565b600081519050919050565b600082825260208201905092915050565b600082825260208201905092915050565b60006143cf826143f5565b9050919050565b60008115159050919050565b60008190506143f0826144bc565b919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b600061442a82614443565b9050919050565b600061443c826143e2565b9050919050565b600061444e82614455565b9050919050565b6000614460826143f5565b9050919050565b82818337600083830152505050565b60005b83811015614494578082015181840152602081019050614479565b838111156144a3576000848401525b50505050565bfe5b6000601f19601f8301169050919050565b600481106144cd576144cc6144a9565b5b50565b6144d9816143c4565b81146144e457600080fd5b50565b6144f0816143d6565b81146144fb57600080fd5b50565b61450781614415565b811461451257600080fd5b5056fea2646970667358221220256bf6064f57f6512be9a38e81492a3dce33df3d97c4441e189c1fedeb3f831164736f6c63430007020033"

// DeployAuction deploys a new Ethereum contract, binding an instance of Auction to it.
func DeployAuction(auth *bind.TransactOpts, backend bind.ContractBackend) (common.Address, *types.Transaction, *Auction, error) {
	parsed, err := abi.JSON(strings.NewReader(AuctionABI))
	if err != nil {
		return common.Address{}, nil, nil, err
	}

	address, tx, contract, err := bind.DeployContract(auth, parsed, common.FromHex(AuctionBin), backend)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &Auction{AuctionCaller: AuctionCaller{contract: contract}, AuctionTransactor: AuctionTransactor{contract: contract}, AuctionFilterer: AuctionFilterer{contract: contract}}, nil
}

// Auction is an auto generated Go binding around an Ethereum contract.
type Auction struct {
	AuctionCaller     // Read-only binding to the contract
	AuctionTransactor // Write-only binding to the contract
	AuctionFilterer   // Log filterer for contract events
}

// AuctionCaller is an auto generated read-only Go binding around an Ethereum contract.
type AuctionCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// AuctionTransactor is an auto generated write-only Go binding around an Ethereum contract.
type AuctionTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// AuctionFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type AuctionFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// AuctionSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type AuctionSession struct {
	Contract     *Auction          // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// AuctionCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type AuctionCallerSession struct {
	Contract *AuctionCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts  // Call options to use throughout this session
}

// AuctionTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type AuctionTransactorSession struct {
	Contract     *AuctionTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts  // Transaction auth options to use throughout this session
}

// AuctionRaw is an auto generated low-level Go binding around an Ethereum contract.
type AuctionRaw struct {
	Contract *Auction // Generic contract binding to access the raw methods on
}

// AuctionCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type AuctionCallerRaw struct {
	Contract *AuctionCaller // Generic read-only contract binding to access the raw methods on
}

// AuctionTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type AuctionTransactorRaw struct {
	Contract *AuctionTransactor // Generic write-only contract binding to access the raw methods on
}

// NewAuction creates a new instance of Auction, bound to a specific deployed contract.
func NewAuction(address common.Address, backend bind.ContractBackend) (*Auction, error) {
	contract, err := bindAuction(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &Auction{AuctionCaller: AuctionCaller{contract: contract}, AuctionTransactor: AuctionTransactor{contract: contract}, AuctionFilterer: AuctionFilterer{contract: contract}}, nil
}

// NewAuctionCaller creates a new read-only instance of Auction, bound to a specific deployed contract.
func NewAuctionCaller(address common.Address, caller bind.ContractCaller) (*AuctionCaller, error) {
	contract, err := bindAuction(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &AuctionCaller{contract: contract}, nil
}

// NewAuctionTransactor creates a new write-only instance of Auction, bound to a specific deployed contract.
func NewAuctionTransactor(address common.Address, transactor bind.ContractTransactor) (*AuctionTransactor, error) {
	contract, err := bindAuction(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &AuctionTransactor{contract: contract}, nil
}

// NewAuctionFilterer creates a new log filterer instance of Auction, bound to a specific deployed contract.
func NewAuctionFilterer(address common.Address, filterer bind.ContractFilterer) (*AuctionFilterer, error) {
	contract, err := bindAuction(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &AuctionFilterer{contract: contract}, nil
}

// bindAuction binds a generic wrapper to an already deployed contract.
func bindAuction(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := abi.JSON(strings.NewReader(AuctionABI))
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_Auction *AuctionRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _Auction.Contract.AuctionCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_Auction *AuctionRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Auction.Contract.AuctionTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_Auction *AuctionRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _Auction.Contract.AuctionTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_Auction *AuctionCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _Auction.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_Auction *AuctionTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Auction.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_Auction *AuctionTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _Auction.Contract.contract.Transact(opts, method, params...)
}

// GetAuctionInfo is a free data retrieval call binding the contract method 0xfc3fc4ed.
//
// Solidity: function getAuctionInfo(uint256 _auctionId) view returns((address,uint256,uint256,uint256,uint256,uint256,uint256,string,address,uint256,address,address,uint256,bool,bool,bool,uint8))
func (_Auction *AuctionCaller) GetAuctionInfo(opts *bind.CallOpts, _auctionId *big.Int) (AuctionAuctionInfo, error) {
	var out []interface{}
	err := _Auction.contract.Call(opts, &out, "getAuctionInfo", _auctionId)

	if err != nil {
		return *new(AuctionAuctionInfo), err
	}

	out0 := *abi.ConvertType(out[0], new(AuctionAuctionInfo)).(*AuctionAuctionInfo)

	return out0, err

}

// GetAuctionInfo is a free data retrieval call binding the contract method 0xfc3fc4ed.
//
// Solidity: function getAuctionInfo(uint256 _auctionId) view returns((address,uint256,uint256,uint256,uint256,uint256,uint256,string,address,uint256,address,address,uint256,bool,bool,bool,uint8))
func (_Auction *AuctionSession) GetAuctionInfo(_auctionId *big.Int) (AuctionAuctionInfo, error) {
	return _Auction.Contract.GetAuctionInfo(&_Auction.CallOpts, _auctionId)
}

// GetAuctionInfo is a free data retrieval call binding the contract method 0xfc3fc4ed.
//
// Solidity: function getAuctionInfo(uint256 _auctionId) view returns((address,uint256,uint256,uint256,uint256,uint256,uint256,string,address,uint256,address,address,uint256,bool,bool,bool,uint8))
func (_Auction *AuctionCallerSession) GetAuctionInfo(_auctionId *big.Int) (AuctionAuctionInfo, error) {
	return _Auction.Contract.GetAuctionInfo(&_Auction.CallOpts, _auctionId)
}

// GetRaisingBid is a free data retrieval call binding the contract method 0xa2165920.
//
// Solidity: function getRaisingBid(uint256 _auctionId) view returns(uint256)
func (_Auction *AuctionCaller) GetRaisingBid(opts *bind.CallOpts, _auctionId *big.Int) (*big.Int, error) {
	var out []interface{}
	err := _Auction.contract.Call(opts, &out, "getRaisingBid", _auctionId)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// GetRaisingBid is a free data retrieval call binding the contract method 0xa2165920.
//
// Solidity: function getRaisingBid(uint256 _auctionId) view returns(uint256)
func (_Auction *AuctionSession) GetRaisingBid(_auctionId *big.Int) (*big.Int, error) {
	return _Auction.Contract.GetRaisingBid(&_Auction.CallOpts, _auctionId)
}

// GetRaisingBid is a free data retrieval call binding the contract method 0xa2165920.
//
// Solidity: function getRaisingBid(uint256 _auctionId) view returns(uint256)
func (_Auction *AuctionCallerSession) GetRaisingBid(_auctionId *big.Int) (*big.Int, error) {
	return _Auction.Contract.GetRaisingBid(&_Auction.CallOpts, _auctionId)
}

// GetStatus is a free data retrieval call binding the contract method 0x5c622a0e.
//
// Solidity: function getStatus(uint256 _auctionId) view returns(uint8)
func (_Auction *AuctionCaller) GetStatus(opts *bind.CallOpts, _auctionId *big.Int) (uint8, error) {
	var out []interface{}
	err := _Auction.contract.Call(opts, &out, "getStatus", _auctionId)

	if err != nil {
		return *new(uint8), err
	}

	out0 := *abi.ConvertType(out[0], new(uint8)).(*uint8)

	return out0, err

}

// GetStatus is a free data retrieval call binding the contract method 0x5c622a0e.
//
// Solidity: function getStatus(uint256 _auctionId) view returns(uint8)
func (_Auction *AuctionSession) GetStatus(_auctionId *big.Int) (uint8, error) {
	return _Auction.Contract.GetStatus(&_Auction.CallOpts, _auctionId)
}

// GetStatus is a free data retrieval call binding the contract method 0x5c622a0e.
//
// Solidity: function getStatus(uint256 _auctionId) view returns(uint8)
func (_Auction *AuctionCallerSession) GetStatus(_auctionId *big.Int) (uint8, error) {
	return _Auction.Contract.GetStatus(&_Auction.CallOpts, _auctionId)
}

// GetUserLatestBid is a free data retrieval call binding the contract method 0x6f1a9abb.
//
// Solidity: function getUserLatestBid(uint256 _auctionId) view returns(uint256)
func (_Auction *AuctionCaller) GetUserLatestBid(opts *bind.CallOpts, _auctionId *big.Int) (*big.Int, error) {
	var out []interface{}
	err := _Auction.contract.Call(opts, &out, "getUserLatestBid", _auctionId)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// GetUserLatestBid is a free data retrieval call binding the contract method 0x6f1a9abb.
//
// Solidity: function getUserLatestBid(uint256 _auctionId) view returns(uint256)
func (_Auction *AuctionSession) GetUserLatestBid(_auctionId *big.Int) (*big.Int, error) {
	return _Auction.Contract.GetUserLatestBid(&_Auction.CallOpts, _auctionId)
}

// GetUserLatestBid is a free data retrieval call binding the contract method 0x6f1a9abb.
//
// Solidity: function getUserLatestBid(uint256 _auctionId) view returns(uint256)
func (_Auction *AuctionCallerSession) GetUserLatestBid(_auctionId *big.Int) (*big.Int, error) {
	return _Auction.Contract.GetUserLatestBid(&_Auction.CallOpts, _auctionId)
}

// UserBids is a free data retrieval call binding the contract method 0x2b76708b.
//
// Solidity: function userBids(uint256 , address ) view returns(uint256)
func (_Auction *AuctionCaller) UserBids(opts *bind.CallOpts, arg0 *big.Int, arg1 common.Address) (*big.Int, error) {
	var out []interface{}
	err := _Auction.contract.Call(opts, &out, "userBids", arg0, arg1)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// UserBids is a free data retrieval call binding the contract method 0x2b76708b.
//
// Solidity: function userBids(uint256 , address ) view returns(uint256)
func (_Auction *AuctionSession) UserBids(arg0 *big.Int, arg1 common.Address) (*big.Int, error) {
	return _Auction.Contract.UserBids(&_Auction.CallOpts, arg0, arg1)
}

// UserBids is a free data retrieval call binding the contract method 0x2b76708b.
//
// Solidity: function userBids(uint256 , address ) view returns(uint256)
func (_Auction *AuctionCallerSession) UserBids(arg0 *big.Int, arg1 common.Address) (*big.Int, error) {
	return _Auction.Contract.UserBids(&_Auction.CallOpts, arg0, arg1)
}

// Bid is a paid mutator transaction binding the contract method 0x598647f8.
//
// Solidity: function bid(uint256 _auctionId, uint256 _amount) returns()
func (_Auction *AuctionTransactor) Bid(opts *bind.TransactOpts, _auctionId *big.Int, _amount *big.Int) (*types.Transaction, error) {
	return _Auction.contract.Transact(opts, "bid", _auctionId, _amount)
}

// Bid is a paid mutator transaction binding the contract method 0x598647f8.
//
// Solidity: function bid(uint256 _auctionId, uint256 _amount) returns()
func (_Auction *AuctionSession) Bid(_auctionId *big.Int, _amount *big.Int) (*types.Transaction, error) {
	return _Auction.Contract.Bid(&_Auction.TransactOpts, _auctionId, _amount)
}

// Bid is a paid mutator transaction binding the contract method 0x598647f8.
//
// Solidity: function bid(uint256 _auctionId, uint256 _amount) returns()
func (_Auction *AuctionTransactorSession) Bid(_auctionId *big.Int, _amount *big.Int) (*types.Transaction, error) {
	return _Auction.Contract.Bid(&_Auction.TransactOpts, _auctionId, _amount)
}

// BuyNow is a paid mutator transaction binding the contract method 0x08a0f32f.
//
// Solidity: function buyNow(uint256 _auctionId) returns()
func (_Auction *AuctionTransactor) BuyNow(opts *bind.TransactOpts, _auctionId *big.Int) (*types.Transaction, error) {
	return _Auction.contract.Transact(opts, "buyNow", _auctionId)
}

// BuyNow is a paid mutator transaction binding the contract method 0x08a0f32f.
//
// Solidity: function buyNow(uint256 _auctionId) returns()
func (_Auction *AuctionSession) BuyNow(_auctionId *big.Int) (*types.Transaction, error) {
	return _Auction.Contract.BuyNow(&_Auction.TransactOpts, _auctionId)
}

// BuyNow is a paid mutator transaction binding the contract method 0x08a0f32f.
//
// Solidity: function buyNow(uint256 _auctionId) returns()
func (_Auction *AuctionTransactorSession) BuyNow(_auctionId *big.Int) (*types.Transaction, error) {
	return _Auction.Contract.BuyNow(&_Auction.TransactOpts, _auctionId)
}

// ClaimLot is a paid mutator transaction binding the contract method 0xf2da0664.
//
// Solidity: function claimLot(uint256 _auctionId) returns()
func (_Auction *AuctionTransactor) ClaimLot(opts *bind.TransactOpts, _auctionId *big.Int) (*types.Transaction, error) {
	return _Auction.contract.Transact(opts, "claimLot", _auctionId)
}

// ClaimLot is a paid mutator transaction binding the contract method 0xf2da0664.
//
// Solidity: function claimLot(uint256 _auctionId) returns()
func (_Auction *AuctionSession) ClaimLot(_auctionId *big.Int) (*types.Transaction, error) {
	return _Auction.Contract.ClaimLot(&_Auction.TransactOpts, _auctionId)
}

// ClaimLot is a paid mutator transaction binding the contract method 0xf2da0664.
//
// Solidity: function claimLot(uint256 _auctionId) returns()
func (_Auction *AuctionTransactorSession) ClaimLot(_auctionId *big.Int) (*types.Transaction, error) {
	return _Auction.Contract.ClaimLot(&_Auction.TransactOpts, _auctionId)
}

// ClaimRepayment is a paid mutator transaction binding the contract method 0x00d878e8.
//
// Solidity: function claimRepayment(uint256 _auctionId) returns()
func (_Auction *AuctionTransactor) ClaimRepayment(opts *bind.TransactOpts, _auctionId *big.Int) (*types.Transaction, error) {
	return _Auction.contract.Transact(opts, "claimRepayment", _auctionId)
}

// ClaimRepayment is a paid mutator transaction binding the contract method 0x00d878e8.
//
// Solidity: function claimRepayment(uint256 _auctionId) returns()
func (_Auction *AuctionSession) ClaimRepayment(_auctionId *big.Int) (*types.Transaction, error) {
	return _Auction.Contract.ClaimRepayment(&_Auction.TransactOpts, _auctionId)
}

// ClaimRepayment is a paid mutator transaction binding the contract method 0x00d878e8.
//
// Solidity: function claimRepayment(uint256 _auctionId) returns()
func (_Auction *AuctionTransactorSession) ClaimRepayment(_auctionId *big.Int) (*types.Transaction, error) {
	return _Auction.Contract.ClaimRepayment(&_Auction.TransactOpts, _auctionId)
}

// CreateAuction is a paid mutator transaction binding the contract method 0x4bc28ede.
//
// Solidity: function createAuction(address _assetAddress, uint256 _assetId, address _currencyAddress, uint256 _startPrice, uint256 _buyNowPrice, uint256 _startTime, uint256 _duration, uint256 _durationIncrement, uint256 _bidIncrement, string _description) returns(uint256)
func (_Auction *AuctionTransactor) CreateAuction(opts *bind.TransactOpts, _assetAddress common.Address, _assetId *big.Int, _currencyAddress common.Address, _startPrice *big.Int, _buyNowPrice *big.Int, _startTime *big.Int, _duration *big.Int, _durationIncrement *big.Int, _bidIncrement *big.Int, _description string) (*types.Transaction, error) {
	return _Auction.contract.Transact(opts, "createAuction", _assetAddress, _assetId, _currencyAddress, _startPrice, _buyNowPrice, _startTime, _duration, _durationIncrement, _bidIncrement, _description)
}

// CreateAuction is a paid mutator transaction binding the contract method 0x4bc28ede.
//
// Solidity: function createAuction(address _assetAddress, uint256 _assetId, address _currencyAddress, uint256 _startPrice, uint256 _buyNowPrice, uint256 _startTime, uint256 _duration, uint256 _durationIncrement, uint256 _bidIncrement, string _description) returns(uint256)
func (_Auction *AuctionSession) CreateAuction(_assetAddress common.Address, _assetId *big.Int, _currencyAddress common.Address, _startPrice *big.Int, _buyNowPrice *big.Int, _startTime *big.Int, _duration *big.Int, _durationIncrement *big.Int, _bidIncrement *big.Int, _description string) (*types.Transaction, error) {
	return _Auction.Contract.CreateAuction(&_Auction.TransactOpts, _assetAddress, _assetId, _currencyAddress, _startPrice, _buyNowPrice, _startTime, _duration, _durationIncrement, _bidIncrement, _description)
}

// CreateAuction is a paid mutator transaction binding the contract method 0x4bc28ede.
//
// Solidity: function createAuction(address _assetAddress, uint256 _assetId, address _currencyAddress, uint256 _startPrice, uint256 _buyNowPrice, uint256 _startTime, uint256 _duration, uint256 _durationIncrement, uint256 _bidIncrement, string _description) returns(uint256)
func (_Auction *AuctionTransactorSession) CreateAuction(_assetAddress common.Address, _assetId *big.Int, _currencyAddress common.Address, _startPrice *big.Int, _buyNowPrice *big.Int, _startTime *big.Int, _duration *big.Int, _durationIncrement *big.Int, _bidIncrement *big.Int, _description string) (*types.Transaction, error) {
	return _Auction.Contract.CreateAuction(&_Auction.TransactOpts, _assetAddress, _assetId, _currencyAddress, _startPrice, _buyNowPrice, _startTime, _duration, _durationIncrement, _bidIncrement, _description)
}

// AuctionAssetClaimedIterator is returned from FilterAssetClaimed and is used to iterate over the raw logs and unpacked data for AssetClaimed events raised by the Auction contract.
type AuctionAssetClaimedIterator struct {
	Event *AuctionAssetClaimed // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *AuctionAssetClaimedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(AuctionAssetClaimed)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(AuctionAssetClaimed)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *AuctionAssetClaimedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *AuctionAssetClaimedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// AuctionAssetClaimed represents a AssetClaimed event raised by the Auction contract.
type AuctionAssetClaimed struct {
	AuctionId *big.Int
	Winner    common.Address
	Raw       types.Log // Blockchain specific contextual infos
}

// FilterAssetClaimed is a free log retrieval operation binding the contract event 0x937214d5c201b3ae02bfb8ff13db1b39b3f359d5b96d4520dff65f8f40e44514.
//
// Solidity: event AssetClaimed(uint256 _auctionId, address _winner)
func (_Auction *AuctionFilterer) FilterAssetClaimed(opts *bind.FilterOpts) (*AuctionAssetClaimedIterator, error) {

	logs, sub, err := _Auction.contract.FilterLogs(opts, "AssetClaimed")
	if err != nil {
		return nil, err
	}
	return &AuctionAssetClaimedIterator{contract: _Auction.contract, event: "AssetClaimed", logs: logs, sub: sub}, nil
}

// WatchAssetClaimed is a free log subscription operation binding the contract event 0x937214d5c201b3ae02bfb8ff13db1b39b3f359d5b96d4520dff65f8f40e44514.
//
// Solidity: event AssetClaimed(uint256 _auctionId, address _winner)
func (_Auction *AuctionFilterer) WatchAssetClaimed(opts *bind.WatchOpts, sink chan<- *AuctionAssetClaimed) (event.Subscription, error) {

	logs, sub, err := _Auction.contract.WatchLogs(opts, "AssetClaimed")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(AuctionAssetClaimed)
				if err := _Auction.contract.UnpackLog(event, "AssetClaimed", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseAssetClaimed is a log parse operation binding the contract event 0x937214d5c201b3ae02bfb8ff13db1b39b3f359d5b96d4520dff65f8f40e44514.
//
// Solidity: event AssetClaimed(uint256 _auctionId, address _winner)
func (_Auction *AuctionFilterer) ParseAssetClaimed(log types.Log) (*AuctionAssetClaimed, error) {
	event := new(AuctionAssetClaimed)
	if err := _Auction.contract.UnpackLog(event, "AssetClaimed", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// AuctionAuctionBidIterator is returned from FilterAuctionBid and is used to iterate over the raw logs and unpacked data for AuctionBid events raised by the Auction contract.
type AuctionAuctionBidIterator struct {
	Event *AuctionAuctionBid // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *AuctionAuctionBidIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(AuctionAuctionBid)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(AuctionAuctionBid)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *AuctionAuctionBidIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *AuctionAuctionBidIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// AuctionAuctionBid represents a AuctionBid event raised by the Auction contract.
type AuctionAuctionBid struct {
	AuctionId *big.Int
	Bidder    common.Address
	Amount    *big.Int
	Raw       types.Log // Blockchain specific contextual infos
}

// FilterAuctionBid is a free log retrieval operation binding the contract event 0xb8d756f2d1da4663767eb4d559780ace84f2f65a421a60ddcb47e8b2e5d2fd26.
//
// Solidity: event AuctionBid(uint256 _auctionId, address _bidder, uint256 _amount)
func (_Auction *AuctionFilterer) FilterAuctionBid(opts *bind.FilterOpts) (*AuctionAuctionBidIterator, error) {

	logs, sub, err := _Auction.contract.FilterLogs(opts, "AuctionBid")
	if err != nil {
		return nil, err
	}
	return &AuctionAuctionBidIterator{contract: _Auction.contract, event: "AuctionBid", logs: logs, sub: sub}, nil
}

// WatchAuctionBid is a free log subscription operation binding the contract event 0xb8d756f2d1da4663767eb4d559780ace84f2f65a421a60ddcb47e8b2e5d2fd26.
//
// Solidity: event AuctionBid(uint256 _auctionId, address _bidder, uint256 _amount)
func (_Auction *AuctionFilterer) WatchAuctionBid(opts *bind.WatchOpts, sink chan<- *AuctionAuctionBid) (event.Subscription, error) {

	logs, sub, err := _Auction.contract.WatchLogs(opts, "AuctionBid")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(AuctionAuctionBid)
				if err := _Auction.contract.UnpackLog(event, "AuctionBid", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseAuctionBid is a log parse operation binding the contract event 0xb8d756f2d1da4663767eb4d559780ace84f2f65a421a60ddcb47e8b2e5d2fd26.
//
// Solidity: event AuctionBid(uint256 _auctionId, address _bidder, uint256 _amount)
func (_Auction *AuctionFilterer) ParseAuctionBid(log types.Log) (*AuctionAuctionBid, error) {
	event := new(AuctionAuctionBid)
	if err := _Auction.contract.UnpackLog(event, "AuctionBid", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// AuctionAuctionCreatedIterator is returned from FilterAuctionCreated and is used to iterate over the raw logs and unpacked data for AuctionCreated events raised by the Auction contract.
type AuctionAuctionCreatedIterator struct {
	Event *AuctionAuctionCreated // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *AuctionAuctionCreatedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(AuctionAuctionCreated)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(AuctionAuctionCreated)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *AuctionAuctionCreatedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *AuctionAuctionCreatedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// AuctionAuctionCreated represents a AuctionCreated event raised by the Auction contract.
type AuctionAuctionCreated struct {
	Creator   common.Address
	Asset     common.Address
	AssetId   *big.Int
	Token     common.Address
	AuctionId *big.Int
	Raw       types.Log // Blockchain specific contextual infos
}

// FilterAuctionCreated is a free log retrieval operation binding the contract event 0x03bb6e669c5d9d2143afb3599bda2cc92f483158549e37b474a6dc117f848b68.
//
// Solidity: event AuctionCreated(address _creator, address _asset, uint256 assetId, address _token, uint256 _auctionId)
func (_Auction *AuctionFilterer) FilterAuctionCreated(opts *bind.FilterOpts) (*AuctionAuctionCreatedIterator, error) {

	logs, sub, err := _Auction.contract.FilterLogs(opts, "AuctionCreated")
	if err != nil {
		return nil, err
	}
	return &AuctionAuctionCreatedIterator{contract: _Auction.contract, event: "AuctionCreated", logs: logs, sub: sub}, nil
}

// WatchAuctionCreated is a free log subscription operation binding the contract event 0x03bb6e669c5d9d2143afb3599bda2cc92f483158549e37b474a6dc117f848b68.
//
// Solidity: event AuctionCreated(address _creator, address _asset, uint256 assetId, address _token, uint256 _auctionId)
func (_Auction *AuctionFilterer) WatchAuctionCreated(opts *bind.WatchOpts, sink chan<- *AuctionAuctionCreated) (event.Subscription, error) {

	logs, sub, err := _Auction.contract.WatchLogs(opts, "AuctionCreated")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(AuctionAuctionCreated)
				if err := _Auction.contract.UnpackLog(event, "AuctionCreated", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseAuctionCreated is a log parse operation binding the contract event 0x03bb6e669c5d9d2143afb3599bda2cc92f483158549e37b474a6dc117f848b68.
//
// Solidity: event AuctionCreated(address _creator, address _asset, uint256 assetId, address _token, uint256 _auctionId)
func (_Auction *AuctionFilterer) ParseAuctionCreated(log types.Log) (*AuctionAuctionCreated, error) {
	event := new(AuctionAuctionCreated)
	if err := _Auction.contract.UnpackLog(event, "AuctionCreated", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// AuctionTokensClaimedIterator is returned from FilterTokensClaimed and is used to iterate over the raw logs and unpacked data for TokensClaimed events raised by the Auction contract.
type AuctionTokensClaimedIterator struct {
	Event *AuctionTokensClaimed // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *AuctionTokensClaimedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(AuctionTokensClaimed)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(AuctionTokensClaimed)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *AuctionTokensClaimedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *AuctionTokensClaimedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// AuctionTokensClaimed represents a TokensClaimed event raised by the Auction contract.
type AuctionTokensClaimed struct {
	AuctionId *big.Int
	Creator   common.Address
	Raw       types.Log // Blockchain specific contextual infos
}

// FilterTokensClaimed is a free log retrieval operation binding the contract event 0x83017964d41e2eb3369a74f93ce7024dc09d85d2bfa35ca86268234733b96590.
//
// Solidity: event TokensClaimed(uint256 _auctionId, address _creator)
func (_Auction *AuctionFilterer) FilterTokensClaimed(opts *bind.FilterOpts) (*AuctionTokensClaimedIterator, error) {

	logs, sub, err := _Auction.contract.FilterLogs(opts, "TokensClaimed")
	if err != nil {
		return nil, err
	}
	return &AuctionTokensClaimedIterator{contract: _Auction.contract, event: "TokensClaimed", logs: logs, sub: sub}, nil
}

// WatchTokensClaimed is a free log subscription operation binding the contract event 0x83017964d41e2eb3369a74f93ce7024dc09d85d2bfa35ca86268234733b96590.
//
// Solidity: event TokensClaimed(uint256 _auctionId, address _creator)
func (_Auction *AuctionFilterer) WatchTokensClaimed(opts *bind.WatchOpts, sink chan<- *AuctionTokensClaimed) (event.Subscription, error) {

	logs, sub, err := _Auction.contract.WatchLogs(opts, "TokensClaimed")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(AuctionTokensClaimed)
				if err := _Auction.contract.UnpackLog(event, "TokensClaimed", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseTokensClaimed is a log parse operation binding the contract event 0x83017964d41e2eb3369a74f93ce7024dc09d85d2bfa35ca86268234733b96590.
//
// Solidity: event TokensClaimed(uint256 _auctionId, address _creator)
func (_Auction *AuctionFilterer) ParseTokensClaimed(log types.Log) (*AuctionTokensClaimed, error) {
	event := new(AuctionTokensClaimed)
	if err := _Auction.contract.UnpackLog(event, "TokensClaimed", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// Code generated - DO NOT EDIT.
// This file is a generated binding and any manual changes will be lost.

package generated

import (
	"math/big"
	"strings"

	ethereum "github.com/ethereum/go-ethereum"
	"github.com/ethereum/go-ethereum/accounts/abi"
	"github.com/ethereum/go-ethereum/accounts/abi/bind"
	"github.com/ethereum/go-ethereum/common"
	"github.com/ethereum/go-ethereum/core/types"
	"github.com/ethereum/go-ethereum/event"
)

// Reference imports to suppress errors if they are not otherwise used.
var (
	_ = big.NewInt
	_ = strings.NewReader
	_ = ethereum.NotFound
	_ = bind.Bind
	_ = common.Big1
	_ = types.BloomLookup
	_ = event.NewSubscription
)

// WERC721ABI is the input ABI used to generate the binding from.
const WERC721ABI = "[{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_eligibleUsers\",\"type\":\"address[]\"},{\"internalType\":\"string\",\"name\":\"_name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_symbol\",\"type\":\"string\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"approved\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getApproved\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"mint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"switchUserPermissions\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"tokenURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]"

// WERC721Bin is the compiled bytecode used for deploying new contracts.
var WERC721Bin = "0x60806040523480156200001157600080fd5b50604051620034a7380380620034a78339818101604052810190620000379190620003c6565b818160006200004b620001e360201b60201c565b9050806000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508073ffffffffffffffffffffffffffffffffffffffff16600073ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a350816001908051906020019062000101929190620001eb565b5080600290805190602001906200011a929190620001eb565b50505060005b8351811015620001d9576001600760008684815181106200016a577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b602002602001015173ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055508080620001d090620005d5565b91505062000120565b50505050620006db565b600033905090565b828054620001f99062000569565b90600052602060002090601f0160209004810192826200021d576000855562000269565b82601f106200023857805160ff191683800117855562000269565b8280016001018555821562000269579182015b82811115620002685782518255916020019190600101906200024b565b5b5090506200027891906200027c565b5090565b5b80821115620002975760008160009055506001016200027d565b5090565b6000620002b2620002ac8462000490565b62000467565b90508083825260208201905082856020860282011115620002d257600080fd5b60005b85811015620003065781620002eb888262000355565b845260208401935060208301925050600181019050620002d5565b5050509392505050565b6000620003276200032184620004bf565b62000467565b9050828152602081018484840111156200034057600080fd5b6200034d84828562000533565b509392505050565b6000815190506200036681620006c1565b92915050565b600082601f8301126200037e57600080fd5b8151620003908482602086016200029b565b91505092915050565b600082601f830112620003ab57600080fd5b8151620003bd84826020860162000310565b91505092915050565b600080600060608486031215620003dc57600080fd5b600084015167ffffffffffffffff811115620003f757600080fd5b62000405868287016200036c565b935050602084015167ffffffffffffffff8111156200042357600080fd5b620004318682870162000399565b925050604084015167ffffffffffffffff8111156200044f57600080fd5b6200045d8682870162000399565b9150509250925092565b60006200047362000486565b90506200048182826200059f565b919050565b6000604051905090565b600067ffffffffffffffff821115620004ae57620004ad62000681565b5b602082029050602081019050919050565b600067ffffffffffffffff821115620004dd57620004dc62000681565b5b620004e882620006b0565b9050602081019050919050565b6000620005028262000509565b9050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b60005b838110156200055357808201518184015260208101905062000536565b8381111562000563576000848401525b50505050565b600060028204905060018216806200058257607f821691505b6020821081141562000599576200059862000652565b5b50919050565b620005aa82620006b0565b810181811067ffffffffffffffff82111715620005cc57620005cb62000681565b5b80604052505050565b6000620005e28262000529565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82141562000618576200061762000623565b5b600182019050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6000601f19601f8301169050919050565b620006cc81620004f5565b8114620006d857600080fd5b50565b612dbc80620006eb6000396000f3fe608060405234801561001057600080fd5b50600436106101165760003560e01c806370a08231116100a2578063a22cb46511610071578063a22cb465146102cb578063b88d4fde146102e7578063c87b56dd14610303578063e985e9c514610333578063f2fde38b1461036357610116565b806370a0823114610255578063715018a6146102855780638da5cb5b1461028f57806395d89b41146102ad57610116565b806323b872dd116100e957806323b872dd146101b557806340c10f19146101d157806342842e0e146101ed57806348065fa6146102095780636352211e1461022557610116565b806301ffc9a71461011b57806306fdde031461014b578063081812fc14610169578063095ea7b314610199575b600080fd5b61013560048036038101906101309190611e54565b61037f565b604051610142919061227d565b60405180910390f35b610153610461565b6040516101609190612298565b60405180910390f35b610183600480360381019061017e9190611ea6565b6104f3565b6040516101909190612216565b60405180910390f35b6101b360048036038101906101ae9190611e18565b610578565b005b6101cf60048036038101906101ca9190611d12565b610690565b005b6101eb60048036038101906101e69190611e18565b6106f0565b005b61020760048036038101906102029190611d12565b61078c565b005b610223600480360381019061021e9190611cad565b6107ac565b005b61023f600480360381019061023a9190611ea6565b6108cf565b60405161024c9190612216565b60405180910390f35b61026f600480360381019061026a9190611cad565b610981565b60405161027c91906124da565b60405180910390f35b61028d610a39565b005b610297610b73565b6040516102a49190612216565b60405180910390f35b6102b5610b9c565b6040516102c29190612298565b60405180910390f35b6102e560048036038101906102e09190611ddc565b610c2e565b005b61030160048036038101906102fc9190611d61565b610daf565b005b61031d60048036038101906103189190611ea6565b610e11565b60405161032a9190612298565b60405180910390f35b61034d60048036038101906103489190611cd6565b610eb8565b60405161035a919061227d565b60405180910390f35b61037d60048036038101906103789190611cad565b610f4c565b005b60007f80ac58cd000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916148061044a57507f5b5e139f000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916145b8061045a5750610459826110f5565b5b9050919050565b606060018054610470906126ff565b80601f016020809104026020016040519081016040528092919081815260200182805461049c906126ff565b80156104e95780601f106104be576101008083540402835291602001916104e9565b820191906000526020600020905b8154815290600101906020018083116104cc57829003601f168201915b5050505050905090565b60006104fe8261115f565b61053d576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016105349061241a565b60405180910390fd5b6005600083815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b6000610583826108cf565b90508073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1614156105f4576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016105eb9061249a565b60405180910390fd5b8073ffffffffffffffffffffffffffffffffffffffff166106136111cb565b73ffffffffffffffffffffffffffffffffffffffff16148061064257506106418161063c6111cb565b610eb8565b5b610681576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016106789061239a565b60405180910390fd5b61068b83836111d3565b505050565b6106a161069b6111cb565b8261128c565b6106e0576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016106d7906124ba565b60405180910390fd5b6106eb83838361136a565b505050565b33600760008273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff1661077d576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610774906122fa565b60405180910390fd5b61078783836115c6565b505050565b6107a783838360405180602001604052806000815250610daf565b505050565b6107b46111cb565b73ffffffffffffffffffffffffffffffffffffffff166107d2610b73565b73ffffffffffffffffffffffffffffffffffffffff1614610828576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161081f9061243a565b60405180910390fd5b600760008273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff1615600760008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff02191690831515021790555050565b6000806003600084815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161415610978576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161096f906123da565b60405180910390fd5b80915050919050565b60008073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1614156109f2576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016109e9906123ba565b60405180910390fd5b600460008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b610a416111cb565b73ffffffffffffffffffffffffffffffffffffffff16610a5f610b73565b73ffffffffffffffffffffffffffffffffffffffff1614610ab5576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610aac9061243a565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff1660008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a360008060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b606060028054610bab906126ff565b80601f0160208091040260200160405190810160405280929190818152602001828054610bd7906126ff565b8015610c245780601f10610bf957610100808354040283529160200191610c24565b820191906000526020600020905b815481529060010190602001808311610c0757829003601f168201915b5050505050905090565b610c366111cb565b73ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff161415610ca4576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610c9b9061235a565b60405180910390fd5b8060066000610cb16111cb565b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055508173ffffffffffffffffffffffffffffffffffffffff16610d5e6111cb565b73ffffffffffffffffffffffffffffffffffffffff167f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c3183604051610da3919061227d565b60405180910390a35050565b610dc0610dba6111cb565b8361128c565b610dff576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610df6906124ba565b60405180910390fd5b610e0b848484846115e4565b50505050565b6060610e1c8261115f565b610e5b576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610e529061247a565b60405180910390fd5b6000610e65611640565b90506000815111610e855760405180602001604052806000815250610eb0565b80610e8f84611657565b604051602001610ea09291906121f2565b6040516020818303038152906040525b915050919050565b6000600660008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16905092915050565b610f546111cb565b73ffffffffffffffffffffffffffffffffffffffff16610f72610b73565b73ffffffffffffffffffffffffffffffffffffffff1614610fc8576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610fbf9061243a565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161415611038576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161102f906122da565b60405180910390fd5b8073ffffffffffffffffffffffffffffffffffffffff1660008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a3806000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b60007f01ffc9a7000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916149050919050565b60008073ffffffffffffffffffffffffffffffffffffffff166003600084815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614159050919050565b600033905090565b816005600083815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550808273ffffffffffffffffffffffffffffffffffffffff16611246836108cf565b73ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92560405160405180910390a45050565b60006112978261115f565b6112d6576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016112cd9061237a565b60405180910390fd5b60006112e1836108cf565b90508073ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff16148061135057508373ffffffffffffffffffffffffffffffffffffffff16611338846104f3565b73ffffffffffffffffffffffffffffffffffffffff16145b8061136157506113608185610eb8565b5b91505092915050565b8273ffffffffffffffffffffffffffffffffffffffff1661138a826108cf565b73ffffffffffffffffffffffffffffffffffffffff16146113e0576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016113d79061245a565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff161415611450576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016114479061233a565b60405180910390fd5b61145b838383611804565b6114666000826111d3565b6001600460008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282546114b69190612615565b925050819055506001600460008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825461150d919061258e565b92505081905550816003600083815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550808273ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef60405160405180910390a4505050565b6115e0828260405180602001604052806000815250611809565b5050565b6115ef84848461136a565b6115fb84848484611864565b61163a576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611631906122ba565b60405180910390fd5b50505050565b606060405180602001604052806000815250905090565b6060600082141561169f576040518060400160405280600181526020017f300000000000000000000000000000000000000000000000000000000000000081525090506117ff565b600082905060005b600082146116d15780806116ba90612762565b915050600a826116ca91906125e4565b91506116a7565b60008167ffffffffffffffff811115611713577f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6040519080825280601f01601f1916602001820160405280156117455781602001600182028036833780820191505090505b5090505b600085146117f85760018261175e9190612615565b9150600a8561176d91906127ab565b6030611779919061258e565b60f81b8183815181106117b5577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a905350600a856117f191906125e4565b9450611749565b8093505050505b919050565b505050565b61181383836119fb565b6118206000848484611864565b61185f576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611856906122ba565b60405180910390fd5b505050565b60006118858473ffffffffffffffffffffffffffffffffffffffff16611bc9565b156119ee578373ffffffffffffffffffffffffffffffffffffffff1663150b7a026118ae6111cb565b8786866040518563ffffffff1660e01b81526004016118d09493929190612231565b602060405180830381600087803b1580156118ea57600080fd5b505af192505050801561191b57506040513d601f19601f820116820180604052508101906119189190611e7d565b60015b61199e573d806000811461194b576040519150601f19603f3d011682016040523d82523d6000602084013e611950565b606091505b50600081511415611996576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161198d906122ba565b60405180910390fd5b805181602001fd5b63150b7a0260e01b7bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916817bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916149150506119f3565b600190505b949350505050565b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff161415611a6b576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611a62906123fa565b60405180910390fd5b611a748161115f565b15611ab4576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611aab9061231a565b60405180910390fd5b611ac060008383611804565b6001600460008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000828254611b10919061258e565b92505081905550816003600083815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550808273ffffffffffffffffffffffffffffffffffffffff16600073ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef60405160405180910390a45050565b600080823b905060008111915050919050565b6000611bef611bea8461251a565b6124f5565b905082815260208101848484011115611c0757600080fd5b611c128482856126bd565b509392505050565b600081359050611c2981612d2a565b92915050565b600081359050611c3e81612d41565b92915050565b600081359050611c5381612d58565b92915050565b600081519050611c6881612d58565b92915050565b600082601f830112611c7f57600080fd5b8135611c8f848260208601611bdc565b91505092915050565b600081359050611ca781612d6f565b92915050565b600060208284031215611cbf57600080fd5b6000611ccd84828501611c1a565b91505092915050565b60008060408385031215611ce957600080fd5b6000611cf785828601611c1a565b9250506020611d0885828601611c1a565b9150509250929050565b600080600060608486031215611d2757600080fd5b6000611d3586828701611c1a565b9350506020611d4686828701611c1a565b9250506040611d5786828701611c98565b9150509250925092565b60008060008060808587031215611d7757600080fd5b6000611d8587828801611c1a565b9450506020611d9687828801611c1a565b9350506040611da787828801611c98565b925050606085013567ffffffffffffffff811115611dc457600080fd5b611dd087828801611c6e565b91505092959194509250565b60008060408385031215611def57600080fd5b6000611dfd85828601611c1a565b9250506020611e0e85828601611c2f565b9150509250929050565b60008060408385031215611e2b57600080fd5b6000611e3985828601611c1a565b9250506020611e4a85828601611c98565b9150509250929050565b600060208284031215611e6657600080fd5b6000611e7484828501611c44565b91505092915050565b600060208284031215611e8f57600080fd5b6000611e9d84828501611c59565b91505092915050565b600060208284031215611eb857600080fd5b6000611ec684828501611c98565b91505092915050565b611ed881612649565b82525050565b611ee78161265b565b82525050565b6000611ef88261254b565b611f028185612561565b9350611f128185602086016126cc565b611f1b81612898565b840191505092915050565b6000611f3182612556565b611f3b8185612572565b9350611f4b8185602086016126cc565b611f5481612898565b840191505092915050565b6000611f6a82612556565b611f748185612583565b9350611f848185602086016126cc565b80840191505092915050565b6000611f9d603283612572565b9150611fa8826128a9565b604082019050919050565b6000611fc0602683612572565b9150611fcb826128f8565b604082019050919050565b6000611fe3601483612572565b9150611fee82612947565b602082019050919050565b6000612006601c83612572565b915061201182612970565b602082019050919050565b6000612029602483612572565b915061203482612999565b604082019050919050565b600061204c601983612572565b9150612057826129e8565b602082019050919050565b600061206f602c83612572565b915061207a82612a11565b604082019050919050565b6000612092603883612572565b915061209d82612a60565b604082019050919050565b60006120b5602a83612572565b91506120c082612aaf565b604082019050919050565b60006120d8602983612572565b91506120e382612afe565b604082019050919050565b60006120fb602083612572565b915061210682612b4d565b602082019050919050565b600061211e602c83612572565b915061212982612b76565b604082019050919050565b6000612141602083612572565b915061214c82612bc5565b602082019050919050565b6000612164602983612572565b915061216f82612bee565b604082019050919050565b6000612187602f83612572565b915061219282612c3d565b604082019050919050565b60006121aa602183612572565b91506121b582612c8c565b604082019050919050565b60006121cd603183612572565b91506121d882612cdb565b604082019050919050565b6121ec816126b3565b82525050565b60006121fe8285611f5f565b915061220a8284611f5f565b91508190509392505050565b600060208201905061222b6000830184611ecf565b92915050565b60006080820190506122466000830187611ecf565b6122536020830186611ecf565b61226060408301856121e3565b81810360608301526122728184611eed565b905095945050505050565b60006020820190506122926000830184611ede565b92915050565b600060208201905081810360008301526122b28184611f26565b905092915050565b600060208201905081810360008301526122d381611f90565b9050919050565b600060208201905081810360008301526122f381611fb3565b9050919050565b6000602082019050818103600083015261231381611fd6565b9050919050565b6000602082019050818103600083015261233381611ff9565b9050919050565b600060208201905081810360008301526123538161201c565b9050919050565b600060208201905081810360008301526123738161203f565b9050919050565b6000602082019050818103600083015261239381612062565b9050919050565b600060208201905081810360008301526123b381612085565b9050919050565b600060208201905081810360008301526123d3816120a8565b9050919050565b600060208201905081810360008301526123f3816120cb565b9050919050565b60006020820190508181036000830152612413816120ee565b9050919050565b6000602082019050818103600083015261243381612111565b9050919050565b6000602082019050818103600083015261245381612134565b9050919050565b6000602082019050818103600083015261247381612157565b9050919050565b600060208201905081810360008301526124938161217a565b9050919050565b600060208201905081810360008301526124b38161219d565b9050919050565b600060208201905081810360008301526124d3816121c0565b9050919050565b60006020820190506124ef60008301846121e3565b92915050565b60006124ff612510565b905061250b8282612731565b919050565b6000604051905090565b600067ffffffffffffffff82111561253557612534612869565b5b61253e82612898565b9050602081019050919050565b600081519050919050565b600081519050919050565b600082825260208201905092915050565b600082825260208201905092915050565b600081905092915050565b6000612599826126b3565b91506125a4836126b3565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff038211156125d9576125d86127dc565b5b828201905092915050565b60006125ef826126b3565b91506125fa836126b3565b92508261260a5761260961280b565b5b828204905092915050565b6000612620826126b3565b915061262b836126b3565b92508282101561263e5761263d6127dc565b5b828203905092915050565b600061265482612693565b9050919050565b60008115159050919050565b60007fffffffff0000000000000000000000000000000000000000000000000000000082169050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b82818337600083830152505050565b60005b838110156126ea5780820151818401526020810190506126cf565b838111156126f9576000848401525b50505050565b6000600282049050600182168061271757607f821691505b6020821081141561272b5761272a61283a565b5b50919050565b61273a82612898565b810181811067ffffffffffffffff8211171561275957612758612869565b5b80604052505050565b600061276d826126b3565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8214156127a05761279f6127dc565b5b600182019050919050565b60006127b6826126b3565b91506127c1836126b3565b9250826127d1576127d061280b565b5b828206905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6000601f19601f8301169050919050565b7f4552433732313a207472616e7366657220746f206e6f6e20455243373231526560008201527f63656976657220696d706c656d656e7465720000000000000000000000000000602082015250565b7f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160008201527f6464726573730000000000000000000000000000000000000000000000000000602082015250565b7f4973206e6f7420656c696769626c652075736572000000000000000000000000600082015250565b7f4552433732313a20746f6b656e20616c7265616479206d696e74656400000000600082015250565b7f4552433732313a207472616e7366657220746f20746865207a65726f2061646460008201527f7265737300000000000000000000000000000000000000000000000000000000602082015250565b7f4552433732313a20617070726f766520746f2063616c6c657200000000000000600082015250565b7f4552433732313a206f70657261746f7220717565727920666f72206e6f6e657860008201527f697374656e7420746f6b656e0000000000000000000000000000000000000000602082015250565b7f4552433732313a20617070726f76652063616c6c6572206973206e6f74206f7760008201527f6e6572206e6f7220617070726f76656420666f7220616c6c0000000000000000602082015250565b7f4552433732313a2062616c616e636520717565727920666f7220746865207a6560008201527f726f206164647265737300000000000000000000000000000000000000000000602082015250565b7f4552433732313a206f776e657220717565727920666f72206e6f6e657869737460008201527f656e7420746f6b656e0000000000000000000000000000000000000000000000602082015250565b7f4552433732313a206d696e7420746f20746865207a65726f2061646472657373600082015250565b7f4552433732313a20617070726f76656420717565727920666f72206e6f6e657860008201527f697374656e7420746f6b656e0000000000000000000000000000000000000000602082015250565b7f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572600082015250565b7f4552433732313a207472616e73666572206f6620746f6b656e2074686174206960008201527f73206e6f74206f776e0000000000000000000000000000000000000000000000602082015250565b7f4552433732314d657461646174613a2055524920717565727920666f72206e6f60008201527f6e6578697374656e7420746f6b656e0000000000000000000000000000000000602082015250565b7f4552433732313a20617070726f76616c20746f2063757272656e74206f776e6560008201527f7200000000000000000000000000000000000000000000000000000000000000602082015250565b7f4552433732313a207472616e736665722063616c6c6572206973206e6f74206f60008201527f776e6572206e6f7220617070726f766564000000000000000000000000000000602082015250565b612d3381612649565b8114612d3e57600080fd5b50565b612d4a8161265b565b8114612d5557600080fd5b50565b612d6181612667565b8114612d6c57600080fd5b50565b612d78816126b3565b8114612d8357600080fd5b5056fea26469706673582212202d0b74b69803ac40a746c8bba1fde3b82de11cff81fcc398a3fbf0542a47504b64736f6c63430008030033"

// DeployWERC721 deploys a new Ethereum contract, binding an instance of WERC721 to it.
func DeployWERC721(auth *bind.TransactOpts, backend bind.ContractBackend, _eligibleUsers []common.Address, _name string, _symbol string) (common.Address, *types.Transaction, *WERC721, error) {
	parsed, err := abi.JSON(strings.NewReader(WERC721ABI))
	if err != nil {
		return common.Address{}, nil, nil, err
	}

	address, tx, contract, err := bind.DeployContract(auth, parsed, common.FromHex(WERC721Bin), backend, _eligibleUsers, _name, _symbol)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &WERC721{WERC721Caller: WERC721Caller{contract: contract}, WERC721Transactor: WERC721Transactor{contract: contract}, WERC721Filterer: WERC721Filterer{contract: contract}}, nil
}

// WERC721 is an auto generated Go binding around an Ethereum contract.
type WERC721 struct {
	WERC721Caller     // Read-only binding to the contract
	WERC721Transactor // Write-only binding to the contract
	WERC721Filterer   // Log filterer for contract events
}

// WERC721Caller is an auto generated read-only Go binding around an Ethereum contract.
type WERC721Caller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// WERC721Transactor is an auto generated write-only Go binding around an Ethereum contract.
type WERC721Transactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// WERC721Filterer is an auto generated log filtering Go binding around an Ethereum contract events.
type WERC721Filterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// WERC721Session is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type WERC721Session struct {
	Contract     *WERC721          // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// WERC721CallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type WERC721CallerSession struct {
	Contract *WERC721Caller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts  // Call options to use throughout this session
}

// WERC721TransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type WERC721TransactorSession struct {
	Contract     *WERC721Transactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts  // Transaction auth options to use throughout this session
}

// WERC721Raw is an auto generated low-level Go binding around an Ethereum contract.
type WERC721Raw struct {
	Contract *WERC721 // Generic contract binding to access the raw methods on
}

// WERC721CallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type WERC721CallerRaw struct {
	Contract *WERC721Caller // Generic read-only contract binding to access the raw methods on
}

// WERC721TransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type WERC721TransactorRaw struct {
	Contract *WERC721Transactor // Generic write-only contract binding to access the raw methods on
}

// NewWERC721 creates a new instance of WERC721, bound to a specific deployed contract.
func NewWERC721(address common.Address, backend bind.ContractBackend) (*WERC721, error) {
	contract, err := bindWERC721(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &WERC721{WERC721Caller: WERC721Caller{contract: contract}, WERC721Transactor: WERC721Transactor{contract: contract}, WERC721Filterer: WERC721Filterer{contract: contract}}, nil
}

// NewWERC721Caller creates a new read-only instance of WERC721, bound to a specific deployed contract.
func NewWERC721Caller(address common.Address, caller bind.ContractCaller) (*WERC721Caller, error) {
	contract, err := bindWERC721(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &WERC721Caller{contract: contract}, nil
}

// NewWERC721Transactor creates a new write-only instance of WERC721, bound to a specific deployed contract.
func NewWERC721Transactor(address common.Address, transactor bind.ContractTransactor) (*WERC721Transactor, error) {
	contract, err := bindWERC721(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &WERC721Transactor{contract: contract}, nil
}

// NewWERC721Filterer creates a new log filterer instance of WERC721, bound to a specific deployed contract.
func NewWERC721Filterer(address common.Address, filterer bind.ContractFilterer) (*WERC721Filterer, error) {
	contract, err := bindWERC721(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &WERC721Filterer{contract: contract}, nil
}

// bindWERC721 binds a generic wrapper to an already deployed contract.
func bindWERC721(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := abi.JSON(strings.NewReader(WERC721ABI))
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_WERC721 *WERC721Raw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _WERC721.Contract.WERC721Caller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_WERC721 *WERC721Raw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _WERC721.Contract.WERC721Transactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_WERC721 *WERC721Raw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _WERC721.Contract.WERC721Transactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_WERC721 *WERC721CallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _WERC721.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_WERC721 *WERC721TransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _WERC721.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_WERC721 *WERC721TransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _WERC721.Contract.contract.Transact(opts, method, params...)
}

// BalanceOf is a free data retrieval call binding the contract method 0x70a08231.
//
// Solidity: function balanceOf(address owner) view returns(uint256)
func (_WERC721 *WERC721Caller) BalanceOf(opts *bind.CallOpts, owner common.Address) (*big.Int, error) {
	var out []interface{}
	err := _WERC721.contract.Call(opts, &out, "balanceOf", owner)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// BalanceOf is a free data retrieval call binding the contract method 0x70a08231.
//
// Solidity: function balanceOf(address owner) view returns(uint256)
func (_WERC721 *WERC721Session) BalanceOf(owner common.Address) (*big.Int, error) {
	return _WERC721.Contract.BalanceOf(&_WERC721.CallOpts, owner)
}

// BalanceOf is a free data retrieval call binding the contract method 0x70a08231.
//
// Solidity: function balanceOf(address owner) view returns(uint256)
func (_WERC721 *WERC721CallerSession) BalanceOf(owner common.Address) (*big.Int, error) {
	return _WERC721.Contract.BalanceOf(&_WERC721.CallOpts, owner)
}

// GetApproved is a free data retrieval call binding the contract method 0x081812fc.
//
// Solidity: function getApproved(uint256 tokenId) view returns(address)
func (_WERC721 *WERC721Caller) GetApproved(opts *bind.CallOpts, tokenId *big.Int) (common.Address, error) {
	var out []interface{}
	err := _WERC721.contract.Call(opts, &out, "getApproved", tokenId)

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// GetApproved is a free data retrieval call binding the contract method 0x081812fc.
//
// Solidity: function getApproved(uint256 tokenId) view returns(address)
func (_WERC721 *WERC721Session) GetApproved(tokenId *big.Int) (common.Address, error) {
	return _WERC721.Contract.GetApproved(&_WERC721.CallOpts, tokenId)
}

// GetApproved is a free data retrieval call binding the contract method 0x081812fc.
//
// Solidity: function getApproved(uint256 tokenId) view returns(address)
func (_WERC721 *WERC721CallerSession) GetApproved(tokenId *big.Int) (common.Address, error) {
	return _WERC721.Contract.GetApproved(&_WERC721.CallOpts, tokenId)
}

// IsApprovedForAll is a free data retrieval call binding the contract method 0xe985e9c5.
//
// Solidity: function isApprovedForAll(address owner, address operator) view returns(bool)
func (_WERC721 *WERC721Caller) IsApprovedForAll(opts *bind.CallOpts, owner common.Address, operator common.Address) (bool, error) {
	var out []interface{}
	err := _WERC721.contract.Call(opts, &out, "isApprovedForAll", owner, operator)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// IsApprovedForAll is a free data retrieval call binding the contract method 0xe985e9c5.
//
// Solidity: function isApprovedForAll(address owner, address operator) view returns(bool)
func (_WERC721 *WERC721Session) IsApprovedForAll(owner common.Address, operator common.Address) (bool, error) {
	return _WERC721.Contract.IsApprovedForAll(&_WERC721.CallOpts, owner, operator)
}

// IsApprovedForAll is a free data retrieval call binding the contract method 0xe985e9c5.
//
// Solidity: function isApprovedForAll(address owner, address operator) view returns(bool)
func (_WERC721 *WERC721CallerSession) IsApprovedForAll(owner common.Address, operator common.Address) (bool, error) {
	return _WERC721.Contract.IsApprovedForAll(&_WERC721.CallOpts, owner, operator)
}

// Name is a free data retrieval call binding the contract method 0x06fdde03.
//
// Solidity: function name() view returns(string)
func (_WERC721 *WERC721Caller) Name(opts *bind.CallOpts) (string, error) {
	var out []interface{}
	err := _WERC721.contract.Call(opts, &out, "name")

	if err != nil {
		return *new(string), err
	}

	out0 := *abi.ConvertType(out[0], new(string)).(*string)

	return out0, err

}

// Name is a free data retrieval call binding the contract method 0x06fdde03.
//
// Solidity: function name() view returns(string)
func (_WERC721 *WERC721Session) Name() (string, error) {
	return _WERC721.Contract.Name(&_WERC721.CallOpts)
}

// Name is a free data retrieval call binding the contract method 0x06fdde03.
//
// Solidity: function name() view returns(string)
func (_WERC721 *WERC721CallerSession) Name() (string, error) {
	return _WERC721.Contract.Name(&_WERC721.CallOpts)
}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() view returns(address)
func (_WERC721 *WERC721Caller) Owner(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _WERC721.contract.Call(opts, &out, "owner")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() view returns(address)
func (_WERC721 *WERC721Session) Owner() (common.Address, error) {
	return _WERC721.Contract.Owner(&_WERC721.CallOpts)
}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() view returns(address)
func (_WERC721 *WERC721CallerSession) Owner() (common.Address, error) {
	return _WERC721.Contract.Owner(&_WERC721.CallOpts)
}

// OwnerOf is a free data retrieval call binding the contract method 0x6352211e.
//
// Solidity: function ownerOf(uint256 tokenId) view returns(address)
func (_WERC721 *WERC721Caller) OwnerOf(opts *bind.CallOpts, tokenId *big.Int) (common.Address, error) {
	var out []interface{}
	err := _WERC721.contract.Call(opts, &out, "ownerOf", tokenId)

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// OwnerOf is a free data retrieval call binding the contract method 0x6352211e.
//
// Solidity: function ownerOf(uint256 tokenId) view returns(address)
func (_WERC721 *WERC721Session) OwnerOf(tokenId *big.Int) (common.Address, error) {
	return _WERC721.Contract.OwnerOf(&_WERC721.CallOpts, tokenId)
}

// OwnerOf is a free data retrieval call binding the contract method 0x6352211e.
//
// Solidity: function ownerOf(uint256 tokenId) view returns(address)
func (_WERC721 *WERC721CallerSession) OwnerOf(tokenId *big.Int) (common.Address, error) {
	return _WERC721.Contract.OwnerOf(&_WERC721.CallOpts, tokenId)
}

// SupportsInterface is a free data retrieval call binding the contract method 0x01ffc9a7.
//
// Solidity: function supportsInterface(bytes4 interfaceId) view returns(bool)
func (_WERC721 *WERC721Caller) SupportsInterface(opts *bind.CallOpts, interfaceId [4]byte) (bool, error) {
	var out []interface{}
	err := _WERC721.contract.Call(opts, &out, "supportsInterface", interfaceId)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// SupportsInterface is a free data retrieval call binding the contract method 0x01ffc9a7.
//
// Solidity: function supportsInterface(bytes4 interfaceId) view returns(bool)
func (_WERC721 *WERC721Session) SupportsInterface(interfaceId [4]byte) (bool, error) {
	return _WERC721.Contract.SupportsInterface(&_WERC721.CallOpts, interfaceId)
}

// SupportsInterface is a free data retrieval call binding the contract method 0x01ffc9a7.
//
// Solidity: function supportsInterface(bytes4 interfaceId) view returns(bool)
func (_WERC721 *WERC721CallerSession) SupportsInterface(interfaceId [4]byte) (bool, error) {
	return _WERC721.Contract.SupportsInterface(&_WERC721.CallOpts, interfaceId)
}

// Symbol is a free data retrieval call binding the contract method 0x95d89b41.
//
// Solidity: function symbol() view returns(string)
func (_WERC721 *WERC721Caller) Symbol(opts *bind.CallOpts) (string, error) {
	var out []interface{}
	err := _WERC721.contract.Call(opts, &out, "symbol")

	if err != nil {
		return *new(string), err
	}

	out0 := *abi.ConvertType(out[0], new(string)).(*string)

	return out0, err

}

// Symbol is a free data retrieval call binding the contract method 0x95d89b41.
//
// Solidity: function symbol() view returns(string)
func (_WERC721 *WERC721Session) Symbol() (string, error) {
	return _WERC721.Contract.Symbol(&_WERC721.CallOpts)
}

// Symbol is a free data retrieval call binding the contract method 0x95d89b41.
//
// Solidity: function symbol() view returns(string)
func (_WERC721 *WERC721CallerSession) Symbol() (string, error) {
	return _WERC721.Contract.Symbol(&_WERC721.CallOpts)
}

// TokenURI is a free data retrieval call binding the contract method 0xc87b56dd.
//
// Solidity: function tokenURI(uint256 tokenId) view returns(string)
func (_WERC721 *WERC721Caller) TokenURI(opts *bind.CallOpts, tokenId *big.Int) (string, error) {
	var out []interface{}
	err := _WERC721.contract.Call(opts, &out, "tokenURI", tokenId)

	if err != nil {
		return *new(string), err
	}

	out0 := *abi.ConvertType(out[0], new(string)).(*string)

	return out0, err

}

// TokenURI is a free data retrieval call binding the contract method 0xc87b56dd.
//
// Solidity: function tokenURI(uint256 tokenId) view returns(string)
func (_WERC721 *WERC721Session) TokenURI(tokenId *big.Int) (string, error) {
	return _WERC721.Contract.TokenURI(&_WERC721.CallOpts, tokenId)
}

// TokenURI is a free data retrieval call binding the contract method 0xc87b56dd.
//
// Solidity: function tokenURI(uint256 tokenId) view returns(string)
func (_WERC721 *WERC721CallerSession) TokenURI(tokenId *big.Int) (string, error) {
	return _WERC721.Contract.TokenURI(&_WERC721.CallOpts, tokenId)
}

// Approve is a paid mutator transaction binding the contract method 0x095ea7b3.
//
// Solidity: function approve(address to, uint256 tokenId) returns()
func (_WERC721 *WERC721Transactor) Approve(opts *bind.TransactOpts, to common.Address, tokenId *big.Int) (*types.Transaction, error) {
	return _WERC721.contract.Transact(opts, "approve", to, tokenId)
}

// Approve is a paid mutator transaction binding the contract method 0x095ea7b3.
//
// Solidity: function approve(address to, uint256 tokenId) returns()
func (_WERC721 *WERC721Session) Approve(to common.Address, tokenId *big.Int) (*types.Transaction, error) {
	return _WERC721.Contract.Approve(&_WERC721.TransactOpts, to, tokenId)
}

// Approve is a paid mutator transaction binding the contract method 0x095ea7b3.
//
// Solidity: function approve(address to, uint256 tokenId) returns()
func (_WERC721 *WERC721TransactorSession) Approve(to common.Address, tokenId *big.Int) (*types.Transaction, error) {
	return _WERC721.Contract.Approve(&_WERC721.TransactOpts, to, tokenId)
}

// Mint is a paid mutator transaction binding the contract method 0x40c10f19.
//
// Solidity: function mint(address _to, uint256 _tokenId) returns()
func (_WERC721 *WERC721Transactor) Mint(opts *bind.TransactOpts, _to common.Address, _tokenId *big.Int) (*types.Transaction, error) {
	return _WERC721.contract.Transact(opts, "mint", _to, _tokenId)
}

// Mint is a paid mutator transaction binding the contract method 0x40c10f19.
//
// Solidity: function mint(address _to, uint256 _tokenId) returns()
func (_WERC721 *WERC721Session) Mint(_to common.Address, _tokenId *big.Int) (*types.Transaction, error) {
	return _WERC721.Contract.Mint(&_WERC721.TransactOpts, _to, _tokenId)
}

// Mint is a paid mutator transaction binding the contract method 0x40c10f19.
//
// Solidity: function mint(address _to, uint256 _tokenId) returns()
func (_WERC721 *WERC721TransactorSession) Mint(_to common.Address, _tokenId *big.Int) (*types.Transaction, error) {
	return _WERC721.Contract.Mint(&_WERC721.TransactOpts, _to, _tokenId)
}

// RenounceOwnership is a paid mutator transaction binding the contract method 0x715018a6.
//
// Solidity: function renounceOwnership() returns()
func (_WERC721 *WERC721Transactor) RenounceOwnership(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _WERC721.contract.Transact(opts, "renounceOwnership")
}

// RenounceOwnership is a paid mutator transaction binding the contract method 0x715018a6.
//
// Solidity: function renounceOwnership() returns()
func (_WERC721 *WERC721Session) RenounceOwnership() (*types.Transaction, error) {
	return _WERC721.Contract.RenounceOwnership(&_WERC721.TransactOpts)
}

// RenounceOwnership is a paid mutator transaction binding the contract method 0x715018a6.
//
// Solidity: function renounceOwnership() returns()
func (_WERC721 *WERC721TransactorSession) RenounceOwnership() (*types.Transaction, error) {
	return _WERC721.Contract.RenounceOwnership(&_WERC721.TransactOpts)
}

// SafeTransferFrom is a paid mutator transaction binding the contract method 0x42842e0e.
//
// Solidity: function safeTransferFrom(address from, address to, uint256 tokenId) returns()
func (_WERC721 *WERC721Transactor) SafeTransferFrom(opts *bind.TransactOpts, from common.Address, to common.Address, tokenId *big.Int) (*types.Transaction, error) {
	return _WERC721.contract.Transact(opts, "safeTransferFrom", from, to, tokenId)
}

// SafeTransferFrom is a paid mutator transaction binding the contract method 0x42842e0e.
//
// Solidity: function safeTransferFrom(address from, address to, uint256 tokenId) returns()
func (_WERC721 *WERC721Session) SafeTransferFrom(from common.Address, to common.Address, tokenId *big.Int) (*types.Transaction, error) {
	return _WERC721.Contract.SafeTransferFrom(&_WERC721.TransactOpts, from, to, tokenId)
}

// SafeTransferFrom is a paid mutator transaction binding the contract method 0x42842e0e.
//
// Solidity: function safeTransferFrom(address from, address to, uint256 tokenId) returns()
func (_WERC721 *WERC721TransactorSession) SafeTransferFrom(from common.Address, to common.Address, tokenId *big.Int) (*types.Transaction, error) {
	return _WERC721.Contract.SafeTransferFrom(&_WERC721.TransactOpts, from, to, tokenId)
}

// SafeTransferFrom0 is a paid mutator transaction binding the contract method 0xb88d4fde.
//
// Solidity: function safeTransferFrom(address from, address to, uint256 tokenId, bytes _data) returns()
func (_WERC721 *WERC721Transactor) SafeTransferFrom0(opts *bind.TransactOpts, from common.Address, to common.Address, tokenId *big.Int, _data []byte) (*types.Transaction, error) {
	return _WERC721.contract.Transact(opts, "safeTransferFrom0", from, to, tokenId, _data)
}

// SafeTransferFrom0 is a paid mutator transaction binding the contract method 0xb88d4fde.
//
// Solidity: function safeTransferFrom(address from, address to, uint256 tokenId, bytes _data) returns()
func (_WERC721 *WERC721Session) SafeTransferFrom0(from common.Address, to common.Address, tokenId *big.Int, _data []byte) (*types.Transaction, error) {
	return _WERC721.Contract.SafeTransferFrom0(&_WERC721.TransactOpts, from, to, tokenId, _data)
}

// SafeTransferFrom0 is a paid mutator transaction binding the contract method 0xb88d4fde.
//
// Solidity: function safeTransferFrom(address from, address to, uint256 tokenId, bytes _data) returns()
func (_WERC721 *WERC721TransactorSession) SafeTransferFrom0(from common.Address, to common.Address, tokenId *big.Int, _data []byte) (*types.Transaction, error) {
	return _WERC721.Contract.SafeTransferFrom0(&_WERC721.TransactOpts, from, to, tokenId, _data)
}

// SetApprovalForAll is a paid mutator transaction binding the contract method 0xa22cb465.
//
// Solidity: function setApprovalForAll(address operator, bool approved) returns()
func (_WERC721 *WERC721Transactor) SetApprovalForAll(opts *bind.TransactOpts, operator common.Address, approved bool) (*types.Transaction, error) {
	return _WERC721.contract.Transact(opts, "setApprovalForAll", operator, approved)
}

// SetApprovalForAll is a paid mutator transaction binding the contract method 0xa22cb465.
//
// Solidity: function setApprovalForAll(address operator, bool approved) returns()
func (_WERC721 *WERC721Session) SetApprovalForAll(operator common.Address, approved bool) (*types.Transaction, error) {
	return _WERC721.Contract.SetApprovalForAll(&_WERC721.TransactOpts, operator, approved)
}

// SetApprovalForAll is a paid mutator transaction binding the contract method 0xa22cb465.
//
// Solidity: function setApprovalForAll(address operator, bool approved) returns()
func (_WERC721 *WERC721TransactorSession) SetApprovalForAll(operator common.Address, approved bool) (*types.Transaction, error) {
	return _WERC721.Contract.SetApprovalForAll(&_WERC721.TransactOpts, operator, approved)
}

// SwitchUserPermissions is a paid mutator transaction binding the contract method 0x48065fa6.
//
// Solidity: function switchUserPermissions(address _user) returns()
func (_WERC721 *WERC721Transactor) SwitchUserPermissions(opts *bind.TransactOpts, _user common.Address) (*types.Transaction, error) {
	return _WERC721.contract.Transact(opts, "switchUserPermissions", _user)
}

// SwitchUserPermissions is a paid mutator transaction binding the contract method 0x48065fa6.
//
// Solidity: function switchUserPermissions(address _user) returns()
func (_WERC721 *WERC721Session) SwitchUserPermissions(_user common.Address) (*types.Transaction, error) {
	return _WERC721.Contract.SwitchUserPermissions(&_WERC721.TransactOpts, _user)
}

// SwitchUserPermissions is a paid mutator transaction binding the contract method 0x48065fa6.
//
// Solidity: function switchUserPermissions(address _user) returns()
func (_WERC721 *WERC721TransactorSession) SwitchUserPermissions(_user common.Address) (*types.Transaction, error) {
	return _WERC721.Contract.SwitchUserPermissions(&_WERC721.TransactOpts, _user)
}

// TransferFrom is a paid mutator transaction binding the contract method 0x23b872dd.
//
// Solidity: function transferFrom(address from, address to, uint256 tokenId) returns()
func (_WERC721 *WERC721Transactor) TransferFrom(opts *bind.TransactOpts, from common.Address, to common.Address, tokenId *big.Int) (*types.Transaction, error) {
	return _WERC721.contract.Transact(opts, "transferFrom", from, to, tokenId)
}

// TransferFrom is a paid mutator transaction binding the contract method 0x23b872dd.
//
// Solidity: function transferFrom(address from, address to, uint256 tokenId) returns()
func (_WERC721 *WERC721Session) TransferFrom(from common.Address, to common.Address, tokenId *big.Int) (*types.Transaction, error) {
	return _WERC721.Contract.TransferFrom(&_WERC721.TransactOpts, from, to, tokenId)
}

// TransferFrom is a paid mutator transaction binding the contract method 0x23b872dd.
//
// Solidity: function transferFrom(address from, address to, uint256 tokenId) returns()
func (_WERC721 *WERC721TransactorSession) TransferFrom(from common.Address, to common.Address, tokenId *big.Int) (*types.Transaction, error) {
	return _WERC721.Contract.TransferFrom(&_WERC721.TransactOpts, from, to, tokenId)
}

// TransferOwnership is a paid mutator transaction binding the contract method 0xf2fde38b.
//
// Solidity: function transferOwnership(address newOwner) returns()
func (_WERC721 *WERC721Transactor) TransferOwnership(opts *bind.TransactOpts, newOwner common.Address) (*types.Transaction, error) {
	return _WERC721.contract.Transact(opts, "transferOwnership", newOwner)
}

// TransferOwnership is a paid mutator transaction binding the contract method 0xf2fde38b.
//
// Solidity: function transferOwnership(address newOwner) returns()
func (_WERC721 *WERC721Session) TransferOwnership(newOwner common.Address) (*types.Transaction, error) {
	return _WERC721.Contract.TransferOwnership(&_WERC721.TransactOpts, newOwner)
}

// TransferOwnership is a paid mutator transaction binding the contract method 0xf2fde38b.
//
// Solidity: function transferOwnership(address newOwner) returns()
func (_WERC721 *WERC721TransactorSession) TransferOwnership(newOwner common.Address) (*types.Transaction, error) {
	return _WERC721.Contract.TransferOwnership(&_WERC721.TransactOpts, newOwner)
}

// WERC721ApprovalIterator is returned from FilterApproval and is used to iterate over the raw logs and unpacked data for Approval events raised by the WERC721 contract.
type WERC721ApprovalIterator struct {
	Event *WERC721Approval // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *WERC721ApprovalIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(WERC721Approval)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(WERC721Approval)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *WERC721ApprovalIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *WERC721ApprovalIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// WERC721Approval represents a Approval event raised by the WERC721 contract.
type WERC721Approval struct {
	Owner    common.Address
	Approved common.Address
	TokenId  *big.Int
	Raw      types.Log // Blockchain specific contextual infos
}

// FilterApproval is a free log retrieval operation binding the contract event 0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925.
//
// Solidity: event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId)
func (_WERC721 *WERC721Filterer) FilterApproval(opts *bind.FilterOpts, owner []common.Address, approved []common.Address, tokenId []*big.Int) (*WERC721ApprovalIterator, error) {

	var ownerRule []interface{}
	for _, ownerItem := range owner {
		ownerRule = append(ownerRule, ownerItem)
	}
	var approvedRule []interface{}
	for _, approvedItem := range approved {
		approvedRule = append(approvedRule, approvedItem)
	}
	var tokenIdRule []interface{}
	for _, tokenIdItem := range tokenId {
		tokenIdRule = append(tokenIdRule, tokenIdItem)
	}

	logs, sub, err := _WERC721.contract.FilterLogs(opts, "Approval", ownerRule, approvedRule, tokenIdRule)
	if err != nil {
		return nil, err
	}
	return &WERC721ApprovalIterator{contract: _WERC721.contract, event: "Approval", logs: logs, sub: sub}, nil
}

// WatchApproval is a free log subscription operation binding the contract event 0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925.
//
// Solidity: event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId)
func (_WERC721 *WERC721Filterer) WatchApproval(opts *bind.WatchOpts, sink chan<- *WERC721Approval, owner []common.Address, approved []common.Address, tokenId []*big.Int) (event.Subscription, error) {

	var ownerRule []interface{}
	for _, ownerItem := range owner {
		ownerRule = append(ownerRule, ownerItem)
	}
	var approvedRule []interface{}
	for _, approvedItem := range approved {
		approvedRule = append(approvedRule, approvedItem)
	}
	var tokenIdRule []interface{}
	for _, tokenIdItem := range tokenId {
		tokenIdRule = append(tokenIdRule, tokenIdItem)
	}

	logs, sub, err := _WERC721.contract.WatchLogs(opts, "Approval", ownerRule, approvedRule, tokenIdRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(WERC721Approval)
				if err := _WERC721.contract.UnpackLog(event, "Approval", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseApproval is a log parse operation binding the contract event 0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925.
//
// Solidity: event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId)
func (_WERC721 *WERC721Filterer) ParseApproval(log types.Log) (*WERC721Approval, error) {
	event := new(WERC721Approval)
	if err := _WERC721.contract.UnpackLog(event, "Approval", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// WERC721ApprovalForAllIterator is returned from FilterApprovalForAll and is used to iterate over the raw logs and unpacked data for ApprovalForAll events raised by the WERC721 contract.
type WERC721ApprovalForAllIterator struct {
	Event *WERC721ApprovalForAll // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *WERC721ApprovalForAllIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(WERC721ApprovalForAll)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(WERC721ApprovalForAll)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *WERC721ApprovalForAllIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *WERC721ApprovalForAllIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// WERC721ApprovalForAll represents a ApprovalForAll event raised by the WERC721 contract.
type WERC721ApprovalForAll struct {
	Owner    common.Address
	Operator common.Address
	Approved bool
	Raw      types.Log // Blockchain specific contextual infos
}

// FilterApprovalForAll is a free log retrieval operation binding the contract event 0x17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31.
//
// Solidity: event ApprovalForAll(address indexed owner, address indexed operator, bool approved)
func (_WERC721 *WERC721Filterer) FilterApprovalForAll(opts *bind.FilterOpts, owner []common.Address, operator []common.Address) (*WERC721ApprovalForAllIterator, error) {

	var ownerRule []interface{}
	for _, ownerItem := range owner {
		ownerRule = append(ownerRule, ownerItem)
	}
	var operatorRule []interface{}
	for _, operatorItem := range operator {
		operatorRule = append(operatorRule, operatorItem)
	}

	logs, sub, err := _WERC721.contract.FilterLogs(opts, "ApprovalForAll", ownerRule, operatorRule)
	if err != nil {
		return nil, err
	}
	return &WERC721ApprovalForAllIterator{contract: _WERC721.contract, event: "ApprovalForAll", logs: logs, sub: sub}, nil
}

// WatchApprovalForAll is a free log subscription operation binding the contract event 0x17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31.
//
// Solidity: event ApprovalForAll(address indexed owner, address indexed operator, bool approved)
func (_WERC721 *WERC721Filterer) WatchApprovalForAll(opts *bind.WatchOpts, sink chan<- *WERC721ApprovalForAll, owner []common.Address, operator []common.Address) (event.Subscription, error) {

	var ownerRule []interface{}
	for _, ownerItem := range owner {
		ownerRule = append(ownerRule, ownerItem)
	}
	var operatorRule []interface{}
	for _, operatorItem := range operator {
		operatorRule = append(operatorRule, operatorItem)
	}

	logs, sub, err := _WERC721.contract.WatchLogs(opts, "ApprovalForAll", ownerRule, operatorRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(WERC721ApprovalForAll)
				if err := _WERC721.contract.UnpackLog(event, "ApprovalForAll", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseApprovalForAll is a log parse operation binding the contract event 0x17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31.
//
// Solidity: event ApprovalForAll(address indexed owner, address indexed operator, bool approved)
func (_WERC721 *WERC721Filterer) ParseApprovalForAll(log types.Log) (*WERC721ApprovalForAll, error) {
	event := new(WERC721ApprovalForAll)
	if err := _WERC721.contract.UnpackLog(event, "ApprovalForAll", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// WERC721OwnershipTransferredIterator is returned from FilterOwnershipTransferred and is used to iterate over the raw logs and unpacked data for OwnershipTransferred events raised by the WERC721 contract.
type WERC721OwnershipTransferredIterator struct {
	Event *WERC721OwnershipTransferred // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *WERC721OwnershipTransferredIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(WERC721OwnershipTransferred)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(WERC721OwnershipTransferred)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *WERC721OwnershipTransferredIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *WERC721OwnershipTransferredIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// WERC721OwnershipTransferred represents a OwnershipTransferred event raised by the WERC721 contract.
type WERC721OwnershipTransferred struct {
	PreviousOwner common.Address
	NewOwner      common.Address
	Raw           types.Log // Blockchain specific contextual infos
}

// FilterOwnershipTransferred is a free log retrieval operation binding the contract event 0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0.
//
// Solidity: event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)
func (_WERC721 *WERC721Filterer) FilterOwnershipTransferred(opts *bind.FilterOpts, previousOwner []common.Address, newOwner []common.Address) (*WERC721OwnershipTransferredIterator, error) {

	var previousOwnerRule []interface{}
	for _, previousOwnerItem := range previousOwner {
		previousOwnerRule = append(previousOwnerRule, previousOwnerItem)
	}
	var newOwnerRule []interface{}
	for _, newOwnerItem := range newOwner {
		newOwnerRule = append(newOwnerRule, newOwnerItem)
	}

	logs, sub, err := _WERC721.contract.FilterLogs(opts, "OwnershipTransferred", previousOwnerRule, newOwnerRule)
	if err != nil {
		return nil, err
	}
	return &WERC721OwnershipTransferredIterator{contract: _WERC721.contract, event: "OwnershipTransferred", logs: logs, sub: sub}, nil
}

// WatchOwnershipTransferred is a free log subscription operation binding the contract event 0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0.
//
// Solidity: event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)
func (_WERC721 *WERC721Filterer) WatchOwnershipTransferred(opts *bind.WatchOpts, sink chan<- *WERC721OwnershipTransferred, previousOwner []common.Address, newOwner []common.Address) (event.Subscription, error) {

	var previousOwnerRule []interface{}
	for _, previousOwnerItem := range previousOwner {
		previousOwnerRule = append(previousOwnerRule, previousOwnerItem)
	}
	var newOwnerRule []interface{}
	for _, newOwnerItem := range newOwner {
		newOwnerRule = append(newOwnerRule, newOwnerItem)
	}

	logs, sub, err := _WERC721.contract.WatchLogs(opts, "OwnershipTransferred", previousOwnerRule, newOwnerRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(WERC721OwnershipTransferred)
				if err := _WERC721.contract.UnpackLog(event, "OwnershipTransferred", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseOwnershipTransferred is a log parse operation binding the contract event 0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0.
//
// Solidity: event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)
func (_WERC721 *WERC721Filterer) ParseOwnershipTransferred(log types.Log) (*WERC721OwnershipTransferred, error) {
	event := new(WERC721OwnershipTransferred)
	if err := _WERC721.contract.UnpackLog(event, "OwnershipTransferred", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// WERC721TransferIterator is returned from FilterTransfer and is used to iterate over the raw logs and unpacked data for Transfer events raised by the WERC721 contract.
type WERC721TransferIterator struct {
	Event *WERC721Transfer // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *WERC721TransferIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(WERC721Transfer)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(WERC721Transfer)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *WERC721TransferIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *WERC721TransferIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// WERC721Transfer represents a Transfer event raised by the WERC721 contract.
type WERC721Transfer struct {
	From    common.Address
	To      common.Address
	TokenId *big.Int
	Raw     types.Log // Blockchain specific contextual infos
}

// FilterTransfer is a free log retrieval operation binding the contract event 0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef.
//
// Solidity: event Transfer(address indexed from, address indexed to, uint256 indexed tokenId)
func (_WERC721 *WERC721Filterer) FilterTransfer(opts *bind.FilterOpts, from []common.Address, to []common.Address, tokenId []*big.Int) (*WERC721TransferIterator, error) {

	var fromRule []interface{}
	for _, fromItem := range from {
		fromRule = append(fromRule, fromItem)
	}
	var toRule []interface{}
	for _, toItem := range to {
		toRule = append(toRule, toItem)
	}
	var tokenIdRule []interface{}
	for _, tokenIdItem := range tokenId {
		tokenIdRule = append(tokenIdRule, tokenIdItem)
	}

	logs, sub, err := _WERC721.contract.FilterLogs(opts, "Transfer", fromRule, toRule, tokenIdRule)
	if err != nil {
		return nil, err
	}
	return &WERC721TransferIterator{contract: _WERC721.contract, event: "Transfer", logs: logs, sub: sub}, nil
}

// WatchTransfer is a free log subscription operation binding the contract event 0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef.
//
// Solidity: event Transfer(address indexed from, address indexed to, uint256 indexed tokenId)
func (_WERC721 *WERC721Filterer) WatchTransfer(opts *bind.WatchOpts, sink chan<- *WERC721Transfer, from []common.Address, to []common.Address, tokenId []*big.Int) (event.Subscription, error) {

	var fromRule []interface{}
	for _, fromItem := range from {
		fromRule = append(fromRule, fromItem)
	}
	var toRule []interface{}
	for _, toItem := range to {
		toRule = append(toRule, toItem)
	}
	var tokenIdRule []interface{}
	for _, tokenIdItem := range tokenId {
		tokenIdRule = append(tokenIdRule, tokenIdItem)
	}

	logs, sub, err := _WERC721.contract.WatchLogs(opts, "Transfer", fromRule, toRule, tokenIdRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(WERC721Transfer)
				if err := _WERC721.contract.UnpackLog(event, "Transfer", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseTransfer is a log parse operation binding the contract event 0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef.
//
// Solidity: event Transfer(address indexed from, address indexed to, uint256 indexed tokenId)
func (_WERC721 *WERC721Filterer) ParseTransfer(log types.Log) (*WERC721Transfer, error) {
	event := new(WERC721Transfer)
	if err := _WERC721.contract.UnpackLog(event, "Transfer", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}
